(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const s of r.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerpolicy&&(r.referrerPolicy=i.referrerpolicy),i.crossorigin==="use-credentials"?r.credentials="include":i.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const B2="151",z1={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},B1={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Y5=0,rn=1,j5=2,J4=1,Z5=2,w0=3,v1=0,bt=1,l1=2,_1=0,a0=1,on=2,an=3,sn=4,$5=5,n0=100,J5=101,K5=102,ln=103,cn=104,Q5=200,e6=201,t6=202,n6=203,K4=204,Q4=205,i6=206,r6=207,o6=208,a6=209,s6=210,l6=0,c6=1,u6=2,E2=3,h6=4,f6=5,d6=6,p6=7,e5=0,m6=1,g6=2,c1=0,_6=1,v6=2,x6=3,b6=4,M6=5,t5=300,h0=301,f0=302,T2=303,A2=304,E3=306,C2=1e3,Bt=1001,L2=1002,vt=1003,un=1004,N3=1005,Rt=1006,y6=1007,P0=1008,D1=1009,S6=1010,w6=1011,n5=1012,E6=1013,L1=1014,P1=1015,R0=1016,T6=1017,A6=1018,s0=1020,C6=1021,Ht=1023,L6=1024,P6=1025,R1=1026,d0=1027,R6=1028,D6=1029,I6=1030,U6=1031,N6=1033,O3=33776,F3=33777,z3=33778,B3=33779,hn=35840,fn=35841,dn=35842,pn=35843,O6=36196,mn=37492,gn=37496,_n=37808,vn=37809,xn=37810,bn=37811,Mn=37812,yn=37813,Sn=37814,wn=37815,En=37816,Tn=37817,An=37818,Cn=37819,Ln=37820,Pn=37821,H3=36492,F6=36283,Rn=36284,Dn=36285,In=36286,I1=3e3,Xe=3001,z6=3200,B6=3201,H6=0,V6=1,qt="srgb",D0="srgb-linear",i5="display-p3",V3=7680,G6=519,Un=35044,Nn="300 es",P2=1035;class F1{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const r=i.indexOf(t);r!==-1&&i.splice(r,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let r=0,s=i.length;r<s;r++)i[r].call(this,e);e.target=null}}}const ft=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],x3=Math.PI/180,R2=180/Math.PI;function m0(){const o=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(ft[o&255]+ft[o>>8&255]+ft[o>>16&255]+ft[o>>24&255]+"-"+ft[e&255]+ft[e>>8&255]+"-"+ft[e>>16&15|64]+ft[e>>24&255]+"-"+ft[t&63|128]+ft[t>>8&255]+"-"+ft[t>>16&255]+ft[t>>24&255]+ft[n&255]+ft[n>>8&255]+ft[n>>16&255]+ft[n>>24&255]).toLowerCase()}function st(o,e,t){return Math.max(e,Math.min(t,o))}function k6(o,e){return(o%e+e)%e}function G3(o,e,t){return(1-t)*o+t*e}function On(o){return(o&o-1)===0&&o!==0}function W6(o){return Math.pow(2,Math.floor(Math.log(o)/Math.LN2))}function G0(o,e){switch(e.constructor){case Float32Array:return o;case Uint16Array:return o/65535;case Uint8Array:return o/255;case Int16Array:return Math.max(o/32767,-1);case Int8Array:return Math.max(o/127,-1);default:throw new Error("Invalid component type.")}}function St(o,e){switch(e.constructor){case Float32Array:return o;case Uint16Array:return Math.round(o*65535);case Uint8Array:return Math.round(o*255);case Int16Array:return Math.round(o*32767);case Int8Array:return Math.round(o*127);default:throw new Error("Invalid component type.")}}class he{constructor(e=0,t=0){he.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(st(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),r=this.x-e.x,s=this.y-e.y;return this.x=r*n-s*i+e.x,this.y=r*i+s*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class He{constructor(){He.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,t,n,i,r,s,a,c,l){const u=this.elements;return u[0]=e,u[1]=i,u[2]=a,u[3]=t,u[4]=r,u[5]=c,u[6]=n,u[7]=s,u[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,s=n[0],a=n[3],c=n[6],l=n[1],u=n[4],f=n[7],h=n[2],p=n[5],g=n[8],_=i[0],m=i[3],d=i[6],w=i[1],x=i[4],v=i[7],y=i[2],C=i[5],R=i[8];return r[0]=s*_+a*w+c*y,r[3]=s*m+a*x+c*C,r[6]=s*d+a*v+c*R,r[1]=l*_+u*w+f*y,r[4]=l*m+u*x+f*C,r[7]=l*d+u*v+f*R,r[2]=h*_+p*w+g*y,r[5]=h*m+p*x+g*C,r[8]=h*d+p*v+g*R,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],s=e[4],a=e[5],c=e[6],l=e[7],u=e[8];return t*s*u-t*a*l-n*r*u+n*a*c+i*r*l-i*s*c}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],s=e[4],a=e[5],c=e[6],l=e[7],u=e[8],f=u*s-a*l,h=a*c-u*r,p=l*r-s*c,g=t*f+n*h+i*p;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/g;return e[0]=f*_,e[1]=(i*l-u*n)*_,e[2]=(a*n-i*s)*_,e[3]=h*_,e[4]=(u*t-i*c)*_,e[5]=(i*r-a*t)*_,e[6]=p*_,e[7]=(n*c-l*t)*_,e[8]=(s*t-n*r)*_,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,r,s,a){const c=Math.cos(r),l=Math.sin(r);return this.set(n*c,n*l,-n*(c*s+l*a)+s+e,-i*l,i*c,-i*(-l*s+c*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(k3.makeScale(e,t)),this}rotate(e){return this.premultiply(k3.makeRotation(-e)),this}translate(e,t){return this.premultiply(k3.makeTranslation(e,t)),this}makeTranslation(e,t){return this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const k3=new He;function r5(o){for(let e=o.length-1;e>=0;--e)if(o[e]>=65535)return!0;return!1}function S3(o){return document.createElementNS("http://www.w3.org/1999/xhtml",o)}function l0(o){return o<.04045?o*.0773993808:Math.pow(o*.9478672986+.0521327014,2.4)}function W3(o){return o<.0031308?o*12.92:1.055*Math.pow(o,.41666)-.055}const q6=new He().fromArray([.8224621,.0331941,.0170827,.177538,.9668058,.0723974,-1e-7,1e-7,.9105199]),X6=new He().fromArray([1.2249401,-.0420569,-.0196376,-.2249404,1.0420571,-.0786361,1e-7,0,1.0982735]);function Y6(o){return o.convertSRGBToLinear().applyMatrix3(X6)}function j6(o){return o.applyMatrix3(q6).convertLinearToSRGB()}const Z6={[D0]:o=>o,[qt]:o=>o.convertSRGBToLinear(),[i5]:Y6},$6={[D0]:o=>o,[qt]:o=>o.convertLinearToSRGB(),[i5]:j6},wt={enabled:!1,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(o){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!o},get workingColorSpace(){return D0},set workingColorSpace(o){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(o,e,t){if(this.enabled===!1||e===t||!e||!t)return o;const n=Z6[e],i=$6[t];if(n===void 0||i===void 0)throw new Error(`Unsupported color space conversion, "${e}" to "${t}".`);return i(n(o))},fromWorkingColorSpace:function(o,e){return this.convert(o,this.workingColorSpace,e)},toWorkingColorSpace:function(o,e){return this.convert(o,e,this.workingColorSpace)}};let H1;class o5{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{H1===void 0&&(H1=S3("canvas")),H1.width=e.width,H1.height=e.height;const n=H1.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=H1}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=S3("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),r=i.data;for(let s=0;s<r.length;s++)r[s]=l0(r[s]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(l0(t[n]/255)*255):t[n]=l0(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class a5{constructor(e=null){this.isSource=!0,this.uuid=m0(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let r;if(Array.isArray(i)){r=[];for(let s=0,a=i.length;s<a;s++)i[s].isDataTexture?r.push(q3(i[s].image)):r.push(q3(i[s]))}else r=q3(i);n.url=r}return t||(e.images[this.uuid]=n),n}}function q3(o){return typeof HTMLImageElement<"u"&&o instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&o instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&o instanceof ImageBitmap?o5.getDataURL(o):o.data?{data:Array.from(o.data),width:o.width,height:o.height,type:o.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let J6=0;class Ct extends F1{constructor(e=Ct.DEFAULT_IMAGE,t=Ct.DEFAULT_MAPPING,n=Bt,i=Bt,r=Rt,s=P0,a=Ht,c=D1,l=Ct.DEFAULT_ANISOTROPY,u=I1){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:J6++}),this.uuid=m0(),this.name="",this.source=new a5(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=c,this.offset=new he(0,0),this.repeat=new he(1,1),this.center=new he(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new He,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=u,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==t5)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case C2:e.x=e.x-Math.floor(e.x);break;case Bt:e.x=e.x<0?0:1;break;case L2:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case C2:e.y=e.y-Math.floor(e.y);break;case Bt:e.y=e.y<0?0:1;break;case L2:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}}Ct.DEFAULT_IMAGE=null;Ct.DEFAULT_MAPPING=t5;Ct.DEFAULT_ANISOTROPY=1;class ct{constructor(e=0,t=0,n=0,i=1){ct.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=this.w,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i+s[12]*r,this.y=s[1]*t+s[5]*n+s[9]*i+s[13]*r,this.z=s[2]*t+s[6]*n+s[10]*i+s[14]*r,this.w=s[3]*t+s[7]*n+s[11]*i+s[15]*r,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,r;const c=e.elements,l=c[0],u=c[4],f=c[8],h=c[1],p=c[5],g=c[9],_=c[2],m=c[6],d=c[10];if(Math.abs(u-h)<.01&&Math.abs(f-_)<.01&&Math.abs(g-m)<.01){if(Math.abs(u+h)<.1&&Math.abs(f+_)<.1&&Math.abs(g+m)<.1&&Math.abs(l+p+d-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const x=(l+1)/2,v=(p+1)/2,y=(d+1)/2,C=(u+h)/4,R=(f+_)/4,D=(g+m)/4;return x>v&&x>y?x<.01?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(x),i=C/n,r=R/n):v>y?v<.01?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(v),n=C/i,r=D/i):y<.01?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(y),n=R/r,i=D/r),this.set(n,i,r,t),this}let w=Math.sqrt((m-g)*(m-g)+(f-_)*(f-_)+(h-u)*(h-u));return Math.abs(w)<.001&&(w=1),this.x=(m-g)/w,this.y=(f-_)/w,this.z=(h-u)/w,this.w=Math.acos((l+p+d-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class U1 extends F1{constructor(e=1,t=1,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new ct(0,0,e,t),this.scissorTest=!1,this.viewport=new ct(0,0,e,t);const i={width:e,height:t,depth:1};this.texture=new Ct(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps!==void 0?n.generateMipmaps:!1,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:Rt,this.depthBuffer=n.depthBuffer!==void 0?n.depthBuffer:!0,this.stencilBuffer=n.stencilBuffer!==void 0?n.stencilBuffer:!1,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null,this.samples=n.samples!==void 0?n.samples:0}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new a5(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class s5 extends Ct{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=vt,this.minFilter=vt,this.wrapR=Bt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class K6 extends Ct{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=vt,this.minFilter=vt,this.wrapR=Bt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class N1{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,r,s,a){let c=n[i+0],l=n[i+1],u=n[i+2],f=n[i+3];const h=r[s+0],p=r[s+1],g=r[s+2],_=r[s+3];if(a===0){e[t+0]=c,e[t+1]=l,e[t+2]=u,e[t+3]=f;return}if(a===1){e[t+0]=h,e[t+1]=p,e[t+2]=g,e[t+3]=_;return}if(f!==_||c!==h||l!==p||u!==g){let m=1-a;const d=c*h+l*p+u*g+f*_,w=d>=0?1:-1,x=1-d*d;if(x>Number.EPSILON){const y=Math.sqrt(x),C=Math.atan2(y,d*w);m=Math.sin(m*C)/y,a=Math.sin(a*C)/y}const v=a*w;if(c=c*m+h*v,l=l*m+p*v,u=u*m+g*v,f=f*m+_*v,m===1-a){const y=1/Math.sqrt(c*c+l*l+u*u+f*f);c*=y,l*=y,u*=y,f*=y}}e[t]=c,e[t+1]=l,e[t+2]=u,e[t+3]=f}static multiplyQuaternionsFlat(e,t,n,i,r,s){const a=n[i],c=n[i+1],l=n[i+2],u=n[i+3],f=r[s],h=r[s+1],p=r[s+2],g=r[s+3];return e[t]=a*g+u*f+c*p-l*h,e[t+1]=c*g+u*h+l*f-a*p,e[t+2]=l*g+u*p+a*h-c*f,e[t+3]=u*g-a*f-c*h-l*p,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){const n=e._x,i=e._y,r=e._z,s=e._order,a=Math.cos,c=Math.sin,l=a(n/2),u=a(i/2),f=a(r/2),h=c(n/2),p=c(i/2),g=c(r/2);switch(s){case"XYZ":this._x=h*u*f+l*p*g,this._y=l*p*f-h*u*g,this._z=l*u*g+h*p*f,this._w=l*u*f-h*p*g;break;case"YXZ":this._x=h*u*f+l*p*g,this._y=l*p*f-h*u*g,this._z=l*u*g-h*p*f,this._w=l*u*f+h*p*g;break;case"ZXY":this._x=h*u*f-l*p*g,this._y=l*p*f+h*u*g,this._z=l*u*g+h*p*f,this._w=l*u*f-h*p*g;break;case"ZYX":this._x=h*u*f-l*p*g,this._y=l*p*f+h*u*g,this._z=l*u*g-h*p*f,this._w=l*u*f+h*p*g;break;case"YZX":this._x=h*u*f+l*p*g,this._y=l*p*f+h*u*g,this._z=l*u*g-h*p*f,this._w=l*u*f-h*p*g;break;case"XZY":this._x=h*u*f-l*p*g,this._y=l*p*f-h*u*g,this._z=l*u*g+h*p*f,this._w=l*u*f+h*p*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],s=t[1],a=t[5],c=t[9],l=t[2],u=t[6],f=t[10],h=n+a+f;if(h>0){const p=.5/Math.sqrt(h+1);this._w=.25/p,this._x=(u-c)*p,this._y=(r-l)*p,this._z=(s-i)*p}else if(n>a&&n>f){const p=2*Math.sqrt(1+n-a-f);this._w=(u-c)/p,this._x=.25*p,this._y=(i+s)/p,this._z=(r+l)/p}else if(a>f){const p=2*Math.sqrt(1+a-n-f);this._w=(r-l)/p,this._x=(i+s)/p,this._y=.25*p,this._z=(c+u)/p}else{const p=2*Math.sqrt(1+f-n-a);this._w=(s-i)/p,this._x=(r+l)/p,this._y=(c+u)/p,this._z=.25*p}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(st(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,r=e._z,s=e._w,a=t._x,c=t._y,l=t._z,u=t._w;return this._x=n*u+s*a+i*l-r*c,this._y=i*u+s*c+r*a-n*l,this._z=r*u+s*l+n*c-i*a,this._w=s*u-n*a-i*c-r*l,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*e._w+n*e._x+i*e._y+r*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=s,this._x=n,this._y=i,this._z=r,this;const c=1-a*a;if(c<=Number.EPSILON){const p=1-t;return this._w=p*s+t*this._w,this._x=p*n+t*this._x,this._y=p*i+t*this._y,this._z=p*r+t*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(c),u=Math.atan2(l,a),f=Math.sin((1-t)*u)/l,h=Math.sin(t*u)/l;return this._w=s*f+this._w*h,this._x=n*f+this._x*h,this._y=i*f+this._y*h,this._z=r*f+this._z*h,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(r),n*Math.cos(r),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class L{constructor(e=0,t=0,n=0){L.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(Fn.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(Fn.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=e.elements,s=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*s,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*s,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*s,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,r=e.x,s=e.y,a=e.z,c=e.w,l=c*t+s*i-a*n,u=c*n+a*t-r*i,f=c*i+r*n-s*t,h=-r*t-s*n-a*i;return this.x=l*c+h*-r+u*-a-f*-s,this.y=u*c+h*-s+f*-r-l*-a,this.z=f*c+h*-a+l*-s-u*-r,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i,this.y=r[1]*t+r[5]*n+r[9]*i,this.z=r[2]*t+r[6]*n+r[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z,s=t.x,a=t.y,c=t.z;return this.x=i*c-r*a,this.y=r*s-n*c,this.z=n*a-i*s,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return X3.copy(this).projectOnVector(e),this.sub(X3)}reflect(e){return this.sub(X3.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(st(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const X3=new L,Fn=new N1;class O0{constructor(e=new L(1/0,1/0,1/0),t=new L(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(t1.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(t1.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=t1.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){if(e.updateWorldMatrix(!1,!1),e.boundingBox!==void 0)e.boundingBox===null&&e.computeBoundingBox(),V1.copy(e.boundingBox),V1.applyMatrix4(e.matrixWorld),this.union(V1);else{const i=e.geometry;if(i!==void 0)if(t&&i.attributes!==void 0&&i.attributes.position!==void 0){const r=i.attributes.position;for(let s=0,a=r.count;s<a;s++)t1.fromBufferAttribute(r,s).applyMatrix4(e.matrixWorld),this.expandByPoint(t1)}else i.boundingBox===null&&i.computeBoundingBox(),V1.copy(i.boundingBox),V1.applyMatrix4(e.matrixWorld),this.union(V1)}const n=e.children;for(let i=0,r=n.length;i<r;i++)this.expandByObject(n[i],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,t1),t1.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(x0),k0.subVectors(this.max,x0),G1.subVectors(e.a,x0),k1.subVectors(e.b,x0),W1.subVectors(e.c,x0),f1.subVectors(k1,G1),d1.subVectors(W1,k1),w1.subVectors(G1,W1);let t=[0,-f1.z,f1.y,0,-d1.z,d1.y,0,-w1.z,w1.y,f1.z,0,-f1.x,d1.z,0,-d1.x,w1.z,0,-w1.x,-f1.y,f1.x,0,-d1.y,d1.x,0,-w1.y,w1.x,0];return!Y3(t,G1,k1,W1,k0)||(t=[1,0,0,0,1,0,0,0,1],!Y3(t,G1,k1,W1,k0))?!1:(W0.crossVectors(f1,d1),t=[W0.x,W0.y,W0.z],Y3(t,G1,k1,W1,k0))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,t1).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(t1).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(e1[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),e1[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),e1[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),e1[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),e1[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),e1[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),e1[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),e1[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(e1),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const e1=[new L,new L,new L,new L,new L,new L,new L,new L],t1=new L,V1=new O0,G1=new L,k1=new L,W1=new L,f1=new L,d1=new L,w1=new L,x0=new L,k0=new L,W0=new L,E1=new L;function Y3(o,e,t,n,i){for(let r=0,s=o.length-3;r<=s;r+=3){E1.fromArray(o,r);const a=i.x*Math.abs(E1.x)+i.y*Math.abs(E1.y)+i.z*Math.abs(E1.z),c=e.dot(E1),l=t.dot(E1),u=n.dot(E1);if(Math.max(-Math.max(c,l,u),Math.min(c,l,u))>a)return!1}return!0}const Q6=new O0,b0=new L,j3=new L;class T3{constructor(e=new L,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):Q6.setFromPoints(e).getCenter(n);let i=0;for(let r=0,s=e.length;r<s;r++)i=Math.max(i,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;b0.subVectors(e,this.center);const t=b0.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.addScaledVector(b0,i/n),this.radius+=i}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(j3.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(b0.copy(e.center).add(j3)),this.expandByPoint(b0.copy(e.center).sub(j3))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const n1=new L,Z3=new L,q0=new L,p1=new L,$3=new L,X0=new L,J3=new L;class H2{constructor(e=new L,t=new L(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,n1)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=n1.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(n1.copy(this.origin).addScaledVector(this.direction,t),n1.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){Z3.copy(e).add(t).multiplyScalar(.5),q0.copy(t).sub(e).normalize(),p1.copy(this.origin).sub(Z3);const r=e.distanceTo(t)*.5,s=-this.direction.dot(q0),a=p1.dot(this.direction),c=-p1.dot(q0),l=p1.lengthSq(),u=Math.abs(1-s*s);let f,h,p,g;if(u>0)if(f=s*c-a,h=s*a-c,g=r*u,f>=0)if(h>=-g)if(h<=g){const _=1/u;f*=_,h*=_,p=f*(f+s*h+2*a)+h*(s*f+h+2*c)+l}else h=r,f=Math.max(0,-(s*h+a)),p=-f*f+h*(h+2*c)+l;else h=-r,f=Math.max(0,-(s*h+a)),p=-f*f+h*(h+2*c)+l;else h<=-g?(f=Math.max(0,-(-s*r+a)),h=f>0?-r:Math.min(Math.max(-r,-c),r),p=-f*f+h*(h+2*c)+l):h<=g?(f=0,h=Math.min(Math.max(-r,-c),r),p=h*(h+2*c)+l):(f=Math.max(0,-(s*r+a)),h=f>0?r:Math.min(Math.max(-r,-c),r),p=-f*f+h*(h+2*c)+l);else h=s>0?-r:r,f=Math.max(0,-(s*h+a)),p=-f*f+h*(h+2*c)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,f),i&&i.copy(Z3).addScaledVector(q0,h),p}intersectSphere(e,t){n1.subVectors(e.center,this.origin);const n=n1.dot(this.direction),i=n1.dot(n1)-n*n,r=e.radius*e.radius;if(i>r)return null;const s=Math.sqrt(r-i),a=n-s,c=n+s;return c<0?null:a<0?this.at(c,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,r,s,a,c;const l=1/this.direction.x,u=1/this.direction.y,f=1/this.direction.z,h=this.origin;return l>=0?(n=(e.min.x-h.x)*l,i=(e.max.x-h.x)*l):(n=(e.max.x-h.x)*l,i=(e.min.x-h.x)*l),u>=0?(r=(e.min.y-h.y)*u,s=(e.max.y-h.y)*u):(r=(e.max.y-h.y)*u,s=(e.min.y-h.y)*u),n>s||r>i||((r>n||isNaN(n))&&(n=r),(s<i||isNaN(i))&&(i=s),f>=0?(a=(e.min.z-h.z)*f,c=(e.max.z-h.z)*f):(a=(e.max.z-h.z)*f,c=(e.min.z-h.z)*f),n>c||a>i)||((a>n||n!==n)&&(n=a),(c<i||i!==i)&&(i=c),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,n1)!==null}intersectTriangle(e,t,n,i,r){$3.subVectors(t,e),X0.subVectors(n,e),J3.crossVectors($3,X0);let s=this.direction.dot(J3),a;if(s>0){if(i)return null;a=1}else if(s<0)a=-1,s=-s;else return null;p1.subVectors(this.origin,e);const c=a*this.direction.dot(X0.crossVectors(p1,X0));if(c<0)return null;const l=a*this.direction.dot($3.cross(p1));if(l<0||c+l>s)return null;const u=-a*p1.dot(J3);return u<0?null:this.at(u/s,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class et{constructor(){et.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,t,n,i,r,s,a,c,l,u,f,h,p,g,_,m){const d=this.elements;return d[0]=e,d[4]=t,d[8]=n,d[12]=i,d[1]=r,d[5]=s,d[9]=a,d[13]=c,d[2]=l,d[6]=u,d[10]=f,d[14]=h,d[3]=p,d[7]=g,d[11]=_,d[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new et().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/q1.setFromMatrixColumn(e,0).length(),r=1/q1.setFromMatrixColumn(e,1).length(),s=1/q1.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*s,t[9]=n[9]*s,t[10]=n[10]*s,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,r=e.z,s=Math.cos(n),a=Math.sin(n),c=Math.cos(i),l=Math.sin(i),u=Math.cos(r),f=Math.sin(r);if(e.order==="XYZ"){const h=s*u,p=s*f,g=a*u,_=a*f;t[0]=c*u,t[4]=-c*f,t[8]=l,t[1]=p+g*l,t[5]=h-_*l,t[9]=-a*c,t[2]=_-h*l,t[6]=g+p*l,t[10]=s*c}else if(e.order==="YXZ"){const h=c*u,p=c*f,g=l*u,_=l*f;t[0]=h+_*a,t[4]=g*a-p,t[8]=s*l,t[1]=s*f,t[5]=s*u,t[9]=-a,t[2]=p*a-g,t[6]=_+h*a,t[10]=s*c}else if(e.order==="ZXY"){const h=c*u,p=c*f,g=l*u,_=l*f;t[0]=h-_*a,t[4]=-s*f,t[8]=g+p*a,t[1]=p+g*a,t[5]=s*u,t[9]=_-h*a,t[2]=-s*l,t[6]=a,t[10]=s*c}else if(e.order==="ZYX"){const h=s*u,p=s*f,g=a*u,_=a*f;t[0]=c*u,t[4]=g*l-p,t[8]=h*l+_,t[1]=c*f,t[5]=_*l+h,t[9]=p*l-g,t[2]=-l,t[6]=a*c,t[10]=s*c}else if(e.order==="YZX"){const h=s*c,p=s*l,g=a*c,_=a*l;t[0]=c*u,t[4]=_-h*f,t[8]=g*f+p,t[1]=f,t[5]=s*u,t[9]=-a*u,t[2]=-l*u,t[6]=p*f+g,t[10]=h-_*f}else if(e.order==="XZY"){const h=s*c,p=s*l,g=a*c,_=a*l;t[0]=c*u,t[4]=-f,t[8]=l*u,t[1]=h*f+_,t[5]=s*u,t[9]=p*f-g,t[2]=g*f-p,t[6]=a*u,t[10]=_*f+h}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(e7,e,t7)}lookAt(e,t,n){const i=this.elements;return Et.subVectors(e,t),Et.lengthSq()===0&&(Et.z=1),Et.normalize(),m1.crossVectors(n,Et),m1.lengthSq()===0&&(Math.abs(n.z)===1?Et.x+=1e-4:Et.z+=1e-4,Et.normalize(),m1.crossVectors(n,Et)),m1.normalize(),Y0.crossVectors(Et,m1),i[0]=m1.x,i[4]=Y0.x,i[8]=Et.x,i[1]=m1.y,i[5]=Y0.y,i[9]=Et.y,i[2]=m1.z,i[6]=Y0.z,i[10]=Et.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,s=n[0],a=n[4],c=n[8],l=n[12],u=n[1],f=n[5],h=n[9],p=n[13],g=n[2],_=n[6],m=n[10],d=n[14],w=n[3],x=n[7],v=n[11],y=n[15],C=i[0],R=i[4],D=i[8],M=i[12],T=i[1],W=i[5],Z=i[9],I=i[13],N=i[2],H=i[6],J=i[10],ee=i[14],j=i[3],oe=i[7],te=i[11],Me=i[15];return r[0]=s*C+a*T+c*N+l*j,r[4]=s*R+a*W+c*H+l*oe,r[8]=s*D+a*Z+c*J+l*te,r[12]=s*M+a*I+c*ee+l*Me,r[1]=u*C+f*T+h*N+p*j,r[5]=u*R+f*W+h*H+p*oe,r[9]=u*D+f*Z+h*J+p*te,r[13]=u*M+f*I+h*ee+p*Me,r[2]=g*C+_*T+m*N+d*j,r[6]=g*R+_*W+m*H+d*oe,r[10]=g*D+_*Z+m*J+d*te,r[14]=g*M+_*I+m*ee+d*Me,r[3]=w*C+x*T+v*N+y*j,r[7]=w*R+x*W+v*H+y*oe,r[11]=w*D+x*Z+v*J+y*te,r[15]=w*M+x*I+v*ee+y*Me,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],s=e[1],a=e[5],c=e[9],l=e[13],u=e[2],f=e[6],h=e[10],p=e[14],g=e[3],_=e[7],m=e[11],d=e[15];return g*(+r*c*f-i*l*f-r*a*h+n*l*h+i*a*p-n*c*p)+_*(+t*c*p-t*l*h+r*s*h-i*s*p+i*l*u-r*c*u)+m*(+t*l*f-t*a*p-r*s*f+n*s*p+r*a*u-n*l*u)+d*(-i*a*u-t*c*f+t*a*h+i*s*f-n*s*h+n*c*u)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],s=e[4],a=e[5],c=e[6],l=e[7],u=e[8],f=e[9],h=e[10],p=e[11],g=e[12],_=e[13],m=e[14],d=e[15],w=f*m*l-_*h*l+_*c*p-a*m*p-f*c*d+a*h*d,x=g*h*l-u*m*l-g*c*p+s*m*p+u*c*d-s*h*d,v=u*_*l-g*f*l+g*a*p-s*_*p-u*a*d+s*f*d,y=g*f*c-u*_*c-g*a*h+s*_*h+u*a*m-s*f*m,C=t*w+n*x+i*v+r*y;if(C===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const R=1/C;return e[0]=w*R,e[1]=(_*h*r-f*m*r-_*i*p+n*m*p+f*i*d-n*h*d)*R,e[2]=(a*m*r-_*c*r+_*i*l-n*m*l-a*i*d+n*c*d)*R,e[3]=(f*c*r-a*h*r-f*i*l+n*h*l+a*i*p-n*c*p)*R,e[4]=x*R,e[5]=(u*m*r-g*h*r+g*i*p-t*m*p-u*i*d+t*h*d)*R,e[6]=(g*c*r-s*m*r-g*i*l+t*m*l+s*i*d-t*c*d)*R,e[7]=(s*h*r-u*c*r+u*i*l-t*h*l-s*i*p+t*c*p)*R,e[8]=v*R,e[9]=(g*f*r-u*_*r-g*n*p+t*_*p+u*n*d-t*f*d)*R,e[10]=(s*_*r-g*a*r+g*n*l-t*_*l-s*n*d+t*a*d)*R,e[11]=(u*a*r-s*f*r-u*n*l+t*f*l+s*n*p-t*a*p)*R,e[12]=y*R,e[13]=(u*_*i-g*f*i+g*n*h-t*_*h-u*n*m+t*f*m)*R,e[14]=(g*a*i-s*_*i-g*n*c+t*_*c+s*n*m-t*a*m)*R,e[15]=(s*f*i-u*a*i+u*n*c-t*f*c-s*n*h+t*a*h)*R,this}scale(e){const t=this.elements,n=e.x,i=e.y,r=e.z;return t[0]*=n,t[4]*=i,t[8]*=r,t[1]*=n,t[5]*=i,t[9]*=r,t[2]*=n,t[6]*=i,t[10]*=r,t[3]*=n,t[7]*=i,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),r=1-n,s=e.x,a=e.y,c=e.z,l=r*s,u=r*a;return this.set(l*s+n,l*a-i*c,l*c+i*a,0,l*a+i*c,u*a+n,u*c-i*s,0,l*c-i*a,u*c+i*s,r*c*c+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,r,s){return this.set(1,n,r,0,e,1,s,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,r=t._x,s=t._y,a=t._z,c=t._w,l=r+r,u=s+s,f=a+a,h=r*l,p=r*u,g=r*f,_=s*u,m=s*f,d=a*f,w=c*l,x=c*u,v=c*f,y=n.x,C=n.y,R=n.z;return i[0]=(1-(_+d))*y,i[1]=(p+v)*y,i[2]=(g-x)*y,i[3]=0,i[4]=(p-v)*C,i[5]=(1-(h+d))*C,i[6]=(m+w)*C,i[7]=0,i[8]=(g+x)*R,i[9]=(m-w)*R,i[10]=(1-(h+_))*R,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let r=q1.set(i[0],i[1],i[2]).length();const s=q1.set(i[4],i[5],i[6]).length(),a=q1.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),e.x=i[12],e.y=i[13],e.z=i[14],Nt.copy(this);const l=1/r,u=1/s,f=1/a;return Nt.elements[0]*=l,Nt.elements[1]*=l,Nt.elements[2]*=l,Nt.elements[4]*=u,Nt.elements[5]*=u,Nt.elements[6]*=u,Nt.elements[8]*=f,Nt.elements[9]*=f,Nt.elements[10]*=f,t.setFromRotationMatrix(Nt),n.x=r,n.y=s,n.z=a,this}makePerspective(e,t,n,i,r,s){const a=this.elements,c=2*r/(t-e),l=2*r/(n-i),u=(t+e)/(t-e),f=(n+i)/(n-i),h=-(s+r)/(s-r),p=-2*s*r/(s-r);return a[0]=c,a[4]=0,a[8]=u,a[12]=0,a[1]=0,a[5]=l,a[9]=f,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=p,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(e,t,n,i,r,s){const a=this.elements,c=1/(t-e),l=1/(n-i),u=1/(s-r),f=(t+e)*c,h=(n+i)*l,p=(s+r)*u;return a[0]=2*c,a[4]=0,a[8]=0,a[12]=-f,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-h,a[2]=0,a[6]=0,a[10]=-2*u,a[14]=-p,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const q1=new L,Nt=new et,e7=new L(0,0,0),t7=new L(1,1,1),m1=new L,Y0=new L,Et=new L,zn=new et,Bn=new N1;class A3{constructor(e=0,t=0,n=0,i=A3.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,r=i[0],s=i[4],a=i[8],c=i[1],l=i[5],u=i[9],f=i[2],h=i[6],p=i[10];switch(t){case"XYZ":this._y=Math.asin(st(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-u,p),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(h,l),this._z=0);break;case"YXZ":this._x=Math.asin(-st(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(a,p),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-f,r),this._z=0);break;case"ZXY":this._x=Math.asin(st(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-f,p),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(c,r));break;case"ZYX":this._y=Math.asin(-st(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(h,p),this._z=Math.atan2(c,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(st(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-f,r)):(this._x=0,this._y=Math.atan2(a,p));break;case"XZY":this._z=Math.asin(-st(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(h,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-u,p),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return zn.makeRotationFromQuaternion(e),this.setFromRotationMatrix(zn,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Bn.setFromEuler(this),this.setFromQuaternion(Bn,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}A3.DEFAULT_ORDER="XYZ";class V2{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let n7=0;const Hn=new L,X1=new N1,i1=new et,j0=new L,M0=new L,i7=new L,r7=new N1,Vn=new L(1,0,0),Gn=new L(0,1,0),kn=new L(0,0,1),o7={type:"added"},Wn={type:"removed"};class Mt extends F1{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:n7++}),this.uuid=m0(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Mt.DEFAULT_UP.clone();const e=new L,t=new A3,n=new N1,i=new L(1,1,1);function r(){n.setFromEuler(t,!1)}function s(){t.setFromQuaternion(n,void 0,!1)}t._onChange(r),n._onChange(s),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new et},normalMatrix:{value:new He}}),this.matrix=new et,this.matrixWorld=new et,this.matrixAutoUpdate=Mt.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=Mt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new V2,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return X1.setFromAxisAngle(e,t),this.quaternion.multiply(X1),this}rotateOnWorldAxis(e,t){return X1.setFromAxisAngle(e,t),this.quaternion.premultiply(X1),this}rotateX(e){return this.rotateOnAxis(Vn,e)}rotateY(e){return this.rotateOnAxis(Gn,e)}rotateZ(e){return this.rotateOnAxis(kn,e)}translateOnAxis(e,t){return Hn.copy(e).applyQuaternion(this.quaternion),this.position.add(Hn.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Vn,e)}translateY(e){return this.translateOnAxis(Gn,e)}translateZ(e){return this.translateOnAxis(kn,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(i1.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?j0.copy(e):j0.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),M0.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?i1.lookAt(M0,j0,this.up):i1.lookAt(j0,M0,this.up),this.quaternion.setFromRotationMatrix(i1),i&&(i1.extractRotation(i.matrixWorld),X1.setFromRotationMatrix(i1),this.quaternion.premultiply(X1.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(o7)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Wn)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(Wn)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),i1.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),i1.multiply(e.parent.matrixWorld)),e.applyMatrix4(i1),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const s=this.children[n].getObjectByProperty(e,t);if(s!==void 0)return s}}getObjectsByProperty(e,t){let n=[];this[e]===t&&n.push(this);for(let i=0,r=this.children.length;i<r;i++){const s=this.children[i].getObjectsByProperty(e,t);s.length>0&&(n=n.concat(s))}return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(M0,e,i7),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(M0,r7,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++){const r=t[n];(r.matrixWorldAutoUpdate===!0||e===!0)&&r.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.matrixWorldAutoUpdate===!0&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let r=0,s=i.length;r<s;r++){const a=i[r];a.matrixWorldAutoUpdate===!0&&a.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON()));function r(a,c){return a[c.uuid]===void 0&&(a[c.uuid]=c.toJSON(e)),c.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const c=a.shapes;if(Array.isArray(c))for(let l=0,u=c.length;l<u;l++){const f=c[l];r(e.shapes,f)}else r(e.shapes,c)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let c=0,l=this.material.length;c<l;c++)a.push(r(e.materials,this.material[c]));i.material=a}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const c=this.animations[a];i.animations.push(r(e.animations,c))}}if(t){const a=s(e.geometries),c=s(e.materials),l=s(e.textures),u=s(e.images),f=s(e.shapes),h=s(e.skeletons),p=s(e.animations),g=s(e.nodes);a.length>0&&(n.geometries=a),c.length>0&&(n.materials=c),l.length>0&&(n.textures=l),u.length>0&&(n.images=u),f.length>0&&(n.shapes=f),h.length>0&&(n.skeletons=h),p.length>0&&(n.animations=p),g.length>0&&(n.nodes=g)}return n.object=i,n;function s(a){const c=[];for(const l in a){const u=a[l];delete u.metadata,c.push(u)}return c}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}Mt.DEFAULT_UP=new L(0,1,0);Mt.DEFAULT_MATRIX_AUTO_UPDATE=!0;Mt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ot=new L,r1=new L,K3=new L,o1=new L,Y1=new L,j1=new L,qn=new L,Q3=new L,e2=new L,t2=new L;let Z0=!1;class At{constructor(e=new L,t=new L,n=new L){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Ot.subVectors(e,t),i.cross(Ot);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(e,t,n,i,r){Ot.subVectors(i,t),r1.subVectors(n,t),K3.subVectors(e,t);const s=Ot.dot(Ot),a=Ot.dot(r1),c=Ot.dot(K3),l=r1.dot(r1),u=r1.dot(K3),f=s*l-a*a;if(f===0)return r.set(-2,-1,-1);const h=1/f,p=(l*c-a*u)*h,g=(s*u-a*c)*h;return r.set(1-p-g,g,p)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,o1),o1.x>=0&&o1.y>=0&&o1.x+o1.y<=1}static getUV(e,t,n,i,r,s,a,c){return Z0===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Z0=!0),this.getInterpolation(e,t,n,i,r,s,a,c)}static getInterpolation(e,t,n,i,r,s,a,c){return this.getBarycoord(e,t,n,i,o1),c.setScalar(0),c.addScaledVector(r,o1.x),c.addScaledVector(s,o1.y),c.addScaledVector(a,o1.z),c}static isFrontFacing(e,t,n,i){return Ot.subVectors(n,t),r1.subVectors(e,t),Ot.cross(r1).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Ot.subVectors(this.c,this.b),r1.subVectors(this.a,this.b),Ot.cross(r1).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return At.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return At.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,r){return Z0===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Z0=!0),At.getInterpolation(e,this.a,this.b,this.c,t,n,i,r)}getInterpolation(e,t,n,i,r){return At.getInterpolation(e,this.a,this.b,this.c,t,n,i,r)}containsPoint(e){return At.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return At.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,r=this.c;let s,a;Y1.subVectors(i,n),j1.subVectors(r,n),Q3.subVectors(e,n);const c=Y1.dot(Q3),l=j1.dot(Q3);if(c<=0&&l<=0)return t.copy(n);e2.subVectors(e,i);const u=Y1.dot(e2),f=j1.dot(e2);if(u>=0&&f<=u)return t.copy(i);const h=c*f-u*l;if(h<=0&&c>=0&&u<=0)return s=c/(c-u),t.copy(n).addScaledVector(Y1,s);t2.subVectors(e,r);const p=Y1.dot(t2),g=j1.dot(t2);if(g>=0&&p<=g)return t.copy(r);const _=p*l-c*g;if(_<=0&&l>=0&&g<=0)return a=l/(l-g),t.copy(n).addScaledVector(j1,a);const m=u*g-p*f;if(m<=0&&f-u>=0&&p-g>=0)return qn.subVectors(r,i),a=(f-u)/(f-u+(p-g)),t.copy(i).addScaledVector(qn,a);const d=1/(m+_+h);return s=_*d,a=h*d,t.copy(n).addScaledVector(Y1,s).addScaledVector(j1,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let a7=0;class F0 extends F1{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:a7++}),this.uuid=m0(),this.name="",this.type="Material",this.blending=a0,this.side=v1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=K4,this.blendDst=Q4,this.blendEquation=n0,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=E2,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=G6,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=V3,this.stencilZFail=V3,this.stencilZPass=V3,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];if(i===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==a0&&(n.blending=this.blending),this.side!==v1&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(n.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.forceSinglePass===!0&&(n.forceSinglePass=this.forceSinglePass),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=this.flatShading),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(r){const s=[];for(const a in r){const c=r[a];delete c.metadata,s.push(c)}return s}if(t){const r=i(e.textures),s=i(e.images);r.length>0&&(n.textures=r),s.length>0&&(n.images=s)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let r=0;r!==i;++r)n[r]=t[r].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}const l5={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Ft={h:0,s:0,l:0},$0={h:0,s:0,l:0};function n2(o,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?o+(e-o)*6*t:t<1/2?e:t<2/3?o+(e-o)*6*(2/3-t):o}class We{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=qt){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,wt.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=wt.workingColorSpace){return this.r=e,this.g=t,this.b=n,wt.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=wt.workingColorSpace){if(e=k6(e,1),t=st(t,0,1),n=st(n,0,1),t===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+t):n+t-n*t,s=2*n-r;this.r=n2(s,r,e+1/3),this.g=n2(s,r,e),this.b=n2(s,r,e-1/3)}return wt.toWorkingColorSpace(this,i),this}setStyle(e,t=qt){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const s=i[1],a=i[2];switch(s){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,wt.toWorkingColorSpace(this,t),n(r[4]),this;if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,wt.toWorkingColorSpace(this,t),n(r[4]),this;break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){const c=parseFloat(r[1])/360,l=parseFloat(r[2])/100,u=parseFloat(r[3])/100;return n(r[4]),this.setHSL(c,l,u,t)}break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=i[1],s=r.length;if(s===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t);if(s===6)return this.setHex(parseInt(r,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=qt){const n=l5[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=l0(e.r),this.g=l0(e.g),this.b=l0(e.b),this}copyLinearToSRGB(e){return this.r=W3(e.r),this.g=W3(e.g),this.b=W3(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=qt){return wt.fromWorkingColorSpace(dt.copy(this),e),st(dt.r*255,0,255)<<16^st(dt.g*255,0,255)<<8^st(dt.b*255,0,255)<<0}getHexString(e=qt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=wt.workingColorSpace){wt.fromWorkingColorSpace(dt.copy(this),t);const n=dt.r,i=dt.g,r=dt.b,s=Math.max(n,i,r),a=Math.min(n,i,r);let c,l;const u=(a+s)/2;if(a===s)c=0,l=0;else{const f=s-a;switch(l=u<=.5?f/(s+a):f/(2-s-a),s){case n:c=(i-r)/f+(i<r?6:0);break;case i:c=(r-n)/f+2;break;case r:c=(n-i)/f+4;break}c/=6}return e.h=c,e.s=l,e.l=u,e}getRGB(e,t=wt.workingColorSpace){return wt.fromWorkingColorSpace(dt.copy(this),t),e.r=dt.r,e.g=dt.g,e.b=dt.b,e}getStyle(e=qt){wt.fromWorkingColorSpace(dt.copy(this),e);const t=dt.r,n=dt.g,i=dt.b;return e!==qt?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${t*255|0},${n*255|0},${i*255|0})`}offsetHSL(e,t,n){return this.getHSL(Ft),Ft.h+=e,Ft.s+=t,Ft.l+=n,this.setHSL(Ft.h,Ft.s,Ft.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(Ft),e.getHSL($0);const n=G3(Ft.h,$0.h,t),i=G3(Ft.s,$0.s,t),r=G3(Ft.l,$0.l,t);return this.setHSL(n,i,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,r=e.elements;return this.r=r[0]*t+r[3]*n+r[6]*i,this.g=r[1]*t+r[4]*n+r[7]*i,this.b=r[2]*t+r[5]*n+r[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const dt=new We;We.NAMES=l5;class Kt extends F0{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new We(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=e5,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Qe=new L,J0=new he;class xt{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=Un,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)J0.fromBufferAttribute(this,t),J0.applyMatrix3(e),this.setXY(t,J0.x,J0.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Qe.fromBufferAttribute(this,t),Qe.applyMatrix3(e),this.setXYZ(t,Qe.x,Qe.y,Qe.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Qe.fromBufferAttribute(this,t),Qe.applyMatrix4(e),this.setXYZ(t,Qe.x,Qe.y,Qe.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Qe.fromBufferAttribute(this,t),Qe.applyNormalMatrix(e),this.setXYZ(t,Qe.x,Qe.y,Qe.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Qe.fromBufferAttribute(this,t),Qe.transformDirection(e),this.setXYZ(t,Qe.x,Qe.y,Qe.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=G0(t,this.array)),t}setX(e,t){return this.normalized&&(t=St(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=G0(t,this.array)),t}setY(e,t){return this.normalized&&(t=St(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=G0(t,this.array)),t}setZ(e,t){return this.normalized&&(t=St(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=G0(t,this.array)),t}setW(e,t){return this.normalized&&(t=St(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=St(t,this.array),n=St(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=St(t,this.array),n=St(n,this.array),i=St(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e*=this.itemSize,this.normalized&&(t=St(t,this.array),n=St(n,this.array),i=St(i,this.array),r=St(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Un&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class c5 extends xt{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class u5 extends xt{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Je extends xt{constructor(e,t,n){super(new Float32Array(e),t,n)}}let s7=0;const Pt=new et,i2=new Mt,Z1=new L,Tt=new O0,y0=new O0,rt=new L;class lt extends F1{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:s7++}),this.uuid=m0(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(r5(e)?u5:c5)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new He().getNormalMatrix(e);n.applyNormalMatrix(r),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Pt.makeRotationFromQuaternion(e),this.applyMatrix4(Pt),this}rotateX(e){return Pt.makeRotationX(e),this.applyMatrix4(Pt),this}rotateY(e){return Pt.makeRotationY(e),this.applyMatrix4(Pt),this}rotateZ(e){return Pt.makeRotationZ(e),this.applyMatrix4(Pt),this}translate(e,t,n){return Pt.makeTranslation(e,t,n),this.applyMatrix4(Pt),this}scale(e,t,n){return Pt.makeScale(e,t,n),this.applyMatrix4(Pt),this}lookAt(e){return i2.lookAt(e),i2.updateMatrix(),this.applyMatrix4(i2.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Z1).negate(),this.translate(Z1.x,Z1.y,Z1.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const r=e[n];t.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new Je(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new O0);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new L(-1/0,-1/0,-1/0),new L(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const r=t[n];Tt.setFromBufferAttribute(r),this.morphTargetsRelative?(rt.addVectors(this.boundingBox.min,Tt.min),this.boundingBox.expandByPoint(rt),rt.addVectors(this.boundingBox.max,Tt.max),this.boundingBox.expandByPoint(rt)):(this.boundingBox.expandByPoint(Tt.min),this.boundingBox.expandByPoint(Tt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new T3);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new L,1/0);return}if(e){const n=this.boundingSphere.center;if(Tt.setFromBufferAttribute(e),t)for(let r=0,s=t.length;r<s;r++){const a=t[r];y0.setFromBufferAttribute(a),this.morphTargetsRelative?(rt.addVectors(Tt.min,y0.min),Tt.expandByPoint(rt),rt.addVectors(Tt.max,y0.max),Tt.expandByPoint(rt)):(Tt.expandByPoint(y0.min),Tt.expandByPoint(y0.max))}Tt.getCenter(n);let i=0;for(let r=0,s=e.count;r<s;r++)rt.fromBufferAttribute(e,r),i=Math.max(i,n.distanceToSquared(rt));if(t)for(let r=0,s=t.length;r<s;r++){const a=t[r],c=this.morphTargetsRelative;for(let l=0,u=a.count;l<u;l++)rt.fromBufferAttribute(a,l),c&&(Z1.fromBufferAttribute(e,l),rt.add(Z1)),i=Math.max(i,n.distanceToSquared(rt))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array,i=t.position.array,r=t.normal.array,s=t.uv.array,a=i.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new xt(new Float32Array(4*a),4));const c=this.getAttribute("tangent").array,l=[],u=[];for(let T=0;T<a;T++)l[T]=new L,u[T]=new L;const f=new L,h=new L,p=new L,g=new he,_=new he,m=new he,d=new L,w=new L;function x(T,W,Z){f.fromArray(i,T*3),h.fromArray(i,W*3),p.fromArray(i,Z*3),g.fromArray(s,T*2),_.fromArray(s,W*2),m.fromArray(s,Z*2),h.sub(f),p.sub(f),_.sub(g),m.sub(g);const I=1/(_.x*m.y-m.x*_.y);!isFinite(I)||(d.copy(h).multiplyScalar(m.y).addScaledVector(p,-_.y).multiplyScalar(I),w.copy(p).multiplyScalar(_.x).addScaledVector(h,-m.x).multiplyScalar(I),l[T].add(d),l[W].add(d),l[Z].add(d),u[T].add(w),u[W].add(w),u[Z].add(w))}let v=this.groups;v.length===0&&(v=[{start:0,count:n.length}]);for(let T=0,W=v.length;T<W;++T){const Z=v[T],I=Z.start,N=Z.count;for(let H=I,J=I+N;H<J;H+=3)x(n[H+0],n[H+1],n[H+2])}const y=new L,C=new L,R=new L,D=new L;function M(T){R.fromArray(r,T*3),D.copy(R);const W=l[T];y.copy(W),y.sub(R.multiplyScalar(R.dot(W))).normalize(),C.crossVectors(D,W);const I=C.dot(u[T])<0?-1:1;c[T*4]=y.x,c[T*4+1]=y.y,c[T*4+2]=y.z,c[T*4+3]=I}for(let T=0,W=v.length;T<W;++T){const Z=v[T],I=Z.start,N=Z.count;for(let H=I,J=I+N;H<J;H+=3)M(n[H+0]),M(n[H+1]),M(n[H+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new xt(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let h=0,p=n.count;h<p;h++)n.setXYZ(h,0,0,0);const i=new L,r=new L,s=new L,a=new L,c=new L,l=new L,u=new L,f=new L;if(e)for(let h=0,p=e.count;h<p;h+=3){const g=e.getX(h+0),_=e.getX(h+1),m=e.getX(h+2);i.fromBufferAttribute(t,g),r.fromBufferAttribute(t,_),s.fromBufferAttribute(t,m),u.subVectors(s,r),f.subVectors(i,r),u.cross(f),a.fromBufferAttribute(n,g),c.fromBufferAttribute(n,_),l.fromBufferAttribute(n,m),a.add(u),c.add(u),l.add(u),n.setXYZ(g,a.x,a.y,a.z),n.setXYZ(_,c.x,c.y,c.z),n.setXYZ(m,l.x,l.y,l.z)}else for(let h=0,p=t.count;h<p;h+=3)i.fromBufferAttribute(t,h+0),r.fromBufferAttribute(t,h+1),s.fromBufferAttribute(t,h+2),u.subVectors(s,r),f.subVectors(i,r),u.cross(f),n.setXYZ(h+0,u.x,u.y,u.z),n.setXYZ(h+1,u.x,u.y,u.z),n.setXYZ(h+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."),this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)rt.fromBufferAttribute(e,t),rt.normalize(),e.setXYZ(t,rt.x,rt.y,rt.z)}toNonIndexed(){function e(a,c){const l=a.array,u=a.itemSize,f=a.normalized,h=new l.constructor(c.length*u);let p=0,g=0;for(let _=0,m=c.length;_<m;_++){a.isInterleavedBufferAttribute?p=c[_]*a.data.stride+a.offset:p=c[_]*u;for(let d=0;d<u;d++)h[g++]=l[p++]}return new xt(h,u,f)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new lt,n=this.index.array,i=this.attributes;for(const a in i){const c=i[a],l=e(c,n);t.setAttribute(a,l)}const r=this.morphAttributes;for(const a in r){const c=[],l=r[a];for(let u=0,f=l.length;u<f;u++){const h=l[u],p=e(h,n);c.push(p)}t.morphAttributes[a]=c}t.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let a=0,c=s.length;a<c;a++){const l=s[a];t.addGroup(l.start,l.count,l.materialIndex)}return t}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const c=this.parameters;for(const l in c)c[l]!==void 0&&(e[l]=c[l]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const c in n){const l=n[c];e.data.attributes[c]=l.toJSON(e.data)}const i={};let r=!1;for(const c in this.morphAttributes){const l=this.morphAttributes[c],u=[];for(let f=0,h=l.length;f<h;f++){const p=l[f];u.push(p.toJSON(e.data))}u.length>0&&(i[c]=u,r=!0)}r&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const l in i){const u=i[l];this.setAttribute(l,u.clone(t))}const r=e.morphAttributes;for(const l in r){const u=[],f=r[l];for(let h=0,p=f.length;h<p;h++)u.push(f[h].clone(t));this.morphAttributes[l]=u}this.morphTargetsRelative=e.morphTargetsRelative;const s=e.groups;for(let l=0,u=s.length;l<u;l++){const f=s[l];this.addGroup(f.start,f.count,f.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const c=e.boundingSphere;return c!==null&&(this.boundingSphere=c.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Xn=new et,Wt=new H2,K0=new T3,Yn=new L,$1=new L,J1=new L,K1=new L,r2=new L,Q0=new L,e3=new he,t3=new he,n3=new he,jn=new L,Zn=new L,$n=new L,i3=new L,r3=new L;class ut extends Mt{constructor(e=new lt,t=new Kt){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const a=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,s=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const a=this.morphTargetInfluences;if(r&&a){Q0.set(0,0,0);for(let c=0,l=r.length;c<l;c++){const u=a[c],f=r[c];u!==0&&(r2.fromBufferAttribute(f,e),s?Q0.addScaledVector(r2,u):Q0.addScaledVector(r2.sub(t),u))}t.add(Q0)}return this.isSkinnedMesh&&this.applyBoneTransform(e,t),t}raycast(e,t){const n=this.geometry,i=this.material,r=this.matrixWorld;if(i===void 0||(n.boundingSphere===null&&n.computeBoundingSphere(),K0.copy(n.boundingSphere),K0.applyMatrix4(r),Wt.copy(e.ray).recast(e.near),K0.containsPoint(Wt.origin)===!1&&(Wt.intersectSphere(K0,Yn)===null||Wt.origin.distanceToSquared(Yn)>(e.far-e.near)**2))||(Xn.copy(r).invert(),Wt.copy(e.ray).applyMatrix4(Xn),n.boundingBox!==null&&Wt.intersectsBox(n.boundingBox)===!1))return;let s;const a=n.index,c=n.attributes.position,l=n.attributes.uv,u=n.attributes.uv2,f=n.attributes.normal,h=n.groups,p=n.drawRange;if(a!==null)if(Array.isArray(i))for(let g=0,_=h.length;g<_;g++){const m=h[g],d=i[m.materialIndex],w=Math.max(m.start,p.start),x=Math.min(a.count,Math.min(m.start+m.count,p.start+p.count));for(let v=w,y=x;v<y;v+=3){const C=a.getX(v),R=a.getX(v+1),D=a.getX(v+2);s=o3(this,d,e,Wt,l,u,f,C,R,D),s&&(s.faceIndex=Math.floor(v/3),s.face.materialIndex=m.materialIndex,t.push(s))}}else{const g=Math.max(0,p.start),_=Math.min(a.count,p.start+p.count);for(let m=g,d=_;m<d;m+=3){const w=a.getX(m),x=a.getX(m+1),v=a.getX(m+2);s=o3(this,i,e,Wt,l,u,f,w,x,v),s&&(s.faceIndex=Math.floor(m/3),t.push(s))}}else if(c!==void 0)if(Array.isArray(i))for(let g=0,_=h.length;g<_;g++){const m=h[g],d=i[m.materialIndex],w=Math.max(m.start,p.start),x=Math.min(c.count,Math.min(m.start+m.count,p.start+p.count));for(let v=w,y=x;v<y;v+=3){const C=v,R=v+1,D=v+2;s=o3(this,d,e,Wt,l,u,f,C,R,D),s&&(s.faceIndex=Math.floor(v/3),s.face.materialIndex=m.materialIndex,t.push(s))}}else{const g=Math.max(0,p.start),_=Math.min(c.count,p.start+p.count);for(let m=g,d=_;m<d;m+=3){const w=m,x=m+1,v=m+2;s=o3(this,i,e,Wt,l,u,f,w,x,v),s&&(s.faceIndex=Math.floor(m/3),t.push(s))}}}}function l7(o,e,t,n,i,r,s,a){let c;if(e.side===bt?c=n.intersectTriangle(s,r,i,!0,a):c=n.intersectTriangle(i,r,s,e.side===v1,a),c===null)return null;r3.copy(a),r3.applyMatrix4(o.matrixWorld);const l=t.ray.origin.distanceTo(r3);return l<t.near||l>t.far?null:{distance:l,point:r3.clone(),object:o}}function o3(o,e,t,n,i,r,s,a,c,l){o.getVertexPosition(a,$1),o.getVertexPosition(c,J1),o.getVertexPosition(l,K1);const u=l7(o,e,t,n,$1,J1,K1,i3);if(u){i&&(e3.fromBufferAttribute(i,a),t3.fromBufferAttribute(i,c),n3.fromBufferAttribute(i,l),u.uv=At.getInterpolation(i3,$1,J1,K1,e3,t3,n3,new he)),r&&(e3.fromBufferAttribute(r,a),t3.fromBufferAttribute(r,c),n3.fromBufferAttribute(r,l),u.uv2=At.getInterpolation(i3,$1,J1,K1,e3,t3,n3,new he)),s&&(jn.fromBufferAttribute(s,a),Zn.fromBufferAttribute(s,c),$n.fromBufferAttribute(s,l),u.normal=At.getInterpolation(i3,$1,J1,K1,jn,Zn,$n,new L),u.normal.dot(n.direction)>0&&u.normal.multiplyScalar(-1));const f={a,b:c,c:l,normal:new L,materialIndex:0};At.getNormal($1,J1,K1,f.normal),u.face=f}return u}class g0 extends lt{constructor(e=1,t=1,n=1,i=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i),r=Math.floor(r),s=Math.floor(s);const c=[],l=[],u=[],f=[];let h=0,p=0;g("z","y","x",-1,-1,n,t,e,s,r,0),g("z","y","x",1,-1,n,t,-e,s,r,1),g("x","z","y",1,1,e,n,t,i,s,2),g("x","z","y",1,-1,e,n,-t,i,s,3),g("x","y","z",1,-1,e,t,n,i,r,4),g("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(c),this.setAttribute("position",new Je(l,3)),this.setAttribute("normal",new Je(u,3)),this.setAttribute("uv",new Je(f,2));function g(_,m,d,w,x,v,y,C,R,D,M){const T=v/R,W=y/D,Z=v/2,I=y/2,N=C/2,H=R+1,J=D+1;let ee=0,j=0;const oe=new L;for(let te=0;te<J;te++){const Me=te*W-I;for(let ae=0;ae<H;ae++){const V=ae*T-Z;oe[_]=V*w,oe[m]=Me*x,oe[d]=N,l.push(oe.x,oe.y,oe.z),oe[_]=0,oe[m]=0,oe[d]=C>0?1:-1,u.push(oe.x,oe.y,oe.z),f.push(ae/R),f.push(1-te/D),ee+=1}}for(let te=0;te<D;te++)for(let Me=0;Me<R;Me++){const ae=h+Me+H*te,V=h+Me+H*(te+1),$=h+(Me+1)+H*(te+1),fe=h+(Me+1)+H*te;c.push(ae,V,fe),c.push(V,$,fe),j+=6}a.addGroup(p,j,M),p+=j,h+=ee}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new g0(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function p0(o){const e={};for(const t in o){e[t]={};for(const n in o[t]){const i=o[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function gt(o){const e={};for(let t=0;t<o.length;t++){const n=p0(o[t]);for(const i in n)e[i]=n[i]}return e}function c7(o){const e=[];for(let t=0;t<o.length;t++)e.push(o[t].clone());return e}function h5(o){return o.getRenderTarget()===null&&o.outputEncoding===Xe?qt:D0}const u7={clone:p0,merge:gt};var h7=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,f7=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class x1 extends F0{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=h7,this.fragmentShader=f7,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=p0(e.uniforms),this.uniformsGroups=c7(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const s=this.uniforms[i].value;s&&s.isTexture?t.uniforms[i]={type:"t",value:s.toJSON(e).uuid}:s&&s.isColor?t.uniforms[i]={type:"c",value:s.getHex()}:s&&s.isVector2?t.uniforms[i]={type:"v2",value:s.toArray()}:s&&s.isVector3?t.uniforms[i]={type:"v3",value:s.toArray()}:s&&s.isVector4?t.uniforms[i]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?t.uniforms[i]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?t.uniforms[i]={type:"m4",value:s.toArray()}:t.uniforms[i]={value:s}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class f5 extends Mt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new et,this.projectionMatrix=new et,this.projectionMatrixInverse=new et}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class Dt extends f5{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=R2*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(x3*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return R2*2*Math.atan(Math.tan(x3*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,r,s){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(x3*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,r=-.5*i;const s=this.view;if(this.view!==null&&this.view.enabled){const c=s.fullWidth,l=s.fullHeight;r+=s.offsetX*i/c,t-=s.offsetY*n/l,i*=s.width/c,n*=s.height/l}const a=this.filmOffset;a!==0&&(r+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Q1=-90,e0=1;class d7 extends Mt{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n;const i=new Dt(Q1,e0,e,t);i.layers=this.layers,i.up.set(0,1,0),i.lookAt(1,0,0),this.add(i);const r=new Dt(Q1,e0,e,t);r.layers=this.layers,r.up.set(0,1,0),r.lookAt(-1,0,0),this.add(r);const s=new Dt(Q1,e0,e,t);s.layers=this.layers,s.up.set(0,0,-1),s.lookAt(0,1,0),this.add(s);const a=new Dt(Q1,e0,e,t);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(0,-1,0),this.add(a);const c=new Dt(Q1,e0,e,t);c.layers=this.layers,c.up.set(0,1,0),c.lookAt(0,0,1),this.add(c);const l=new Dt(Q1,e0,e,t);l.layers=this.layers,l.up.set(0,1,0),l.lookAt(0,0,-1),this.add(l)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,s,a,c,l]=this.children,u=e.getRenderTarget(),f=e.toneMapping,h=e.xr.enabled;e.toneMapping=c1,e.xr.enabled=!1;const p=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,r),e.setRenderTarget(n,2),e.render(t,s),e.setRenderTarget(n,3),e.render(t,a),e.setRenderTarget(n,4),e.render(t,c),n.texture.generateMipmaps=p,e.setRenderTarget(n,5),e.render(t,l),e.setRenderTarget(u),e.toneMapping=f,e.xr.enabled=h,n.texture.needsPMREMUpdate=!0}}class d5 extends Ct{constructor(e,t,n,i,r,s,a,c,l,u){e=e!==void 0?e:[],t=t!==void 0?t:h0,super(e,t,n,i,r,s,a,c,l,u),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class p7 extends U1{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new d5(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Rt}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new g0(5,5,5),r=new x1({name:"CubemapFromEquirect",uniforms:p0(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:bt,blending:_1});r.uniforms.tEquirect.value=t;const s=new ut(i,r),a=t.minFilter;return t.minFilter===P0&&(t.minFilter=Rt),new d7(1,10,this).update(e,s),t.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(e,t,n,i){const r=e.getRenderTarget();for(let s=0;s<6;s++)e.setRenderTarget(this,s),e.clear(t,n,i);e.setRenderTarget(r)}}const o2=new L,m7=new L,g7=new He;class g1{constructor(e=new L(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=o2.subVectors(n,t).cross(m7.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(o2),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||g7.getNormalMatrix(e),i=this.coplanarPoint(o2).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const T1=new T3,a3=new L;class p5{constructor(e=new g1,t=new g1,n=new g1,i=new g1,r=new g1,s=new g1){this.planes=[e,t,n,i,r,s]}set(e,t,n,i,r,s){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(s),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],r=n[1],s=n[2],a=n[3],c=n[4],l=n[5],u=n[6],f=n[7],h=n[8],p=n[9],g=n[10],_=n[11],m=n[12],d=n[13],w=n[14],x=n[15];return t[0].setComponents(a-i,f-c,_-h,x-m).normalize(),t[1].setComponents(a+i,f+c,_+h,x+m).normalize(),t[2].setComponents(a+r,f+l,_+p,x+d).normalize(),t[3].setComponents(a-r,f-l,_-p,x-d).normalize(),t[4].setComponents(a-s,f-u,_-g,x-w).normalize(),t[5].setComponents(a+s,f+u,_+g,x+w).normalize(),this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),T1.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),T1.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(T1)}intersectsSprite(e){return T1.center.set(0,0,0),T1.radius=.7071067811865476,T1.applyMatrix4(e.matrixWorld),this.intersectsSphere(T1)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(a3.x=i.normal.x>0?e.max.x:e.min.x,a3.y=i.normal.y>0?e.max.y:e.min.y,a3.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(a3)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function m5(){let o=null,e=!1,t=null,n=null;function i(r,s){t(r,s),n=o.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=o.requestAnimationFrame(i),e=!0)},stop:function(){o.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){o=r}}}function _7(o,e){const t=e.isWebGL2,n=new WeakMap;function i(l,u){const f=l.array,h=l.usage,p=o.createBuffer();o.bindBuffer(u,p),o.bufferData(u,f,h),l.onUploadCallback();let g;if(f instanceof Float32Array)g=5126;else if(f instanceof Uint16Array)if(l.isFloat16BufferAttribute)if(t)g=5131;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else g=5123;else if(f instanceof Int16Array)g=5122;else if(f instanceof Uint32Array)g=5125;else if(f instanceof Int32Array)g=5124;else if(f instanceof Int8Array)g=5120;else if(f instanceof Uint8Array)g=5121;else if(f instanceof Uint8ClampedArray)g=5121;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+f);return{buffer:p,type:g,bytesPerElement:f.BYTES_PER_ELEMENT,version:l.version}}function r(l,u,f){const h=u.array,p=u.updateRange;o.bindBuffer(f,l),p.count===-1?o.bufferSubData(f,0,h):(t?o.bufferSubData(f,p.offset*h.BYTES_PER_ELEMENT,h,p.offset,p.count):o.bufferSubData(f,p.offset*h.BYTES_PER_ELEMENT,h.subarray(p.offset,p.offset+p.count)),p.count=-1),u.onUploadCallback()}function s(l){return l.isInterleavedBufferAttribute&&(l=l.data),n.get(l)}function a(l){l.isInterleavedBufferAttribute&&(l=l.data);const u=n.get(l);u&&(o.deleteBuffer(u.buffer),n.delete(l))}function c(l,u){if(l.isGLBufferAttribute){const h=n.get(l);(!h||h.version<l.version)&&n.set(l,{buffer:l.buffer,type:l.type,bytesPerElement:l.elementSize,version:l.version});return}l.isInterleavedBufferAttribute&&(l=l.data);const f=n.get(l);f===void 0?n.set(l,i(l,u)):f.version<l.version&&(r(f.buffer,l,u),f.version=l.version)}return{get:s,remove:a,update:c}}class G2 extends lt{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2,s=t/2,a=Math.floor(n),c=Math.floor(i),l=a+1,u=c+1,f=e/a,h=t/c,p=[],g=[],_=[],m=[];for(let d=0;d<u;d++){const w=d*h-s;for(let x=0;x<l;x++){const v=x*f-r;g.push(v,-w,0),_.push(0,0,1),m.push(x/a),m.push(1-d/c)}}for(let d=0;d<c;d++)for(let w=0;w<a;w++){const x=w+l*d,v=w+l*(d+1),y=w+1+l*(d+1),C=w+1+l*d;p.push(x,v,C),p.push(v,y,C)}this.setIndex(p),this.setAttribute("position",new Je(g,3)),this.setAttribute("normal",new Je(_,3)),this.setAttribute("uv",new Je(m,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new G2(e.width,e.height,e.widthSegments,e.heightSegments)}}var v7=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,x7=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,b7=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,M7=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,y7=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,S7=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,w7="vec3 transformed = vec3( position );",E7=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,T7=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,A7=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,C7=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,L7=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,P7=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,R7=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,D7=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,I7=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,U7=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,N7=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,O7=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,F7=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,z7=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,B7=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,H7=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,V7=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,G7=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,k7=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,W7="gl_FragColor = linearToOutputTexel( gl_FragColor );",q7=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,X7=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,Y7=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,j7=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Z7=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,$7=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,J7=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,K7=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Q7=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,e8=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,t8=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,n8=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,i8=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,r8=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,o8=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,a8=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,s8=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,l8=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,c8=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,u8=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,h8=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,f8=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif`,d8=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,p8=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,m8=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,g8=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,_8=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,v8=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,x8=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,b8=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,M8=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,y8=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,S8=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,w8=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,E8=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,T8=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,A8=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,C8=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,L8=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,P8=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,R8=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#ifdef USE_NORMALMAP_TANGENTSPACE
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 geometryNormal = normal;`,D8=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,I8=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,U8=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,N8=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,O8=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,F8=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,z8=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,B8=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,H8=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,V8=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,G8=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,k8=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,W8=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,q8=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,X8=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Y8=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,j8=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Z8=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,$8=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,J8=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,K8=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Q8=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,ei=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`,ti=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,ni=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,ii=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,ri=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,oi=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,ai=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,si=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`,li=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		
		vec2 lodFudge = pow( 1.95, lod ) / fullSize;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec2 fullSize = vec2( textureSize( sampler, 0 ) );
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), fullSize, floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), fullSize, ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,ci=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,ui=`#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_UV2
	attribute vec2 uv2;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,hi=`#ifdef USE_UV
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,fi=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const di=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,pi=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,mi=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,gi=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,_i=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,vi=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,xi=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,bi=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,Mi=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,yi=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Si=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,wi=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,Ei=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Ti=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,Ai=`#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,Ci=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Li=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Pi=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Ri=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,Di=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Ii=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,Ui=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,Ni=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Oi=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Fi=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,zi=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Bi=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Hi=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Vi=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,Gi=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,ki=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Wi=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,qi=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Xi=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Ne={alphamap_fragment:v7,alphamap_pars_fragment:x7,alphatest_fragment:b7,alphatest_pars_fragment:M7,aomap_fragment:y7,aomap_pars_fragment:S7,begin_vertex:w7,beginnormal_vertex:E7,bsdfs:T7,iridescence_fragment:A7,bumpmap_pars_fragment:C7,clipping_planes_fragment:L7,clipping_planes_pars_fragment:P7,clipping_planes_pars_vertex:R7,clipping_planes_vertex:D7,color_fragment:I7,color_pars_fragment:U7,color_pars_vertex:N7,color_vertex:O7,common:F7,cube_uv_reflection_fragment:z7,defaultnormal_vertex:B7,displacementmap_pars_vertex:H7,displacementmap_vertex:V7,emissivemap_fragment:G7,emissivemap_pars_fragment:k7,encodings_fragment:W7,encodings_pars_fragment:q7,envmap_fragment:X7,envmap_common_pars_fragment:Y7,envmap_pars_fragment:j7,envmap_pars_vertex:Z7,envmap_physical_pars_fragment:s8,envmap_vertex:$7,fog_vertex:J7,fog_pars_vertex:K7,fog_fragment:Q7,fog_pars_fragment:e8,gradientmap_pars_fragment:t8,lightmap_fragment:n8,lightmap_pars_fragment:i8,lights_lambert_fragment:r8,lights_lambert_pars_fragment:o8,lights_pars_begin:a8,lights_toon_fragment:l8,lights_toon_pars_fragment:c8,lights_phong_fragment:u8,lights_phong_pars_fragment:h8,lights_physical_fragment:f8,lights_physical_pars_fragment:d8,lights_fragment_begin:p8,lights_fragment_maps:m8,lights_fragment_end:g8,logdepthbuf_fragment:_8,logdepthbuf_pars_fragment:v8,logdepthbuf_pars_vertex:x8,logdepthbuf_vertex:b8,map_fragment:M8,map_pars_fragment:y8,map_particle_fragment:S8,map_particle_pars_fragment:w8,metalnessmap_fragment:E8,metalnessmap_pars_fragment:T8,morphcolor_vertex:A8,morphnormal_vertex:C8,morphtarget_pars_vertex:L8,morphtarget_vertex:P8,normal_fragment_begin:R8,normal_fragment_maps:D8,normal_pars_fragment:I8,normal_pars_vertex:U8,normal_vertex:N8,normalmap_pars_fragment:O8,clearcoat_normal_fragment_begin:F8,clearcoat_normal_fragment_maps:z8,clearcoat_pars_fragment:B8,iridescence_pars_fragment:H8,output_fragment:V8,packing:G8,premultiplied_alpha_fragment:k8,project_vertex:W8,dithering_fragment:q8,dithering_pars_fragment:X8,roughnessmap_fragment:Y8,roughnessmap_pars_fragment:j8,shadowmap_pars_fragment:Z8,shadowmap_pars_vertex:$8,shadowmap_vertex:J8,shadowmask_pars_fragment:K8,skinbase_vertex:Q8,skinning_pars_vertex:ei,skinning_vertex:ti,skinnormal_vertex:ni,specularmap_fragment:ii,specularmap_pars_fragment:ri,tonemapping_fragment:oi,tonemapping_pars_fragment:ai,transmission_fragment:si,transmission_pars_fragment:li,uv_pars_fragment:ci,uv_pars_vertex:ui,uv_vertex:hi,worldpos_vertex:fi,background_vert:di,background_frag:pi,backgroundCube_vert:mi,backgroundCube_frag:gi,cube_vert:_i,cube_frag:vi,depth_vert:xi,depth_frag:bi,distanceRGBA_vert:Mi,distanceRGBA_frag:yi,equirect_vert:Si,equirect_frag:wi,linedashed_vert:Ei,linedashed_frag:Ti,meshbasic_vert:Ai,meshbasic_frag:Ci,meshlambert_vert:Li,meshlambert_frag:Pi,meshmatcap_vert:Ri,meshmatcap_frag:Di,meshnormal_vert:Ii,meshnormal_frag:Ui,meshphong_vert:Ni,meshphong_frag:Oi,meshphysical_vert:Fi,meshphysical_frag:zi,meshtoon_vert:Bi,meshtoon_frag:Hi,points_vert:Vi,points_frag:Gi,shadow_vert:ki,shadow_frag:Wi,sprite_vert:qi,sprite_frag:Xi},ue={common:{diffuse:{value:new We(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new He},alphaMap:{value:null},alphaMapTransform:{value:new He},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new He}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new He}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new He}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new He},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new He},normalScale:{value:new he(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new He},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new He}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new He}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new He}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new We(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new We(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new He}},sprite:{diffuse:{value:new We(16777215)},opacity:{value:1},center:{value:new he(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new He},alphaMap:{value:null},alphaTest:{value:0}}},Jt={basic:{uniforms:gt([ue.common,ue.specularmap,ue.envmap,ue.aomap,ue.lightmap,ue.fog]),vertexShader:Ne.meshbasic_vert,fragmentShader:Ne.meshbasic_frag},lambert:{uniforms:gt([ue.common,ue.specularmap,ue.envmap,ue.aomap,ue.lightmap,ue.emissivemap,ue.bumpmap,ue.normalmap,ue.displacementmap,ue.fog,ue.lights,{emissive:{value:new We(0)}}]),vertexShader:Ne.meshlambert_vert,fragmentShader:Ne.meshlambert_frag},phong:{uniforms:gt([ue.common,ue.specularmap,ue.envmap,ue.aomap,ue.lightmap,ue.emissivemap,ue.bumpmap,ue.normalmap,ue.displacementmap,ue.fog,ue.lights,{emissive:{value:new We(0)},specular:{value:new We(1118481)},shininess:{value:30}}]),vertexShader:Ne.meshphong_vert,fragmentShader:Ne.meshphong_frag},standard:{uniforms:gt([ue.common,ue.envmap,ue.aomap,ue.lightmap,ue.emissivemap,ue.bumpmap,ue.normalmap,ue.displacementmap,ue.roughnessmap,ue.metalnessmap,ue.fog,ue.lights,{emissive:{value:new We(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ne.meshphysical_vert,fragmentShader:Ne.meshphysical_frag},toon:{uniforms:gt([ue.common,ue.aomap,ue.lightmap,ue.emissivemap,ue.bumpmap,ue.normalmap,ue.displacementmap,ue.gradientmap,ue.fog,ue.lights,{emissive:{value:new We(0)}}]),vertexShader:Ne.meshtoon_vert,fragmentShader:Ne.meshtoon_frag},matcap:{uniforms:gt([ue.common,ue.bumpmap,ue.normalmap,ue.displacementmap,ue.fog,{matcap:{value:null}}]),vertexShader:Ne.meshmatcap_vert,fragmentShader:Ne.meshmatcap_frag},points:{uniforms:gt([ue.points,ue.fog]),vertexShader:Ne.points_vert,fragmentShader:Ne.points_frag},dashed:{uniforms:gt([ue.common,ue.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ne.linedashed_vert,fragmentShader:Ne.linedashed_frag},depth:{uniforms:gt([ue.common,ue.displacementmap]),vertexShader:Ne.depth_vert,fragmentShader:Ne.depth_frag},normal:{uniforms:gt([ue.common,ue.bumpmap,ue.normalmap,ue.displacementmap,{opacity:{value:1}}]),vertexShader:Ne.meshnormal_vert,fragmentShader:Ne.meshnormal_frag},sprite:{uniforms:gt([ue.sprite,ue.fog]),vertexShader:Ne.sprite_vert,fragmentShader:Ne.sprite_frag},background:{uniforms:{uvTransform:{value:new He},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ne.background_vert,fragmentShader:Ne.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:Ne.backgroundCube_vert,fragmentShader:Ne.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ne.cube_vert,fragmentShader:Ne.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ne.equirect_vert,fragmentShader:Ne.equirect_frag},distanceRGBA:{uniforms:gt([ue.common,ue.displacementmap,{referencePosition:{value:new L},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ne.distanceRGBA_vert,fragmentShader:Ne.distanceRGBA_frag},shadow:{uniforms:gt([ue.lights,ue.fog,{color:{value:new We(0)},opacity:{value:1}}]),vertexShader:Ne.shadow_vert,fragmentShader:Ne.shadow_frag}};Jt.physical={uniforms:gt([Jt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new He},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new He},clearcoatNormalScale:{value:new he(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new He},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new He},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new He},sheen:{value:0},sheenColor:{value:new We(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new He},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new He},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new He},transmissionSamplerSize:{value:new he},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new He},attenuationDistance:{value:0},attenuationColor:{value:new We(0)},specularColor:{value:new We(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new He},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new He}}]),vertexShader:Ne.meshphysical_vert,fragmentShader:Ne.meshphysical_frag};const s3={r:0,b:0,g:0};function Yi(o,e,t,n,i,r,s){const a=new We(0);let c=r===!0?0:1,l,u,f=null,h=0,p=null;function g(m,d){let w=!1,x=d.isScene===!0?d.background:null;x&&x.isTexture&&(x=(d.backgroundBlurriness>0?t:e).get(x));const v=o.xr,y=v.getSession&&v.getSession();y&&y.environmentBlendMode==="additive"&&(x=null),x===null?_(a,c):x&&x.isColor&&(_(x,1),w=!0),(o.autoClear||w)&&o.clear(o.autoClearColor,o.autoClearDepth,o.autoClearStencil),x&&(x.isCubeTexture||x.mapping===E3)?(u===void 0&&(u=new ut(new g0(1,1,1),new x1({name:"BackgroundCubeMaterial",uniforms:p0(Jt.backgroundCube.uniforms),vertexShader:Jt.backgroundCube.vertexShader,fragmentShader:Jt.backgroundCube.fragmentShader,side:bt,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(C,R,D){this.matrixWorld.copyPosition(D.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(u)),u.material.uniforms.envMap.value=x,u.material.uniforms.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===!1?-1:1,u.material.uniforms.backgroundBlurriness.value=d.backgroundBlurriness,u.material.uniforms.backgroundIntensity.value=d.backgroundIntensity,u.material.toneMapped=x.encoding!==Xe,(f!==x||h!==x.version||p!==o.toneMapping)&&(u.material.needsUpdate=!0,f=x,h=x.version,p=o.toneMapping),u.layers.enableAll(),m.unshift(u,u.geometry,u.material,0,0,null)):x&&x.isTexture&&(l===void 0&&(l=new ut(new G2(2,2),new x1({name:"BackgroundMaterial",uniforms:p0(Jt.background.uniforms),vertexShader:Jt.background.vertexShader,fragmentShader:Jt.background.fragmentShader,side:v1,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(l)),l.material.uniforms.t2D.value=x,l.material.uniforms.backgroundIntensity.value=d.backgroundIntensity,l.material.toneMapped=x.encoding!==Xe,x.matrixAutoUpdate===!0&&x.updateMatrix(),l.material.uniforms.uvTransform.value.copy(x.matrix),(f!==x||h!==x.version||p!==o.toneMapping)&&(l.material.needsUpdate=!0,f=x,h=x.version,p=o.toneMapping),l.layers.enableAll(),m.unshift(l,l.geometry,l.material,0,0,null))}function _(m,d){m.getRGB(s3,h5(o)),n.buffers.color.setClear(s3.r,s3.g,s3.b,d,s)}return{getClearColor:function(){return a},setClearColor:function(m,d=1){a.set(m),c=d,_(a,c)},getClearAlpha:function(){return c},setClearAlpha:function(m){c=m,_(a,c)},render:g}}function ji(o,e,t,n){const i=o.getParameter(34921),r=n.isWebGL2?null:e.get("OES_vertex_array_object"),s=n.isWebGL2||r!==null,a={},c=m(null);let l=c,u=!1;function f(N,H,J,ee,j){let oe=!1;if(s){const te=_(ee,J,H);l!==te&&(l=te,p(l.object)),oe=d(N,ee,J,j),oe&&w(N,ee,J,j)}else{const te=H.wireframe===!0;(l.geometry!==ee.id||l.program!==J.id||l.wireframe!==te)&&(l.geometry=ee.id,l.program=J.id,l.wireframe=te,oe=!0)}j!==null&&t.update(j,34963),(oe||u)&&(u=!1,D(N,H,J,ee),j!==null&&o.bindBuffer(34963,t.get(j).buffer))}function h(){return n.isWebGL2?o.createVertexArray():r.createVertexArrayOES()}function p(N){return n.isWebGL2?o.bindVertexArray(N):r.bindVertexArrayOES(N)}function g(N){return n.isWebGL2?o.deleteVertexArray(N):r.deleteVertexArrayOES(N)}function _(N,H,J){const ee=J.wireframe===!0;let j=a[N.id];j===void 0&&(j={},a[N.id]=j);let oe=j[H.id];oe===void 0&&(oe={},j[H.id]=oe);let te=oe[ee];return te===void 0&&(te=m(h()),oe[ee]=te),te}function m(N){const H=[],J=[],ee=[];for(let j=0;j<i;j++)H[j]=0,J[j]=0,ee[j]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:H,enabledAttributes:J,attributeDivisors:ee,object:N,attributes:{},index:null}}function d(N,H,J,ee){const j=l.attributes,oe=H.attributes;let te=0;const Me=J.getAttributes();for(const ae in Me)if(Me[ae].location>=0){const $=j[ae];let fe=oe[ae];if(fe===void 0&&(ae==="instanceMatrix"&&N.instanceMatrix&&(fe=N.instanceMatrix),ae==="instanceColor"&&N.instanceColor&&(fe=N.instanceColor)),$===void 0||$.attribute!==fe||fe&&$.data!==fe.data)return!0;te++}return l.attributesNum!==te||l.index!==ee}function w(N,H,J,ee){const j={},oe=H.attributes;let te=0;const Me=J.getAttributes();for(const ae in Me)if(Me[ae].location>=0){let $=oe[ae];$===void 0&&(ae==="instanceMatrix"&&N.instanceMatrix&&($=N.instanceMatrix),ae==="instanceColor"&&N.instanceColor&&($=N.instanceColor));const fe={};fe.attribute=$,$&&$.data&&(fe.data=$.data),j[ae]=fe,te++}l.attributes=j,l.attributesNum=te,l.index=ee}function x(){const N=l.newAttributes;for(let H=0,J=N.length;H<J;H++)N[H]=0}function v(N){y(N,0)}function y(N,H){const J=l.newAttributes,ee=l.enabledAttributes,j=l.attributeDivisors;J[N]=1,ee[N]===0&&(o.enableVertexAttribArray(N),ee[N]=1),j[N]!==H&&((n.isWebGL2?o:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](N,H),j[N]=H)}function C(){const N=l.newAttributes,H=l.enabledAttributes;for(let J=0,ee=H.length;J<ee;J++)H[J]!==N[J]&&(o.disableVertexAttribArray(J),H[J]=0)}function R(N,H,J,ee,j,oe){n.isWebGL2===!0&&(J===5124||J===5125)?o.vertexAttribIPointer(N,H,J,j,oe):o.vertexAttribPointer(N,H,J,ee,j,oe)}function D(N,H,J,ee){if(n.isWebGL2===!1&&(N.isInstancedMesh||ee.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;x();const j=ee.attributes,oe=J.getAttributes(),te=H.defaultAttributeValues;for(const Me in oe){const ae=oe[Me];if(ae.location>=0){let V=j[Me];if(V===void 0&&(Me==="instanceMatrix"&&N.instanceMatrix&&(V=N.instanceMatrix),Me==="instanceColor"&&N.instanceColor&&(V=N.instanceColor)),V!==void 0){const $=V.normalized,fe=V.itemSize,pe=t.get(V);if(pe===void 0)continue;const F=pe.buffer,Le=pe.type,Ce=pe.bytesPerElement;if(V.isInterleavedBufferAttribute){const se=V.data,xe=se.stride,Q=V.offset;if(se.isInstancedInterleavedBuffer){for(let q=0;q<ae.locationSize;q++)y(ae.location+q,se.meshPerAttribute);N.isInstancedMesh!==!0&&ee._maxInstanceCount===void 0&&(ee._maxInstanceCount=se.meshPerAttribute*se.count)}else for(let q=0;q<ae.locationSize;q++)v(ae.location+q);o.bindBuffer(34962,F);for(let q=0;q<ae.locationSize;q++)R(ae.location+q,fe/ae.locationSize,Le,$,xe*Ce,(Q+fe/ae.locationSize*q)*Ce)}else{if(V.isInstancedBufferAttribute){for(let se=0;se<ae.locationSize;se++)y(ae.location+se,V.meshPerAttribute);N.isInstancedMesh!==!0&&ee._maxInstanceCount===void 0&&(ee._maxInstanceCount=V.meshPerAttribute*V.count)}else for(let se=0;se<ae.locationSize;se++)v(ae.location+se);o.bindBuffer(34962,F);for(let se=0;se<ae.locationSize;se++)R(ae.location+se,fe/ae.locationSize,Le,$,fe*Ce,fe/ae.locationSize*se*Ce)}}else if(te!==void 0){const $=te[Me];if($!==void 0)switch($.length){case 2:o.vertexAttrib2fv(ae.location,$);break;case 3:o.vertexAttrib3fv(ae.location,$);break;case 4:o.vertexAttrib4fv(ae.location,$);break;default:o.vertexAttrib1fv(ae.location,$)}}}}C()}function M(){Z();for(const N in a){const H=a[N];for(const J in H){const ee=H[J];for(const j in ee)g(ee[j].object),delete ee[j];delete H[J]}delete a[N]}}function T(N){if(a[N.id]===void 0)return;const H=a[N.id];for(const J in H){const ee=H[J];for(const j in ee)g(ee[j].object),delete ee[j];delete H[J]}delete a[N.id]}function W(N){for(const H in a){const J=a[H];if(J[N.id]===void 0)continue;const ee=J[N.id];for(const j in ee)g(ee[j].object),delete ee[j];delete J[N.id]}}function Z(){I(),u=!0,l!==c&&(l=c,p(l.object))}function I(){c.geometry=null,c.program=null,c.wireframe=!1}return{setup:f,reset:Z,resetDefaultState:I,dispose:M,releaseStatesOfGeometry:T,releaseStatesOfProgram:W,initAttributes:x,enableAttribute:v,disableUnusedAttributes:C}}function Zi(o,e,t,n){const i=n.isWebGL2;let r;function s(l){r=l}function a(l,u){o.drawArrays(r,l,u),t.update(u,r,1)}function c(l,u,f){if(f===0)return;let h,p;if(i)h=o,p="drawArraysInstanced";else if(h=e.get("ANGLE_instanced_arrays"),p="drawArraysInstancedANGLE",h===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}h[p](r,l,u,f),t.update(u,r,f)}this.setMode=s,this.render=a,this.renderInstances=c}function $i(o,e,t){let n;function i(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===!0){const R=e.get("EXT_texture_filter_anisotropic");n=o.getParameter(R.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function r(R){if(R==="highp"){if(o.getShaderPrecisionFormat(35633,36338).precision>0&&o.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";R="mediump"}return R==="mediump"&&o.getShaderPrecisionFormat(35633,36337).precision>0&&o.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s=typeof WebGL2RenderingContext<"u"&&o.constructor.name==="WebGL2RenderingContext";let a=t.precision!==void 0?t.precision:"highp";const c=r(a);c!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",c,"instead."),a=c);const l=s||e.has("WEBGL_draw_buffers"),u=t.logarithmicDepthBuffer===!0,f=o.getParameter(34930),h=o.getParameter(35660),p=o.getParameter(3379),g=o.getParameter(34076),_=o.getParameter(34921),m=o.getParameter(36347),d=o.getParameter(36348),w=o.getParameter(36349),x=h>0,v=s||e.has("OES_texture_float"),y=x&&v,C=s?o.getParameter(36183):0;return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:i,getMaxPrecision:r,precision:a,logarithmicDepthBuffer:u,maxTextures:f,maxVertexTextures:h,maxTextureSize:p,maxCubemapSize:g,maxAttributes:_,maxVertexUniforms:m,maxVaryings:d,maxFragmentUniforms:w,vertexTextures:x,floatFragmentTextures:v,floatVertexTextures:y,maxSamples:C}}function Ji(o){const e=this;let t=null,n=0,i=!1,r=!1;const s=new g1,a=new He,c={value:null,needsUpdate:!1};this.uniform=c,this.numPlanes=0,this.numIntersection=0,this.init=function(f,h){const p=f.length!==0||h||n!==0||i;return i=h,n=f.length,p},this.beginShadows=function(){r=!0,u(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(f,h){t=u(f,h,0)},this.setState=function(f,h,p){const g=f.clippingPlanes,_=f.clipIntersection,m=f.clipShadows,d=o.get(f);if(!i||g===null||g.length===0||r&&!m)r?u(null):l();else{const w=r?0:n,x=w*4;let v=d.clippingState||null;c.value=v,v=u(g,h,x,p);for(let y=0;y!==x;++y)v[y]=t[y];d.clippingState=v,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=w}};function l(){c.value!==t&&(c.value=t,c.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function u(f,h,p,g){const _=f!==null?f.length:0;let m=null;if(_!==0){if(m=c.value,g!==!0||m===null){const d=p+_*4,w=h.matrixWorldInverse;a.getNormalMatrix(w),(m===null||m.length<d)&&(m=new Float32Array(d));for(let x=0,v=p;x!==_;++x,v+=4)s.copy(f[x]).applyMatrix4(w,a),s.normal.toArray(m,v),m[v+3]=s.constant}c.value=m,c.needsUpdate=!0}return e.numPlanes=_,e.numIntersection=0,m}}function Ki(o){let e=new WeakMap;function t(s,a){return a===T2?s.mapping=h0:a===A2&&(s.mapping=f0),s}function n(s){if(s&&s.isTexture&&s.isRenderTargetTexture===!1){const a=s.mapping;if(a===T2||a===A2)if(e.has(s)){const c=e.get(s).texture;return t(c,s.mapping)}else{const c=s.image;if(c&&c.height>0){const l=new p7(c.height/2);return l.fromEquirectangularTexture(o,s),e.set(s,l),s.addEventListener("dispose",i),t(l.texture,s.mapping)}else return null}}return s}function i(s){const a=s.target;a.removeEventListener("dispose",i);const c=e.get(a);c!==void 0&&(e.delete(a),c.dispose())}function r(){e=new WeakMap}return{get:n,dispose:r}}class Qi extends f5{constructor(e=-1,t=1,n=1,i=-1,r=.1,s=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,r,s){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-e,s=n+e,a=i+t,c=i-t;if(this.view!==null&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=l*this.view.offsetX,s=r+l*this.view.width,a-=u*this.view.offsetY,c=a-u*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,c,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}const i0=4,Jn=[.125,.215,.35,.446,.526,.582],C1=20,a2=new Qi,Kn=new We;let s2=null;const A1=(1+Math.sqrt(5))/2,t0=1/A1,Qn=[new L(1,1,1),new L(-1,1,1),new L(1,1,-1),new L(-1,1,-1),new L(0,A1,t0),new L(0,A1,-t0),new L(t0,0,A1),new L(-t0,0,A1),new L(A1,t0,0),new L(-A1,t0,0)];class e4{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){s2=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=i4(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=n4(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(s2),e.scissorTest=!1,l3(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===h0||e.mapping===f0?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),s2=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:Rt,minFilter:Rt,generateMipmaps:!1,type:R0,format:Ht,encoding:I1,depthBuffer:!1},i=t4(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=t4(e,t,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=er(r)),this._blurMaterial=tr(r,e,t)}return i}_compileMaterial(e){const t=new ut(this._lodPlanes[0],e);this._renderer.compile(t,a2)}_sceneToCubeUV(e,t,n,i){const a=new Dt(90,1,t,n),c=[1,-1,1,1,1,1],l=[1,1,1,-1,-1,-1],u=this._renderer,f=u.autoClear,h=u.toneMapping;u.getClearColor(Kn),u.toneMapping=c1,u.autoClear=!1;const p=new Kt({name:"PMREM.Background",side:bt,depthWrite:!1,depthTest:!1}),g=new ut(new g0,p);let _=!1;const m=e.background;m?m.isColor&&(p.color.copy(m),e.background=null,_=!0):(p.color.copy(Kn),_=!0);for(let d=0;d<6;d++){const w=d%3;w===0?(a.up.set(0,c[d],0),a.lookAt(l[d],0,0)):w===1?(a.up.set(0,0,c[d]),a.lookAt(0,l[d],0)):(a.up.set(0,c[d],0),a.lookAt(0,0,l[d]));const x=this._cubeSize;l3(i,w*x,d>2?x:0,x,x),u.setRenderTarget(i),_&&u.render(g,a),u.render(e,a)}g.geometry.dispose(),g.material.dispose(),u.toneMapping=h,u.autoClear=f,e.background=m}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===h0||e.mapping===f0;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=i4()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=n4());const r=i?this._cubemapMaterial:this._equirectMaterial,s=new ut(this._lodPlanes[0],r),a=r.uniforms;a.envMap.value=e;const c=this._cubeSize;l3(t,0,0,3*c,2*c),n.setRenderTarget(t),n.render(s,a2)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const r=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),s=Qn[(i-1)%Qn.length];this._blur(e,i-1,i,r,s)}t.autoClear=n}_blur(e,t,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(e,s,t,n,i,"latitudinal",r),this._halfBlur(s,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,s,a){const c=this._renderer,l=this._blurMaterial;s!=="latitudinal"&&s!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,f=new ut(this._lodPlanes[i],l),h=l.uniforms,p=this._sizeLods[n]-1,g=isFinite(r)?Math.PI/(2*p):2*Math.PI/(2*C1-1),_=r/g,m=isFinite(r)?1+Math.floor(u*_):C1;m>C1&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${C1}`);const d=[];let w=0;for(let R=0;R<C1;++R){const D=R/_,M=Math.exp(-D*D/2);d.push(M),R===0?w+=M:R<m&&(w+=2*M)}for(let R=0;R<d.length;R++)d[R]=d[R]/w;h.envMap.value=e.texture,h.samples.value=m,h.weights.value=d,h.latitudinal.value=s==="latitudinal",a&&(h.poleAxis.value=a);const{_lodMax:x}=this;h.dTheta.value=g,h.mipInt.value=x-n;const v=this._sizeLods[i],y=3*v*(i>x-i0?i-x+i0:0),C=4*(this._cubeSize-v);l3(t,y,C,3*v,2*v),c.setRenderTarget(t),c.render(f,a2)}}function er(o){const e=[],t=[],n=[];let i=o;const r=o-i0+1+Jn.length;for(let s=0;s<r;s++){const a=Math.pow(2,i);t.push(a);let c=1/a;s>o-i0?c=Jn[s-o+i0-1]:s===0&&(c=0),n.push(c);const l=1/(a-2),u=-l,f=1+l,h=[u,u,f,u,f,f,u,u,f,f,u,f],p=6,g=6,_=3,m=2,d=1,w=new Float32Array(_*g*p),x=new Float32Array(m*g*p),v=new Float32Array(d*g*p);for(let C=0;C<p;C++){const R=C%3*2/3-1,D=C>2?0:-1,M=[R,D,0,R+2/3,D,0,R+2/3,D+1,0,R,D,0,R+2/3,D+1,0,R,D+1,0];w.set(M,_*g*C),x.set(h,m*g*C);const T=[C,C,C,C,C,C];v.set(T,d*g*C)}const y=new lt;y.setAttribute("position",new xt(w,_)),y.setAttribute("uv",new xt(x,m)),y.setAttribute("faceIndex",new xt(v,d)),e.push(y),i>i0&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function t4(o,e,t){const n=new U1(o,e,t);return n.texture.mapping=E3,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function l3(o,e,t,n,i){o.viewport.set(e,t,n,i),o.scissor.set(e,t,n,i)}function tr(o,e,t){const n=new Float32Array(C1),i=new L(0,1,0);return new x1({name:"SphericalGaussianBlur",defines:{n:C1,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${o}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:k2(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:_1,depthTest:!1,depthWrite:!1})}function n4(){return new x1({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:k2(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:_1,depthTest:!1,depthWrite:!1})}function i4(){return new x1({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:k2(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:_1,depthTest:!1,depthWrite:!1})}function k2(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function nr(o){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const c=a.mapping,l=c===T2||c===A2,u=c===h0||c===f0;if(l||u)if(a.isRenderTargetTexture&&a.needsPMREMUpdate===!0){a.needsPMREMUpdate=!1;let f=e.get(a);return t===null&&(t=new e4(o)),f=l?t.fromEquirectangular(a,f):t.fromCubemap(a,f),e.set(a,f),f.texture}else{if(e.has(a))return e.get(a).texture;{const f=a.image;if(l&&f&&f.height>0||u&&f&&i(f)){t===null&&(t=new e4(o));const h=l?t.fromEquirectangular(a):t.fromCubemap(a);return e.set(a,h),a.addEventListener("dispose",r),h.texture}else return null}}}return a}function i(a){let c=0;const l=6;for(let u=0;u<l;u++)a[u]!==void 0&&c++;return c===l}function r(a){const c=a.target;c.removeEventListener("dispose",r);const l=e.get(c);l!==void 0&&(e.delete(c),l.dispose())}function s(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:s}}function ir(o){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=o.getExtension("WEBGL_depth_texture")||o.getExtension("MOZ_WEBGL_depth_texture")||o.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=o.getExtension("EXT_texture_filter_anisotropic")||o.getExtension("MOZ_EXT_texture_filter_anisotropic")||o.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=o.getExtension("WEBGL_compressed_texture_s3tc")||o.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||o.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=o.getExtension("WEBGL_compressed_texture_pvrtc")||o.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=o.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(n){n.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(n){const i=t(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function rr(o,e,t,n){const i={},r=new WeakMap;function s(f){const h=f.target;h.index!==null&&e.remove(h.index);for(const g in h.attributes)e.remove(h.attributes[g]);h.removeEventListener("dispose",s),delete i[h.id];const p=r.get(h);p&&(e.remove(p),r.delete(h)),n.releaseStatesOfGeometry(h),h.isInstancedBufferGeometry===!0&&delete h._maxInstanceCount,t.memory.geometries--}function a(f,h){return i[h.id]===!0||(h.addEventListener("dispose",s),i[h.id]=!0,t.memory.geometries++),h}function c(f){const h=f.attributes;for(const g in h)e.update(h[g],34962);const p=f.morphAttributes;for(const g in p){const _=p[g];for(let m=0,d=_.length;m<d;m++)e.update(_[m],34962)}}function l(f){const h=[],p=f.index,g=f.attributes.position;let _=0;if(p!==null){const w=p.array;_=p.version;for(let x=0,v=w.length;x<v;x+=3){const y=w[x+0],C=w[x+1],R=w[x+2];h.push(y,C,C,R,R,y)}}else{const w=g.array;_=g.version;for(let x=0,v=w.length/3-1;x<v;x+=3){const y=x+0,C=x+1,R=x+2;h.push(y,C,C,R,R,y)}}const m=new(r5(h)?u5:c5)(h,1);m.version=_;const d=r.get(f);d&&e.remove(d),r.set(f,m)}function u(f){const h=r.get(f);if(h){const p=f.index;p!==null&&h.version<p.version&&l(f)}else l(f);return r.get(f)}return{get:a,update:c,getWireframeAttribute:u}}function or(o,e,t,n){const i=n.isWebGL2;let r;function s(h){r=h}let a,c;function l(h){a=h.type,c=h.bytesPerElement}function u(h,p){o.drawElements(r,p,a,h*c),t.update(p,r,1)}function f(h,p,g){if(g===0)return;let _,m;if(i)_=o,m="drawElementsInstanced";else if(_=e.get("ANGLE_instanced_arrays"),m="drawElementsInstancedANGLE",_===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}_[m](r,p,a,h*c,g),t.update(p,r,g)}this.setMode=s,this.setIndex=l,this.render=u,this.renderInstances=f}function ar(o){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,s,a){switch(t.calls++,s){case 4:t.triangles+=a*(r/3);break;case 1:t.lines+=a*(r/2);break;case 3:t.lines+=a*(r-1);break;case 2:t.lines+=a*r;break;case 0:t.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function i(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function sr(o,e){return o[0]-e[0]}function lr(o,e){return Math.abs(e[1])-Math.abs(o[1])}function cr(o,e,t){const n={},i=new Float32Array(8),r=new WeakMap,s=new ct,a=[];for(let l=0;l<8;l++)a[l]=[l,0];function c(l,u,f){const h=l.morphTargetInfluences;if(e.isWebGL2===!0){const g=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color,_=g!==void 0?g.length:0;let m=r.get(u);if(m===void 0||m.count!==_){let H=function(){I.dispose(),r.delete(u),u.removeEventListener("dispose",H)};var p=H;m!==void 0&&m.texture.dispose();const x=u.morphAttributes.position!==void 0,v=u.morphAttributes.normal!==void 0,y=u.morphAttributes.color!==void 0,C=u.morphAttributes.position||[],R=u.morphAttributes.normal||[],D=u.morphAttributes.color||[];let M=0;x===!0&&(M=1),v===!0&&(M=2),y===!0&&(M=3);let T=u.attributes.position.count*M,W=1;T>e.maxTextureSize&&(W=Math.ceil(T/e.maxTextureSize),T=e.maxTextureSize);const Z=new Float32Array(T*W*4*_),I=new s5(Z,T,W,_);I.type=P1,I.needsUpdate=!0;const N=M*4;for(let J=0;J<_;J++){const ee=C[J],j=R[J],oe=D[J],te=T*W*4*J;for(let Me=0;Me<ee.count;Me++){const ae=Me*N;x===!0&&(s.fromBufferAttribute(ee,Me),Z[te+ae+0]=s.x,Z[te+ae+1]=s.y,Z[te+ae+2]=s.z,Z[te+ae+3]=0),v===!0&&(s.fromBufferAttribute(j,Me),Z[te+ae+4]=s.x,Z[te+ae+5]=s.y,Z[te+ae+6]=s.z,Z[te+ae+7]=0),y===!0&&(s.fromBufferAttribute(oe,Me),Z[te+ae+8]=s.x,Z[te+ae+9]=s.y,Z[te+ae+10]=s.z,Z[te+ae+11]=oe.itemSize===4?s.w:1)}}m={count:_,texture:I,size:new he(T,W)},r.set(u,m),u.addEventListener("dispose",H)}let d=0;for(let x=0;x<h.length;x++)d+=h[x];const w=u.morphTargetsRelative?1:1-d;f.getUniforms().setValue(o,"morphTargetBaseInfluence",w),f.getUniforms().setValue(o,"morphTargetInfluences",h),f.getUniforms().setValue(o,"morphTargetsTexture",m.texture,t),f.getUniforms().setValue(o,"morphTargetsTextureSize",m.size)}else{const g=h===void 0?0:h.length;let _=n[u.id];if(_===void 0||_.length!==g){_=[];for(let v=0;v<g;v++)_[v]=[v,0];n[u.id]=_}for(let v=0;v<g;v++){const y=_[v];y[0]=v,y[1]=h[v]}_.sort(lr);for(let v=0;v<8;v++)v<g&&_[v][1]?(a[v][0]=_[v][0],a[v][1]=_[v][1]):(a[v][0]=Number.MAX_SAFE_INTEGER,a[v][1]=0);a.sort(sr);const m=u.morphAttributes.position,d=u.morphAttributes.normal;let w=0;for(let v=0;v<8;v++){const y=a[v],C=y[0],R=y[1];C!==Number.MAX_SAFE_INTEGER&&R?(m&&u.getAttribute("morphTarget"+v)!==m[C]&&u.setAttribute("morphTarget"+v,m[C]),d&&u.getAttribute("morphNormal"+v)!==d[C]&&u.setAttribute("morphNormal"+v,d[C]),i[v]=R,w+=R):(m&&u.hasAttribute("morphTarget"+v)===!0&&u.deleteAttribute("morphTarget"+v),d&&u.hasAttribute("morphNormal"+v)===!0&&u.deleteAttribute("morphNormal"+v),i[v]=0)}const x=u.morphTargetsRelative?1:1-w;f.getUniforms().setValue(o,"morphTargetBaseInfluence",x),f.getUniforms().setValue(o,"morphTargetInfluences",i)}}return{update:c}}function ur(o,e,t,n){let i=new WeakMap;function r(c){const l=n.render.frame,u=c.geometry,f=e.get(c,u);return i.get(f)!==l&&(e.update(f),i.set(f,l)),c.isInstancedMesh&&(c.hasEventListener("dispose",a)===!1&&c.addEventListener("dispose",a),t.update(c.instanceMatrix,34962),c.instanceColor!==null&&t.update(c.instanceColor,34962)),f}function s(){i=new WeakMap}function a(c){const l=c.target;l.removeEventListener("dispose",a),t.remove(l.instanceMatrix),l.instanceColor!==null&&t.remove(l.instanceColor)}return{update:r,dispose:s}}const g5=new Ct,_5=new s5,v5=new K6,x5=new d5,r4=[],o4=[],a4=new Float32Array(16),s4=new Float32Array(9),l4=new Float32Array(4);function _0(o,e,t){const n=o[0];if(n<=0||n>0)return o;const i=e*t;let r=r4[i];if(r===void 0&&(r=new Float32Array(i),r4[i]=r),e!==0){n.toArray(r,0);for(let s=1,a=0;s!==e;++s)a+=t,o[s].toArray(r,a)}return r}function tt(o,e){if(o.length!==e.length)return!1;for(let t=0,n=o.length;t<n;t++)if(o[t]!==e[t])return!1;return!0}function nt(o,e){for(let t=0,n=e.length;t<n;t++)o[t]=e[t]}function C3(o,e){let t=o4[e];t===void 0&&(t=new Int32Array(e),o4[e]=t);for(let n=0;n!==e;++n)t[n]=o.allocateTextureUnit();return t}function hr(o,e){const t=this.cache;t[0]!==e&&(o.uniform1f(this.addr,e),t[0]=e)}function fr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(o.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(tt(t,e))return;o.uniform2fv(this.addr,e),nt(t,e)}}function dr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(o.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(o.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(tt(t,e))return;o.uniform3fv(this.addr,e),nt(t,e)}}function pr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(o.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(tt(t,e))return;o.uniform4fv(this.addr,e),nt(t,e)}}function mr(o,e){const t=this.cache,n=e.elements;if(n===void 0){if(tt(t,e))return;o.uniformMatrix2fv(this.addr,!1,e),nt(t,e)}else{if(tt(t,n))return;l4.set(n),o.uniformMatrix2fv(this.addr,!1,l4),nt(t,n)}}function gr(o,e){const t=this.cache,n=e.elements;if(n===void 0){if(tt(t,e))return;o.uniformMatrix3fv(this.addr,!1,e),nt(t,e)}else{if(tt(t,n))return;s4.set(n),o.uniformMatrix3fv(this.addr,!1,s4),nt(t,n)}}function _r(o,e){const t=this.cache,n=e.elements;if(n===void 0){if(tt(t,e))return;o.uniformMatrix4fv(this.addr,!1,e),nt(t,e)}else{if(tt(t,n))return;a4.set(n),o.uniformMatrix4fv(this.addr,!1,a4),nt(t,n)}}function vr(o,e){const t=this.cache;t[0]!==e&&(o.uniform1i(this.addr,e),t[0]=e)}function xr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(o.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(tt(t,e))return;o.uniform2iv(this.addr,e),nt(t,e)}}function br(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(o.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(tt(t,e))return;o.uniform3iv(this.addr,e),nt(t,e)}}function Mr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(o.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(tt(t,e))return;o.uniform4iv(this.addr,e),nt(t,e)}}function yr(o,e){const t=this.cache;t[0]!==e&&(o.uniform1ui(this.addr,e),t[0]=e)}function Sr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(o.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(tt(t,e))return;o.uniform2uiv(this.addr,e),nt(t,e)}}function wr(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(o.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(tt(t,e))return;o.uniform3uiv(this.addr,e),nt(t,e)}}function Er(o,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(o.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(tt(t,e))return;o.uniform4uiv(this.addr,e),nt(t,e)}}function Tr(o,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(o.uniform1i(this.addr,i),n[0]=i),t.setTexture2D(e||g5,i)}function Ar(o,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(o.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||v5,i)}function Cr(o,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(o.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||x5,i)}function Lr(o,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(o.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||_5,i)}function Pr(o){switch(o){case 5126:return hr;case 35664:return fr;case 35665:return dr;case 35666:return pr;case 35674:return mr;case 35675:return gr;case 35676:return _r;case 5124:case 35670:return vr;case 35667:case 35671:return xr;case 35668:case 35672:return br;case 35669:case 35673:return Mr;case 5125:return yr;case 36294:return Sr;case 36295:return wr;case 36296:return Er;case 35678:case 36198:case 36298:case 36306:case 35682:return Tr;case 35679:case 36299:case 36307:return Ar;case 35680:case 36300:case 36308:case 36293:return Cr;case 36289:case 36303:case 36311:case 36292:return Lr}}function Rr(o,e){o.uniform1fv(this.addr,e)}function Dr(o,e){const t=_0(e,this.size,2);o.uniform2fv(this.addr,t)}function Ir(o,e){const t=_0(e,this.size,3);o.uniform3fv(this.addr,t)}function Ur(o,e){const t=_0(e,this.size,4);o.uniform4fv(this.addr,t)}function Nr(o,e){const t=_0(e,this.size,4);o.uniformMatrix2fv(this.addr,!1,t)}function Or(o,e){const t=_0(e,this.size,9);o.uniformMatrix3fv(this.addr,!1,t)}function Fr(o,e){const t=_0(e,this.size,16);o.uniformMatrix4fv(this.addr,!1,t)}function zr(o,e){o.uniform1iv(this.addr,e)}function Br(o,e){o.uniform2iv(this.addr,e)}function Hr(o,e){o.uniform3iv(this.addr,e)}function Vr(o,e){o.uniform4iv(this.addr,e)}function Gr(o,e){o.uniform1uiv(this.addr,e)}function kr(o,e){o.uniform2uiv(this.addr,e)}function Wr(o,e){o.uniform3uiv(this.addr,e)}function qr(o,e){o.uniform4uiv(this.addr,e)}function Xr(o,e,t){const n=this.cache,i=e.length,r=C3(t,i);tt(n,r)||(o.uniform1iv(this.addr,r),nt(n,r));for(let s=0;s!==i;++s)t.setTexture2D(e[s]||g5,r[s])}function Yr(o,e,t){const n=this.cache,i=e.length,r=C3(t,i);tt(n,r)||(o.uniform1iv(this.addr,r),nt(n,r));for(let s=0;s!==i;++s)t.setTexture3D(e[s]||v5,r[s])}function jr(o,e,t){const n=this.cache,i=e.length,r=C3(t,i);tt(n,r)||(o.uniform1iv(this.addr,r),nt(n,r));for(let s=0;s!==i;++s)t.setTextureCube(e[s]||x5,r[s])}function Zr(o,e,t){const n=this.cache,i=e.length,r=C3(t,i);tt(n,r)||(o.uniform1iv(this.addr,r),nt(n,r));for(let s=0;s!==i;++s)t.setTexture2DArray(e[s]||_5,r[s])}function $r(o){switch(o){case 5126:return Rr;case 35664:return Dr;case 35665:return Ir;case 35666:return Ur;case 35674:return Nr;case 35675:return Or;case 35676:return Fr;case 5124:case 35670:return zr;case 35667:case 35671:return Br;case 35668:case 35672:return Hr;case 35669:case 35673:return Vr;case 5125:return Gr;case 36294:return kr;case 36295:return Wr;case 36296:return qr;case 35678:case 36198:case 36298:case 36306:case 35682:return Xr;case 35679:case 36299:case 36307:return Yr;case 35680:case 36300:case 36308:case 36293:return jr;case 36289:case 36303:case 36311:case 36292:return Zr}}class Jr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=Pr(t.type)}}class Kr{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=$r(t.type)}}class Qr{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const a=i[r];a.setValue(e,t[a.id],n)}}}const l2=/(\w+)(\])?(\[|\.)?/g;function c4(o,e){o.seq.push(e),o.map[e.id]=e}function e9(o,e,t){const n=o.name,i=n.length;for(l2.lastIndex=0;;){const r=l2.exec(n),s=l2.lastIndex;let a=r[1];const c=r[2]==="]",l=r[3];if(c&&(a=a|0),l===void 0||l==="["&&s+2===i){c4(t,l===void 0?new Jr(a,o,e):new Kr(a,o,e));break}else{let f=t.map[a];f===void 0&&(f=new Qr(a),c4(t,f)),t=f}}}class b3{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,35718);for(let i=0;i<n;++i){const r=e.getActiveUniform(t,i),s=e.getUniformLocation(t,r.name);e9(r,s,this)}}setValue(e,t,n,i){const r=this.map[t];r!==void 0&&r.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let r=0,s=t.length;r!==s;++r){const a=t[r],c=n[a.id];c.needsUpdate!==!1&&a.setValue(e,c.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const s=e[i];s.id in t&&n.push(s)}return n}}function u4(o,e,t){const n=o.createShader(e);return o.shaderSource(n,t),o.compileShader(n),n}let t9=0;function n9(o,e){const t=o.split(`
`),n=[],i=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let s=i;s<r;s++){const a=s+1;n.push(`${a===e?">":" "} ${a}: ${t[s]}`)}return n.join(`
`)}function i9(o){switch(o){case I1:return["Linear","( value )"];case Xe:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",o),["Linear","( value )"]}}function h4(o,e,t){const n=o.getShaderParameter(e,35713),i=o.getShaderInfoLog(e).trim();if(n&&i==="")return"";const r=/ERROR: 0:(\d+)/.exec(i);if(r){const s=parseInt(r[1]);return t.toUpperCase()+`

`+i+`

`+n9(o.getShaderSource(e),s)}else return i}function r9(o,e){const t=i9(e);return"vec4 "+o+"( vec4 value ) { return LinearTo"+t[0]+t[1]+"; }"}function o9(o,e){let t;switch(e){case _6:t="Linear";break;case v6:t="Reinhard";break;case x6:t="OptimizedCineon";break;case b6:t="ACESFilmic";break;case M6:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+o+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function a9(o){return[o.extensionDerivatives||!!o.envMapCubeUVHeight||o.bumpMap||o.normalMapTangentSpace||o.clearcoatNormalMap||o.flatShading||o.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(o.extensionFragDepth||o.logarithmicDepthBuffer)&&o.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",o.extensionDrawBuffers&&o.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(o.extensionShaderTextureLOD||o.envMap||o.transmission)&&o.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(E0).join(`
`)}function s9(o){const e=[];for(const t in o){const n=o[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function l9(o,e){const t={},n=o.getProgramParameter(e,35721);for(let i=0;i<n;i++){const r=o.getActiveAttrib(e,i),s=r.name;let a=1;r.type===35674&&(a=2),r.type===35675&&(a=3),r.type===35676&&(a=4),t[s]={type:r.type,location:o.getAttribLocation(e,s),locationSize:a}}return t}function E0(o){return o!==""}function f4(o,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return o.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function d4(o,e){return o.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const c9=/^[ \t]*#include +<([\w\d./]+)>/gm;function D2(o){return o.replace(c9,u9)}function u9(o,e){const t=Ne[e];if(t===void 0)throw new Error("Can not resolve #include <"+e+">");return D2(t)}const h9=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function p4(o){return o.replace(h9,f9)}function f9(o,e,t,n){let i="";for(let r=parseInt(e);r<parseInt(t);r++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return i}function m4(o){let e="precision "+o.precision+` float;
precision `+o.precision+" int;";return o.precision==="highp"?e+=`
#define HIGH_PRECISION`:o.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:o.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function d9(o){let e="SHADOWMAP_TYPE_BASIC";return o.shadowMapType===J4?e="SHADOWMAP_TYPE_PCF":o.shadowMapType===Z5?e="SHADOWMAP_TYPE_PCF_SOFT":o.shadowMapType===w0&&(e="SHADOWMAP_TYPE_VSM"),e}function p9(o){let e="ENVMAP_TYPE_CUBE";if(o.envMap)switch(o.envMapMode){case h0:case f0:e="ENVMAP_TYPE_CUBE";break;case E3:e="ENVMAP_TYPE_CUBE_UV";break}return e}function m9(o){let e="ENVMAP_MODE_REFLECTION";if(o.envMap)switch(o.envMapMode){case f0:e="ENVMAP_MODE_REFRACTION";break}return e}function g9(o){let e="ENVMAP_BLENDING_NONE";if(o.envMap)switch(o.combine){case e5:e="ENVMAP_BLENDING_MULTIPLY";break;case m6:e="ENVMAP_BLENDING_MIX";break;case g6:e="ENVMAP_BLENDING_ADD";break}return e}function _9(o){const e=o.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function v9(o,e,t,n){const i=o.getContext(),r=t.defines;let s=t.vertexShader,a=t.fragmentShader;const c=d9(t),l=p9(t),u=m9(t),f=g9(t),h=_9(t),p=t.isWebGL2?"":a9(t),g=s9(r),_=i.createProgram();let m,d,w=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(m=[g].filter(E0).join(`
`),m.length>0&&(m+=`
`),d=[p,g].filter(E0).join(`
`),d.length>0&&(d+=`
`)):(m=[m4(t),"#define SHADER_NAME "+t.shaderName,g,t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs2?"#define USE_UV2":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(E0).join(`
`),d=[p,m4(t),"#define SHADER_NAME "+t.shaderName,g,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+l:"",t.envMap?"#define "+u:"",t.envMap?"#define "+f:"",h?"#define CUBEUV_TEXEL_WIDTH "+h.texelWidth:"",h?"#define CUBEUV_TEXEL_HEIGHT "+h.texelHeight:"",h?"#define CUBEUV_MAX_MIP "+h.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.vertexTangents?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUvs2?"#define USE_UV2":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+c:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==c1?"#define TONE_MAPPING":"",t.toneMapping!==c1?Ne.tonemapping_pars_fragment:"",t.toneMapping!==c1?o9("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Ne.encodings_pars_fragment,r9("linearToOutputTexel",t.outputEncoding),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(E0).join(`
`)),s=D2(s),s=f4(s,t),s=d4(s,t),a=D2(a),a=f4(a,t),a=d4(a,t),s=p4(s),a=p4(a),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(w=`#version 300 es
`,m=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+m,d=["#define varying in",t.glslVersion===Nn?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Nn?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+d);const x=w+m+s,v=w+d+a,y=u4(i,35633,x),C=u4(i,35632,v);if(i.attachShader(_,y),i.attachShader(_,C),t.index0AttributeName!==void 0?i.bindAttribLocation(_,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(_,0,"position"),i.linkProgram(_),o.debug.checkShaderErrors){const M=i.getProgramInfoLog(_).trim(),T=i.getShaderInfoLog(y).trim(),W=i.getShaderInfoLog(C).trim();let Z=!0,I=!0;if(i.getProgramParameter(_,35714)===!1)if(Z=!1,typeof o.debug.onShaderError=="function")o.debug.onShaderError(i,_,y,C);else{const N=h4(i,y,"vertex"),H=h4(i,C,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(_,35715)+`

Program Info Log: `+M+`
`+N+`
`+H)}else M!==""?console.warn("THREE.WebGLProgram: Program Info Log:",M):(T===""||W==="")&&(I=!1);I&&(this.diagnostics={runnable:Z,programLog:M,vertexShader:{log:T,prefix:m},fragmentShader:{log:W,prefix:d}})}i.deleteShader(y),i.deleteShader(C);let R;this.getUniforms=function(){return R===void 0&&(R=new b3(i,_)),R};let D;return this.getAttributes=function(){return D===void 0&&(D=l9(i,_)),D},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(_),this.program=void 0},this.name=t.shaderName,this.id=t9++,this.cacheKey=e,this.usedTimes=1,this.program=_,this.vertexShader=y,this.fragmentShader=C,this}let x9=0;class b9{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),s=this._getShaderCacheForMaterial(e);return s.has(i)===!1&&(s.add(i),i.usedTimes++),s.has(r)===!1&&(s.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new M9(e),t.set(e,n)),n}}class M9{constructor(e){this.id=x9++,this.code=e,this.usedTimes=0}}function y9(o,e,t,n,i,r,s){const a=new V2,c=new b9,l=[],u=i.isWebGL2,f=i.logarithmicDepthBuffer,h=i.vertexTextures;let p=i.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(M){return M===1?"uv2":"uv"}function m(M,T,W,Z,I){const N=Z.fog,H=I.geometry,J=M.isMeshStandardMaterial?Z.environment:null,ee=(M.isMeshStandardMaterial?t:e).get(M.envMap||J),j=!!ee&&ee.mapping===E3?ee.image.height:null,oe=g[M.type];M.precision!==null&&(p=i.getMaxPrecision(M.precision),p!==M.precision&&console.warn("THREE.WebGLProgram.getParameters:",M.precision,"not supported, using",p,"instead."));const te=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color,Me=te!==void 0?te.length:0;let ae=0;H.morphAttributes.position!==void 0&&(ae=1),H.morphAttributes.normal!==void 0&&(ae=2),H.morphAttributes.color!==void 0&&(ae=3);let V,$,fe,pe;if(oe){const ge=Jt[oe];V=ge.vertexShader,$=ge.fragmentShader}else V=M.vertexShader,$=M.fragmentShader,c.update(M),fe=c.getVertexShaderID(M),pe=c.getFragmentShaderID(M);const F=o.getRenderTarget(),Le=I.isInstancedMesh===!0,Ce=!!M.map,se=!!M.matcap,xe=!!ee,Q=!!M.aoMap,q=!!M.lightMap,K=!!M.bumpMap,_e=!!M.normalMap,le=!!M.displacementMap,Te=!!M.emissiveMap,Ae=!!M.metalnessMap,Se=!!M.roughnessMap,Ie=M.clearcoat>0,Ve=M.iridescence>0,E=M.sheen>0,b=M.transmission>0,B=Ie&&!!M.clearcoatMap,ne=Ie&&!!M.clearcoatNormalMap,ie=Ie&&!!M.clearcoatRoughnessMap,ce=Ve&&!!M.iridescenceMap,A=Ve&&!!M.iridescenceThicknessMap,Y=E&&!!M.sheenColorMap,z=E&&!!M.sheenRoughnessMap,de=!!M.specularMap,ve=!!M.specularColorMap,ye=!!M.specularIntensityMap,me=b&&!!M.transmissionMap,be=b&&!!M.thicknessMap,Re=!!M.gradientMap,Oe=!!M.alphaMap,Ze=M.alphaTest>0,P=!!M.extensions,k=!!H.attributes.uv2;return{isWebGL2:u,shaderID:oe,shaderName:M.type,vertexShader:V,fragmentShader:$,defines:M.defines,customVertexShaderID:fe,customFragmentShaderID:pe,isRawShaderMaterial:M.isRawShaderMaterial===!0,glslVersion:M.glslVersion,precision:p,instancing:Le,instancingColor:Le&&I.instanceColor!==null,supportsVertexTextures:h,outputEncoding:F===null?o.outputEncoding:F.isXRRenderTarget===!0?F.texture.encoding:I1,map:Ce,matcap:se,envMap:xe,envMapMode:xe&&ee.mapping,envMapCubeUVHeight:j,aoMap:Q,lightMap:q,bumpMap:K,normalMap:_e,displacementMap:h&&le,emissiveMap:Te,normalMapObjectSpace:_e&&M.normalMapType===V6,normalMapTangentSpace:_e&&M.normalMapType===H6,decodeVideoTexture:Ce&&M.map.isVideoTexture===!0&&M.map.encoding===Xe,metalnessMap:Ae,roughnessMap:Se,clearcoat:Ie,clearcoatMap:B,clearcoatNormalMap:ne,clearcoatRoughnessMap:ie,iridescence:Ve,iridescenceMap:ce,iridescenceThicknessMap:A,sheen:E,sheenColorMap:Y,sheenRoughnessMap:z,specularMap:de,specularColorMap:ve,specularIntensityMap:ye,transmission:b,transmissionMap:me,thicknessMap:be,gradientMap:Re,opaque:M.transparent===!1&&M.blending===a0,alphaMap:Oe,alphaTest:Ze,combine:M.combine,mapUv:Ce&&_(M.map.channel),aoMapUv:Q&&_(M.aoMap.channel),lightMapUv:q&&_(M.lightMap.channel),bumpMapUv:K&&_(M.bumpMap.channel),normalMapUv:_e&&_(M.normalMap.channel),displacementMapUv:le&&_(M.displacementMap.channel),emissiveMapUv:Te&&_(M.emissiveMap.channel),metalnessMapUv:Ae&&_(M.metalnessMap.channel),roughnessMapUv:Se&&_(M.roughnessMap.channel),clearcoatMapUv:B&&_(M.clearcoatMap.channel),clearcoatNormalMapUv:ne&&_(M.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ie&&_(M.clearcoatRoughnessMap.channel),iridescenceMapUv:ce&&_(M.iridescenceMap.channel),iridescenceThicknessMapUv:A&&_(M.iridescenceThicknessMap.channel),sheenColorMapUv:Y&&_(M.sheenColorMap.channel),sheenRoughnessMapUv:z&&_(M.sheenRoughnessMap.channel),specularMapUv:de&&_(M.specularMap.channel),specularColorMapUv:ve&&_(M.specularColorMap.channel),specularIntensityMapUv:ye&&_(M.specularIntensityMap.channel),transmissionMapUv:me&&_(M.transmissionMap.channel),thicknessMapUv:be&&_(M.thicknessMap.channel),alphaMapUv:Oe&&_(M.alphaMap.channel),vertexTangents:_e&&!!H.attributes.tangent,vertexColors:M.vertexColors,vertexAlphas:M.vertexColors===!0&&!!H.attributes.color&&H.attributes.color.itemSize===4,vertexUvs2:k,pointsUvs:I.isPoints===!0&&!!H.attributes.uv&&(Ce||Oe),fog:!!N,useFog:M.fog===!0,fogExp2:N&&N.isFogExp2,flatShading:M.flatShading===!0,sizeAttenuation:M.sizeAttenuation===!0,logarithmicDepthBuffer:f,skinning:I.isSkinnedMesh===!0,morphTargets:H.morphAttributes.position!==void 0,morphNormals:H.morphAttributes.normal!==void 0,morphColors:H.morphAttributes.color!==void 0,morphTargetsCount:Me,morphTextureStride:ae,numDirLights:T.directional.length,numPointLights:T.point.length,numSpotLights:T.spot.length,numSpotLightMaps:T.spotLightMap.length,numRectAreaLights:T.rectArea.length,numHemiLights:T.hemi.length,numDirLightShadows:T.directionalShadowMap.length,numPointLightShadows:T.pointShadowMap.length,numSpotLightShadows:T.spotShadowMap.length,numSpotLightShadowsWithMaps:T.numSpotLightShadowsWithMaps,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:M.dithering,shadowMapEnabled:o.shadowMap.enabled&&W.length>0,shadowMapType:o.shadowMap.type,toneMapping:M.toneMapped?o.toneMapping:c1,useLegacyLights:o.useLegacyLights,premultipliedAlpha:M.premultipliedAlpha,doubleSided:M.side===l1,flipSided:M.side===bt,useDepthPacking:M.depthPacking>=0,depthPacking:M.depthPacking||0,index0AttributeName:M.index0AttributeName,extensionDerivatives:P&&M.extensions.derivatives===!0,extensionFragDepth:P&&M.extensions.fragDepth===!0,extensionDrawBuffers:P&&M.extensions.drawBuffers===!0,extensionShaderTextureLOD:P&&M.extensions.shaderTextureLOD===!0,rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),customProgramCacheKey:M.customProgramCacheKey()}}function d(M){const T=[];if(M.shaderID?T.push(M.shaderID):(T.push(M.customVertexShaderID),T.push(M.customFragmentShaderID)),M.defines!==void 0)for(const W in M.defines)T.push(W),T.push(M.defines[W]);return M.isRawShaderMaterial===!1&&(w(T,M),x(T,M),T.push(o.outputEncoding)),T.push(M.customProgramCacheKey),T.join()}function w(M,T){M.push(T.precision),M.push(T.outputEncoding),M.push(T.envMapMode),M.push(T.envMapCubeUVHeight),M.push(T.mapUv),M.push(T.alphaMapUv),M.push(T.lightMapUv),M.push(T.aoMapUv),M.push(T.bumpMapUv),M.push(T.normalMapUv),M.push(T.displacementMapUv),M.push(T.emissiveMapUv),M.push(T.metalnessMapUv),M.push(T.roughnessMapUv),M.push(T.clearcoatMapUv),M.push(T.clearcoatNormalMapUv),M.push(T.clearcoatRoughnessMapUv),M.push(T.iridescenceMapUv),M.push(T.iridescenceThicknessMapUv),M.push(T.sheenColorMapUv),M.push(T.sheenRoughnessMapUv),M.push(T.specularMapUv),M.push(T.specularColorMapUv),M.push(T.specularIntensityMapUv),M.push(T.transmissionMapUv),M.push(T.thicknessMapUv),M.push(T.combine),M.push(T.fogExp2),M.push(T.sizeAttenuation),M.push(T.morphTargetsCount),M.push(T.morphAttributeCount),M.push(T.numDirLights),M.push(T.numPointLights),M.push(T.numSpotLights),M.push(T.numSpotLightMaps),M.push(T.numHemiLights),M.push(T.numRectAreaLights),M.push(T.numDirLightShadows),M.push(T.numPointLightShadows),M.push(T.numSpotLightShadows),M.push(T.numSpotLightShadowsWithMaps),M.push(T.shadowMapType),M.push(T.toneMapping),M.push(T.numClippingPlanes),M.push(T.numClipIntersection),M.push(T.depthPacking)}function x(M,T){a.disableAll(),T.isWebGL2&&a.enable(0),T.supportsVertexTextures&&a.enable(1),T.instancing&&a.enable(2),T.instancingColor&&a.enable(3),T.matcap&&a.enable(4),T.envMap&&a.enable(5),T.normalMapObjectSpace&&a.enable(6),T.normalMapTangentSpace&&a.enable(7),T.clearcoat&&a.enable(8),T.iridescence&&a.enable(9),T.alphaTest&&a.enable(10),T.vertexColors&&a.enable(11),T.vertexAlphas&&a.enable(12),T.vertexUvs2&&a.enable(13),T.vertexTangents&&a.enable(14),M.push(a.mask),a.disableAll(),T.fog&&a.enable(0),T.useFog&&a.enable(1),T.flatShading&&a.enable(2),T.logarithmicDepthBuffer&&a.enable(3),T.skinning&&a.enable(4),T.morphTargets&&a.enable(5),T.morphNormals&&a.enable(6),T.morphColors&&a.enable(7),T.premultipliedAlpha&&a.enable(8),T.shadowMapEnabled&&a.enable(9),T.useLegacyLights&&a.enable(10),T.doubleSided&&a.enable(11),T.flipSided&&a.enable(12),T.useDepthPacking&&a.enable(13),T.dithering&&a.enable(14),T.transmission&&a.enable(15),T.sheen&&a.enable(16),T.decodeVideoTexture&&a.enable(17),T.opaque&&a.enable(18),T.pointsUvs&&a.enable(19),M.push(a.mask)}function v(M){const T=g[M.type];let W;if(T){const Z=Jt[T];W=u7.clone(Z.uniforms)}else W=M.uniforms;return W}function y(M,T){let W;for(let Z=0,I=l.length;Z<I;Z++){const N=l[Z];if(N.cacheKey===T){W=N,++W.usedTimes;break}}return W===void 0&&(W=new v9(o,T,M,r),l.push(W)),W}function C(M){if(--M.usedTimes===0){const T=l.indexOf(M);l[T]=l[l.length-1],l.pop(),M.destroy()}}function R(M){c.remove(M)}function D(){c.dispose()}return{getParameters:m,getProgramCacheKey:d,getUniforms:v,acquireProgram:y,releaseProgram:C,releaseShaderCache:R,programs:l,dispose:D}}function S9(){let o=new WeakMap;function e(r){let s=o.get(r);return s===void 0&&(s={},o.set(r,s)),s}function t(r){o.delete(r)}function n(r,s,a){o.get(r)[s]=a}function i(){o=new WeakMap}return{get:e,remove:t,update:n,dispose:i}}function w9(o,e){return o.groupOrder!==e.groupOrder?o.groupOrder-e.groupOrder:o.renderOrder!==e.renderOrder?o.renderOrder-e.renderOrder:o.material.id!==e.material.id?o.material.id-e.material.id:o.z!==e.z?o.z-e.z:o.id-e.id}function g4(o,e){return o.groupOrder!==e.groupOrder?o.groupOrder-e.groupOrder:o.renderOrder!==e.renderOrder?o.renderOrder-e.renderOrder:o.z!==e.z?e.z-o.z:o.id-e.id}function _4(){const o=[];let e=0;const t=[],n=[],i=[];function r(){e=0,t.length=0,n.length=0,i.length=0}function s(f,h,p,g,_,m){let d=o[e];return d===void 0?(d={id:f.id,object:f,geometry:h,material:p,groupOrder:g,renderOrder:f.renderOrder,z:_,group:m},o[e]=d):(d.id=f.id,d.object=f,d.geometry=h,d.material=p,d.groupOrder=g,d.renderOrder=f.renderOrder,d.z=_,d.group=m),e++,d}function a(f,h,p,g,_,m){const d=s(f,h,p,g,_,m);p.transmission>0?n.push(d):p.transparent===!0?i.push(d):t.push(d)}function c(f,h,p,g,_,m){const d=s(f,h,p,g,_,m);p.transmission>0?n.unshift(d):p.transparent===!0?i.unshift(d):t.unshift(d)}function l(f,h){t.length>1&&t.sort(f||w9),n.length>1&&n.sort(h||g4),i.length>1&&i.sort(h||g4)}function u(){for(let f=e,h=o.length;f<h;f++){const p=o[f];if(p.id===null)break;p.id=null,p.object=null,p.geometry=null,p.material=null,p.group=null}}return{opaque:t,transmissive:n,transparent:i,init:r,push:a,unshift:c,finish:u,sort:l}}function E9(){let o=new WeakMap;function e(n,i){const r=o.get(n);let s;return r===void 0?(s=new _4,o.set(n,[s])):i>=r.length?(s=new _4,r.push(s)):s=r[i],s}function t(){o=new WeakMap}return{get:e,dispose:t}}function T9(){const o={};return{get:function(e){if(o[e.id]!==void 0)return o[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new L,color:new We};break;case"SpotLight":t={position:new L,direction:new L,color:new We,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new L,color:new We,distance:0,decay:0};break;case"HemisphereLight":t={direction:new L,skyColor:new We,groundColor:new We};break;case"RectAreaLight":t={color:new We,position:new L,halfWidth:new L,halfHeight:new L};break}return o[e.id]=t,t}}}function A9(){const o={};return{get:function(e){if(o[e.id]!==void 0)return o[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he,shadowCameraNear:1,shadowCameraFar:1e3};break}return o[e.id]=t,t}}}let C9=0;function L9(o,e){return(e.castShadow?2:0)-(o.castShadow?2:0)+(e.map?1:0)-(o.map?1:0)}function P9(o,e){const t=new T9,n=A9(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0};for(let u=0;u<9;u++)i.probe.push(new L);const r=new L,s=new et,a=new et;function c(u,f){let h=0,p=0,g=0;for(let W=0;W<9;W++)i.probe[W].set(0,0,0);let _=0,m=0,d=0,w=0,x=0,v=0,y=0,C=0,R=0,D=0;u.sort(L9);const M=f===!0?Math.PI:1;for(let W=0,Z=u.length;W<Z;W++){const I=u[W],N=I.color,H=I.intensity,J=I.distance,ee=I.shadow&&I.shadow.map?I.shadow.map.texture:null;if(I.isAmbientLight)h+=N.r*H*M,p+=N.g*H*M,g+=N.b*H*M;else if(I.isLightProbe)for(let j=0;j<9;j++)i.probe[j].addScaledVector(I.sh.coefficients[j],H);else if(I.isDirectionalLight){const j=t.get(I);if(j.color.copy(I.color).multiplyScalar(I.intensity*M),I.castShadow){const oe=I.shadow,te=n.get(I);te.shadowBias=oe.bias,te.shadowNormalBias=oe.normalBias,te.shadowRadius=oe.radius,te.shadowMapSize=oe.mapSize,i.directionalShadow[_]=te,i.directionalShadowMap[_]=ee,i.directionalShadowMatrix[_]=I.shadow.matrix,v++}i.directional[_]=j,_++}else if(I.isSpotLight){const j=t.get(I);j.position.setFromMatrixPosition(I.matrixWorld),j.color.copy(N).multiplyScalar(H*M),j.distance=J,j.coneCos=Math.cos(I.angle),j.penumbraCos=Math.cos(I.angle*(1-I.penumbra)),j.decay=I.decay,i.spot[d]=j;const oe=I.shadow;if(I.map&&(i.spotLightMap[R]=I.map,R++,oe.updateMatrices(I),I.castShadow&&D++),i.spotLightMatrix[d]=oe.matrix,I.castShadow){const te=n.get(I);te.shadowBias=oe.bias,te.shadowNormalBias=oe.normalBias,te.shadowRadius=oe.radius,te.shadowMapSize=oe.mapSize,i.spotShadow[d]=te,i.spotShadowMap[d]=ee,C++}d++}else if(I.isRectAreaLight){const j=t.get(I);j.color.copy(N).multiplyScalar(H),j.halfWidth.set(I.width*.5,0,0),j.halfHeight.set(0,I.height*.5,0),i.rectArea[w]=j,w++}else if(I.isPointLight){const j=t.get(I);if(j.color.copy(I.color).multiplyScalar(I.intensity*M),j.distance=I.distance,j.decay=I.decay,I.castShadow){const oe=I.shadow,te=n.get(I);te.shadowBias=oe.bias,te.shadowNormalBias=oe.normalBias,te.shadowRadius=oe.radius,te.shadowMapSize=oe.mapSize,te.shadowCameraNear=oe.camera.near,te.shadowCameraFar=oe.camera.far,i.pointShadow[m]=te,i.pointShadowMap[m]=ee,i.pointShadowMatrix[m]=I.shadow.matrix,y++}i.point[m]=j,m++}else if(I.isHemisphereLight){const j=t.get(I);j.skyColor.copy(I.color).multiplyScalar(H*M),j.groundColor.copy(I.groundColor).multiplyScalar(H*M),i.hemi[x]=j,x++}}w>0&&(e.isWebGL2||o.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=ue.LTC_FLOAT_1,i.rectAreaLTC2=ue.LTC_FLOAT_2):o.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=ue.LTC_HALF_1,i.rectAreaLTC2=ue.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=h,i.ambient[1]=p,i.ambient[2]=g;const T=i.hash;(T.directionalLength!==_||T.pointLength!==m||T.spotLength!==d||T.rectAreaLength!==w||T.hemiLength!==x||T.numDirectionalShadows!==v||T.numPointShadows!==y||T.numSpotShadows!==C||T.numSpotMaps!==R)&&(i.directional.length=_,i.spot.length=d,i.rectArea.length=w,i.point.length=m,i.hemi.length=x,i.directionalShadow.length=v,i.directionalShadowMap.length=v,i.pointShadow.length=y,i.pointShadowMap.length=y,i.spotShadow.length=C,i.spotShadowMap.length=C,i.directionalShadowMatrix.length=v,i.pointShadowMatrix.length=y,i.spotLightMatrix.length=C+R-D,i.spotLightMap.length=R,i.numSpotLightShadowsWithMaps=D,T.directionalLength=_,T.pointLength=m,T.spotLength=d,T.rectAreaLength=w,T.hemiLength=x,T.numDirectionalShadows=v,T.numPointShadows=y,T.numSpotShadows=C,T.numSpotMaps=R,i.version=C9++)}function l(u,f){let h=0,p=0,g=0,_=0,m=0;const d=f.matrixWorldInverse;for(let w=0,x=u.length;w<x;w++){const v=u[w];if(v.isDirectionalLight){const y=i.directional[h];y.direction.setFromMatrixPosition(v.matrixWorld),r.setFromMatrixPosition(v.target.matrixWorld),y.direction.sub(r),y.direction.transformDirection(d),h++}else if(v.isSpotLight){const y=i.spot[g];y.position.setFromMatrixPosition(v.matrixWorld),y.position.applyMatrix4(d),y.direction.setFromMatrixPosition(v.matrixWorld),r.setFromMatrixPosition(v.target.matrixWorld),y.direction.sub(r),y.direction.transformDirection(d),g++}else if(v.isRectAreaLight){const y=i.rectArea[_];y.position.setFromMatrixPosition(v.matrixWorld),y.position.applyMatrix4(d),a.identity(),s.copy(v.matrixWorld),s.premultiply(d),a.extractRotation(s),y.halfWidth.set(v.width*.5,0,0),y.halfHeight.set(0,v.height*.5,0),y.halfWidth.applyMatrix4(a),y.halfHeight.applyMatrix4(a),_++}else if(v.isPointLight){const y=i.point[p];y.position.setFromMatrixPosition(v.matrixWorld),y.position.applyMatrix4(d),p++}else if(v.isHemisphereLight){const y=i.hemi[m];y.direction.setFromMatrixPosition(v.matrixWorld),y.direction.transformDirection(d),m++}}}return{setup:c,setupView:l,state:i}}function v4(o,e){const t=new P9(o,e),n=[],i=[];function r(){n.length=0,i.length=0}function s(f){n.push(f)}function a(f){i.push(f)}function c(f){t.setup(n,f)}function l(f){t.setupView(n,f)}return{init:r,state:{lightsArray:n,shadowsArray:i,lights:t},setupLights:c,setupLightsView:l,pushLight:s,pushShadow:a}}function R9(o,e){let t=new WeakMap;function n(r,s=0){const a=t.get(r);let c;return a===void 0?(c=new v4(o,e),t.set(r,[c])):s>=a.length?(c=new v4(o,e),a.push(c)):c=a[s],c}function i(){t=new WeakMap}return{get:n,dispose:i}}class D9 extends F0{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=z6,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class I9 extends F0{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const U9=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,N9=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function O9(o,e,t){let n=new p5;const i=new he,r=new he,s=new ct,a=new D9({depthPacking:B6}),c=new I9,l={},u=t.maxTextureSize,f={[v1]:bt,[bt]:v1,[l1]:l1},h=new x1({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new he},radius:{value:4}},vertexShader:U9,fragmentShader:N9}),p=h.clone();p.defines.HORIZONTAL_PASS=1;const g=new lt;g.setAttribute("position",new xt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new ut(g,h),m=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=J4,this.render=function(v,y,C){if(m.enabled===!1||m.autoUpdate===!1&&m.needsUpdate===!1||v.length===0)return;const R=o.getRenderTarget(),D=o.getActiveCubeFace(),M=o.getActiveMipmapLevel(),T=o.state;T.setBlending(_1),T.buffers.color.setClear(1,1,1,1),T.buffers.depth.setTest(!0),T.setScissorTest(!1);for(let W=0,Z=v.length;W<Z;W++){const I=v[W],N=I.shadow;if(N===void 0){console.warn("THREE.WebGLShadowMap:",I,"has no shadow.");continue}if(N.autoUpdate===!1&&N.needsUpdate===!1)continue;i.copy(N.mapSize);const H=N.getFrameExtents();if(i.multiply(H),r.copy(N.mapSize),(i.x>u||i.y>u)&&(i.x>u&&(r.x=Math.floor(u/H.x),i.x=r.x*H.x,N.mapSize.x=r.x),i.y>u&&(r.y=Math.floor(u/H.y),i.y=r.y*H.y,N.mapSize.y=r.y)),N.map===null){const ee=this.type!==w0?{minFilter:vt,magFilter:vt}:{};N.map=new U1(i.x,i.y,ee),N.map.texture.name=I.name+".shadowMap",N.camera.updateProjectionMatrix()}o.setRenderTarget(N.map),o.clear();const J=N.getViewportCount();for(let ee=0;ee<J;ee++){const j=N.getViewport(ee);s.set(r.x*j.x,r.y*j.y,r.x*j.z,r.y*j.w),T.viewport(s),N.updateMatrices(I,ee),n=N.getFrustum(),x(y,C,N.camera,I,this.type)}N.isPointLightShadow!==!0&&this.type===w0&&d(N,C),N.needsUpdate=!1}m.needsUpdate=!1,o.setRenderTarget(R,D,M)};function d(v,y){const C=e.update(_);h.defines.VSM_SAMPLES!==v.blurSamples&&(h.defines.VSM_SAMPLES=v.blurSamples,p.defines.VSM_SAMPLES=v.blurSamples,h.needsUpdate=!0,p.needsUpdate=!0),v.mapPass===null&&(v.mapPass=new U1(i.x,i.y)),h.uniforms.shadow_pass.value=v.map.texture,h.uniforms.resolution.value=v.mapSize,h.uniforms.radius.value=v.radius,o.setRenderTarget(v.mapPass),o.clear(),o.renderBufferDirect(y,null,C,h,_,null),p.uniforms.shadow_pass.value=v.mapPass.texture,p.uniforms.resolution.value=v.mapSize,p.uniforms.radius.value=v.radius,o.setRenderTarget(v.map),o.clear(),o.renderBufferDirect(y,null,C,p,_,null)}function w(v,y,C,R){let D=null;const M=C.isPointLight===!0?v.customDistanceMaterial:v.customDepthMaterial;if(M!==void 0)D=M;else if(D=C.isPointLight===!0?c:a,o.localClippingEnabled&&y.clipShadows===!0&&Array.isArray(y.clippingPlanes)&&y.clippingPlanes.length!==0||y.displacementMap&&y.displacementScale!==0||y.alphaMap&&y.alphaTest>0||y.map&&y.alphaTest>0){const T=D.uuid,W=y.uuid;let Z=l[T];Z===void 0&&(Z={},l[T]=Z);let I=Z[W];I===void 0&&(I=D.clone(),Z[W]=I),D=I}if(D.visible=y.visible,D.wireframe=y.wireframe,R===w0?D.side=y.shadowSide!==null?y.shadowSide:y.side:D.side=y.shadowSide!==null?y.shadowSide:f[y.side],D.alphaMap=y.alphaMap,D.alphaTest=y.alphaTest,D.map=y.map,D.clipShadows=y.clipShadows,D.clippingPlanes=y.clippingPlanes,D.clipIntersection=y.clipIntersection,D.displacementMap=y.displacementMap,D.displacementScale=y.displacementScale,D.displacementBias=y.displacementBias,D.wireframeLinewidth=y.wireframeLinewidth,D.linewidth=y.linewidth,C.isPointLight===!0&&D.isMeshDistanceMaterial===!0){const T=o.properties.get(D);T.light=C}return D}function x(v,y,C,R,D){if(v.visible===!1)return;if(v.layers.test(y.layers)&&(v.isMesh||v.isLine||v.isPoints)&&(v.castShadow||v.receiveShadow&&D===w0)&&(!v.frustumCulled||n.intersectsObject(v))){v.modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,v.matrixWorld);const W=e.update(v),Z=v.material;if(Array.isArray(Z)){const I=W.groups;for(let N=0,H=I.length;N<H;N++){const J=I[N],ee=Z[J.materialIndex];if(ee&&ee.visible){const j=w(v,ee,R,D);o.renderBufferDirect(C,null,W,j,v,J)}}}else if(Z.visible){const I=w(v,Z,R,D);o.renderBufferDirect(C,null,W,I,v,null)}}const T=v.children;for(let W=0,Z=T.length;W<Z;W++)x(T[W],y,C,R,D)}}function F9(o,e,t){const n=t.isWebGL2;function i(){let P=!1;const k=new ct;let re=null;const ge=new ct(0,0,0,0);return{setMask:function(we){re!==we&&!P&&(o.colorMask(we,we,we,we),re=we)},setLocked:function(we){P=we},setClear:function(we,qe,Ye,ht,h1){h1===!0&&(we*=ht,qe*=ht,Ye*=ht),k.set(we,qe,Ye,ht),ge.equals(k)===!1&&(o.clearColor(we,qe,Ye,ht),ge.copy(k))},reset:function(){P=!1,re=null,ge.set(-1,0,0,0)}}}function r(){let P=!1,k=null,re=null,ge=null;return{setTest:function(we){we?F(2929):Le(2929)},setMask:function(we){k!==we&&!P&&(o.depthMask(we),k=we)},setFunc:function(we){if(re!==we){switch(we){case l6:o.depthFunc(512);break;case c6:o.depthFunc(519);break;case u6:o.depthFunc(513);break;case E2:o.depthFunc(515);break;case h6:o.depthFunc(514);break;case f6:o.depthFunc(518);break;case d6:o.depthFunc(516);break;case p6:o.depthFunc(517);break;default:o.depthFunc(515)}re=we}},setLocked:function(we){P=we},setClear:function(we){ge!==we&&(o.clearDepth(we),ge=we)},reset:function(){P=!1,k=null,re=null,ge=null}}}function s(){let P=!1,k=null,re=null,ge=null,we=null,qe=null,Ye=null,ht=null,h1=null;return{setTest:function($e){P||($e?F(2960):Le(2960))},setMask:function($e){k!==$e&&!P&&(o.stencilMask($e),k=$e)},setFunc:function($e,Lt,kt){(re!==$e||ge!==Lt||we!==kt)&&(o.stencilFunc($e,Lt,kt),re=$e,ge=Lt,we=kt)},setOp:function($e,Lt,kt){(qe!==$e||Ye!==Lt||ht!==kt)&&(o.stencilOp($e,Lt,kt),qe=$e,Ye=Lt,ht=kt)},setLocked:function($e){P=$e},setClear:function($e){h1!==$e&&(o.clearStencil($e),h1=$e)},reset:function(){P=!1,k=null,re=null,ge=null,we=null,qe=null,Ye=null,ht=null,h1=null}}}const a=new i,c=new r,l=new s,u=new WeakMap,f=new WeakMap;let h={},p={},g=new WeakMap,_=[],m=null,d=!1,w=null,x=null,v=null,y=null,C=null,R=null,D=null,M=!1,T=null,W=null,Z=null,I=null,N=null;const H=o.getParameter(35661);let J=!1,ee=0;const j=o.getParameter(7938);j.indexOf("WebGL")!==-1?(ee=parseFloat(/^WebGL (\d)/.exec(j)[1]),J=ee>=1):j.indexOf("OpenGL ES")!==-1&&(ee=parseFloat(/^OpenGL ES (\d)/.exec(j)[1]),J=ee>=2);let oe=null,te={};const Me=o.getParameter(3088),ae=o.getParameter(2978),V=new ct().fromArray(Me),$=new ct().fromArray(ae);function fe(P,k,re){const ge=new Uint8Array(4),we=o.createTexture();o.bindTexture(P,we),o.texParameteri(P,10241,9728),o.texParameteri(P,10240,9728);for(let qe=0;qe<re;qe++)o.texImage2D(k+qe,0,6408,1,1,0,6408,5121,ge);return we}const pe={};pe[3553]=fe(3553,3553,1),pe[34067]=fe(34067,34069,6),a.setClear(0,0,0,1),c.setClear(1),l.setClear(0),F(2929),c.setFunc(E2),le(!1),Te(rn),F(2884),K(_1);function F(P){h[P]!==!0&&(o.enable(P),h[P]=!0)}function Le(P){h[P]!==!1&&(o.disable(P),h[P]=!1)}function Ce(P,k){return p[P]!==k?(o.bindFramebuffer(P,k),p[P]=k,n&&(P===36009&&(p[36160]=k),P===36160&&(p[36009]=k)),!0):!1}function se(P,k){let re=_,ge=!1;if(P)if(re=g.get(k),re===void 0&&(re=[],g.set(k,re)),P.isWebGLMultipleRenderTargets){const we=P.texture;if(re.length!==we.length||re[0]!==36064){for(let qe=0,Ye=we.length;qe<Ye;qe++)re[qe]=36064+qe;re.length=we.length,ge=!0}}else re[0]!==36064&&(re[0]=36064,ge=!0);else re[0]!==1029&&(re[0]=1029,ge=!0);ge&&(t.isWebGL2?o.drawBuffers(re):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(re))}function xe(P){return m!==P?(o.useProgram(P),m=P,!0):!1}const Q={[n0]:32774,[J5]:32778,[K5]:32779};if(n)Q[ln]=32775,Q[cn]=32776;else{const P=e.get("EXT_blend_minmax");P!==null&&(Q[ln]=P.MIN_EXT,Q[cn]=P.MAX_EXT)}const q={[Q5]:0,[e6]:1,[t6]:768,[K4]:770,[s6]:776,[o6]:774,[i6]:772,[n6]:769,[Q4]:771,[a6]:775,[r6]:773};function K(P,k,re,ge,we,qe,Ye,ht){if(P===_1){d===!0&&(Le(3042),d=!1);return}if(d===!1&&(F(3042),d=!0),P!==$5){if(P!==w||ht!==M){if((x!==n0||C!==n0)&&(o.blendEquation(32774),x=n0,C=n0),ht)switch(P){case a0:o.blendFuncSeparate(1,771,1,771);break;case on:o.blendFunc(1,1);break;case an:o.blendFuncSeparate(0,769,0,1);break;case sn:o.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",P);break}else switch(P){case a0:o.blendFuncSeparate(770,771,1,771);break;case on:o.blendFunc(770,1);break;case an:o.blendFuncSeparate(0,769,0,1);break;case sn:o.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",P);break}v=null,y=null,R=null,D=null,w=P,M=ht}return}we=we||k,qe=qe||re,Ye=Ye||ge,(k!==x||we!==C)&&(o.blendEquationSeparate(Q[k],Q[we]),x=k,C=we),(re!==v||ge!==y||qe!==R||Ye!==D)&&(o.blendFuncSeparate(q[re],q[ge],q[qe],q[Ye]),v=re,y=ge,R=qe,D=Ye),w=P,M=!1}function _e(P,k){P.side===l1?Le(2884):F(2884);let re=P.side===bt;k&&(re=!re),le(re),P.blending===a0&&P.transparent===!1?K(_1):K(P.blending,P.blendEquation,P.blendSrc,P.blendDst,P.blendEquationAlpha,P.blendSrcAlpha,P.blendDstAlpha,P.premultipliedAlpha),c.setFunc(P.depthFunc),c.setTest(P.depthTest),c.setMask(P.depthWrite),a.setMask(P.colorWrite);const ge=P.stencilWrite;l.setTest(ge),ge&&(l.setMask(P.stencilWriteMask),l.setFunc(P.stencilFunc,P.stencilRef,P.stencilFuncMask),l.setOp(P.stencilFail,P.stencilZFail,P.stencilZPass)),Se(P.polygonOffset,P.polygonOffsetFactor,P.polygonOffsetUnits),P.alphaToCoverage===!0?F(32926):Le(32926)}function le(P){T!==P&&(P?o.frontFace(2304):o.frontFace(2305),T=P)}function Te(P){P!==Y5?(F(2884),P!==W&&(P===rn?o.cullFace(1029):P===j5?o.cullFace(1028):o.cullFace(1032))):Le(2884),W=P}function Ae(P){P!==Z&&(J&&o.lineWidth(P),Z=P)}function Se(P,k,re){P?(F(32823),(I!==k||N!==re)&&(o.polygonOffset(k,re),I=k,N=re)):Le(32823)}function Ie(P){P?F(3089):Le(3089)}function Ve(P){P===void 0&&(P=33984+H-1),oe!==P&&(o.activeTexture(P),oe=P)}function E(P,k,re){re===void 0&&(oe===null?re=33984+H-1:re=oe);let ge=te[re];ge===void 0&&(ge={type:void 0,texture:void 0},te[re]=ge),(ge.type!==P||ge.texture!==k)&&(oe!==re&&(o.activeTexture(re),oe=re),o.bindTexture(P,k||pe[P]),ge.type=P,ge.texture=k)}function b(){const P=te[oe];P!==void 0&&P.type!==void 0&&(o.bindTexture(P.type,null),P.type=void 0,P.texture=void 0)}function B(){try{o.compressedTexImage2D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function ne(){try{o.compressedTexImage3D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function ie(){try{o.texSubImage2D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function ce(){try{o.texSubImage3D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function A(){try{o.compressedTexSubImage2D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function Y(){try{o.compressedTexSubImage3D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function z(){try{o.texStorage2D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function de(){try{o.texStorage3D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function ve(){try{o.texImage2D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function ye(){try{o.texImage3D.apply(o,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function me(P){V.equals(P)===!1&&(o.scissor(P.x,P.y,P.z,P.w),V.copy(P))}function be(P){$.equals(P)===!1&&(o.viewport(P.x,P.y,P.z,P.w),$.copy(P))}function Re(P,k){let re=f.get(k);re===void 0&&(re=new WeakMap,f.set(k,re));let ge=re.get(P);ge===void 0&&(ge=o.getUniformBlockIndex(k,P.name),re.set(P,ge))}function Oe(P,k){const ge=f.get(k).get(P);u.get(k)!==ge&&(o.uniformBlockBinding(k,ge,P.__bindingPointIndex),u.set(k,ge))}function Ze(){o.disable(3042),o.disable(2884),o.disable(2929),o.disable(32823),o.disable(3089),o.disable(2960),o.disable(32926),o.blendEquation(32774),o.blendFunc(1,0),o.blendFuncSeparate(1,0,1,0),o.colorMask(!0,!0,!0,!0),o.clearColor(0,0,0,0),o.depthMask(!0),o.depthFunc(513),o.clearDepth(1),o.stencilMask(4294967295),o.stencilFunc(519,0,4294967295),o.stencilOp(7680,7680,7680),o.clearStencil(0),o.cullFace(1029),o.frontFace(2305),o.polygonOffset(0,0),o.activeTexture(33984),o.bindFramebuffer(36160,null),n===!0&&(o.bindFramebuffer(36009,null),o.bindFramebuffer(36008,null)),o.useProgram(null),o.lineWidth(1),o.scissor(0,0,o.canvas.width,o.canvas.height),o.viewport(0,0,o.canvas.width,o.canvas.height),h={},oe=null,te={},p={},g=new WeakMap,_=[],m=null,d=!1,w=null,x=null,v=null,y=null,C=null,R=null,D=null,M=!1,T=null,W=null,Z=null,I=null,N=null,V.set(0,0,o.canvas.width,o.canvas.height),$.set(0,0,o.canvas.width,o.canvas.height),a.reset(),c.reset(),l.reset()}return{buffers:{color:a,depth:c,stencil:l},enable:F,disable:Le,bindFramebuffer:Ce,drawBuffers:se,useProgram:xe,setBlending:K,setMaterial:_e,setFlipSided:le,setCullFace:Te,setLineWidth:Ae,setPolygonOffset:Se,setScissorTest:Ie,activeTexture:Ve,bindTexture:E,unbindTexture:b,compressedTexImage2D:B,compressedTexImage3D:ne,texImage2D:ve,texImage3D:ye,updateUBOMapping:Re,uniformBlockBinding:Oe,texStorage2D:z,texStorage3D:de,texSubImage2D:ie,texSubImage3D:ce,compressedTexSubImage2D:A,compressedTexSubImage3D:Y,scissor:me,viewport:be,reset:Ze}}function z9(o,e,t,n,i,r,s){const a=i.isWebGL2,c=i.maxTextures,l=i.maxCubemapSize,u=i.maxTextureSize,f=i.maxSamples,h=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,p=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),g=new WeakMap;let _;const m=new WeakMap;let d=!1;try{d=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function w(E,b){return d?new OffscreenCanvas(E,b):S3("canvas")}function x(E,b,B,ne){let ie=1;if((E.width>ne||E.height>ne)&&(ie=ne/Math.max(E.width,E.height)),ie<1||b===!0)if(typeof HTMLImageElement<"u"&&E instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&E instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&E instanceof ImageBitmap){const ce=b?W6:Math.floor,A=ce(ie*E.width),Y=ce(ie*E.height);_===void 0&&(_=w(A,Y));const z=B?w(A,Y):_;return z.width=A,z.height=Y,z.getContext("2d").drawImage(E,0,0,A,Y),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+E.width+"x"+E.height+") to ("+A+"x"+Y+")."),z}else return"data"in E&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+E.width+"x"+E.height+")."),E;return E}function v(E){return On(E.width)&&On(E.height)}function y(E){return a?!1:E.wrapS!==Bt||E.wrapT!==Bt||E.minFilter!==vt&&E.minFilter!==Rt}function C(E,b){return E.generateMipmaps&&b&&E.minFilter!==vt&&E.minFilter!==Rt}function R(E){o.generateMipmap(E)}function D(E,b,B,ne,ie=!1){if(a===!1)return b;if(E!==null){if(o[E]!==void 0)return o[E];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+E+"'")}let ce=b;return b===6403&&(B===5126&&(ce=33326),B===5131&&(ce=33325),B===5121&&(ce=33321)),b===33319&&(B===5126&&(ce=33328),B===5131&&(ce=33327),B===5121&&(ce=33323)),b===6408&&(B===5126&&(ce=34836),B===5131&&(ce=34842),B===5121&&(ce=ne===Xe&&ie===!1?35907:32856),B===32819&&(ce=32854),B===32820&&(ce=32855)),(ce===33325||ce===33326||ce===33327||ce===33328||ce===34842||ce===34836)&&e.get("EXT_color_buffer_float"),ce}function M(E,b,B){return C(E,B)===!0||E.isFramebufferTexture&&E.minFilter!==vt&&E.minFilter!==Rt?Math.log2(Math.max(b.width,b.height))+1:E.mipmaps!==void 0&&E.mipmaps.length>0?E.mipmaps.length:E.isCompressedTexture&&Array.isArray(E.image)?b.mipmaps.length:1}function T(E){return E===vt||E===un||E===N3?9728:9729}function W(E){const b=E.target;b.removeEventListener("dispose",W),I(b),b.isVideoTexture&&g.delete(b)}function Z(E){const b=E.target;b.removeEventListener("dispose",Z),H(b)}function I(E){const b=n.get(E);if(b.__webglInit===void 0)return;const B=E.source,ne=m.get(B);if(ne){const ie=ne[b.__cacheKey];ie.usedTimes--,ie.usedTimes===0&&N(E),Object.keys(ne).length===0&&m.delete(B)}n.remove(E)}function N(E){const b=n.get(E);o.deleteTexture(b.__webglTexture);const B=E.source,ne=m.get(B);delete ne[b.__cacheKey],s.memory.textures--}function H(E){const b=E.texture,B=n.get(E),ne=n.get(b);if(ne.__webglTexture!==void 0&&(o.deleteTexture(ne.__webglTexture),s.memory.textures--),E.depthTexture&&E.depthTexture.dispose(),E.isWebGLCubeRenderTarget)for(let ie=0;ie<6;ie++)o.deleteFramebuffer(B.__webglFramebuffer[ie]),B.__webglDepthbuffer&&o.deleteRenderbuffer(B.__webglDepthbuffer[ie]);else{if(o.deleteFramebuffer(B.__webglFramebuffer),B.__webglDepthbuffer&&o.deleteRenderbuffer(B.__webglDepthbuffer),B.__webglMultisampledFramebuffer&&o.deleteFramebuffer(B.__webglMultisampledFramebuffer),B.__webglColorRenderbuffer)for(let ie=0;ie<B.__webglColorRenderbuffer.length;ie++)B.__webglColorRenderbuffer[ie]&&o.deleteRenderbuffer(B.__webglColorRenderbuffer[ie]);B.__webglDepthRenderbuffer&&o.deleteRenderbuffer(B.__webglDepthRenderbuffer)}if(E.isWebGLMultipleRenderTargets)for(let ie=0,ce=b.length;ie<ce;ie++){const A=n.get(b[ie]);A.__webglTexture&&(o.deleteTexture(A.__webglTexture),s.memory.textures--),n.remove(b[ie])}n.remove(b),n.remove(E)}let J=0;function ee(){J=0}function j(){const E=J;return E>=c&&console.warn("THREE.WebGLTextures: Trying to use "+E+" texture units while this GPU supports only "+c),J+=1,E}function oe(E){const b=[];return b.push(E.wrapS),b.push(E.wrapT),b.push(E.wrapR||0),b.push(E.magFilter),b.push(E.minFilter),b.push(E.anisotropy),b.push(E.internalFormat),b.push(E.format),b.push(E.type),b.push(E.generateMipmaps),b.push(E.premultiplyAlpha),b.push(E.flipY),b.push(E.unpackAlignment),b.push(E.encoding),b.join()}function te(E,b){const B=n.get(E);if(E.isVideoTexture&&Ie(E),E.isRenderTargetTexture===!1&&E.version>0&&B.__version!==E.version){const ne=E.image;if(ne===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(ne.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Le(B,E,b);return}}t.bindTexture(3553,B.__webglTexture,33984+b)}function Me(E,b){const B=n.get(E);if(E.version>0&&B.__version!==E.version){Le(B,E,b);return}t.bindTexture(35866,B.__webglTexture,33984+b)}function ae(E,b){const B=n.get(E);if(E.version>0&&B.__version!==E.version){Le(B,E,b);return}t.bindTexture(32879,B.__webglTexture,33984+b)}function V(E,b){const B=n.get(E);if(E.version>0&&B.__version!==E.version){Ce(B,E,b);return}t.bindTexture(34067,B.__webglTexture,33984+b)}const $={[C2]:10497,[Bt]:33071,[L2]:33648},fe={[vt]:9728,[un]:9984,[N3]:9986,[Rt]:9729,[y6]:9985,[P0]:9987};function pe(E,b,B){if(B?(o.texParameteri(E,10242,$[b.wrapS]),o.texParameteri(E,10243,$[b.wrapT]),(E===32879||E===35866)&&o.texParameteri(E,32882,$[b.wrapR]),o.texParameteri(E,10240,fe[b.magFilter]),o.texParameteri(E,10241,fe[b.minFilter])):(o.texParameteri(E,10242,33071),o.texParameteri(E,10243,33071),(E===32879||E===35866)&&o.texParameteri(E,32882,33071),(b.wrapS!==Bt||b.wrapT!==Bt)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),o.texParameteri(E,10240,T(b.magFilter)),o.texParameteri(E,10241,T(b.minFilter)),b.minFilter!==vt&&b.minFilter!==Rt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),e.has("EXT_texture_filter_anisotropic")===!0){const ne=e.get("EXT_texture_filter_anisotropic");if(b.magFilter===vt||b.minFilter!==N3&&b.minFilter!==P0||b.type===P1&&e.has("OES_texture_float_linear")===!1||a===!1&&b.type===R0&&e.has("OES_texture_half_float_linear")===!1)return;(b.anisotropy>1||n.get(b).__currentAnisotropy)&&(o.texParameterf(E,ne.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,i.getMaxAnisotropy())),n.get(b).__currentAnisotropy=b.anisotropy)}}function F(E,b){let B=!1;E.__webglInit===void 0&&(E.__webglInit=!0,b.addEventListener("dispose",W));const ne=b.source;let ie=m.get(ne);ie===void 0&&(ie={},m.set(ne,ie));const ce=oe(b);if(ce!==E.__cacheKey){ie[ce]===void 0&&(ie[ce]={texture:o.createTexture(),usedTimes:0},s.memory.textures++,B=!0),ie[ce].usedTimes++;const A=ie[E.__cacheKey];A!==void 0&&(ie[E.__cacheKey].usedTimes--,A.usedTimes===0&&N(b)),E.__cacheKey=ce,E.__webglTexture=ie[ce].texture}return B}function Le(E,b,B){let ne=3553;(b.isDataArrayTexture||b.isCompressedArrayTexture)&&(ne=35866),b.isData3DTexture&&(ne=32879);const ie=F(E,b),ce=b.source;t.bindTexture(ne,E.__webglTexture,33984+B);const A=n.get(ce);if(ce.version!==A.__version||ie===!0){t.activeTexture(33984+B),o.pixelStorei(37440,b.flipY),o.pixelStorei(37441,b.premultiplyAlpha),o.pixelStorei(3317,b.unpackAlignment),o.pixelStorei(37443,0);const Y=y(b)&&v(b.image)===!1;let z=x(b.image,Y,!1,u);z=Ve(b,z);const de=v(z)||a,ve=r.convert(b.format,b.encoding);let ye=r.convert(b.type),me=D(b.internalFormat,ve,ye,b.encoding,b.isVideoTexture);pe(ne,b,de);let be;const Re=b.mipmaps,Oe=a&&b.isVideoTexture!==!0,Ze=A.__version===void 0||ie===!0,P=M(b,z,de);if(b.isDepthTexture)me=6402,a?b.type===P1?me=36012:b.type===L1?me=33190:b.type===s0?me=35056:me=33189:b.type===P1&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),b.format===R1&&me===6402&&b.type!==n5&&b.type!==L1&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),b.type=L1,ye=r.convert(b.type)),b.format===d0&&me===6402&&(me=34041,b.type!==s0&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),b.type=s0,ye=r.convert(b.type))),Ze&&(Oe?t.texStorage2D(3553,1,me,z.width,z.height):t.texImage2D(3553,0,me,z.width,z.height,0,ve,ye,null));else if(b.isDataTexture)if(Re.length>0&&de){Oe&&Ze&&t.texStorage2D(3553,P,me,Re[0].width,Re[0].height);for(let k=0,re=Re.length;k<re;k++)be=Re[k],Oe?t.texSubImage2D(3553,k,0,0,be.width,be.height,ve,ye,be.data):t.texImage2D(3553,k,me,be.width,be.height,0,ve,ye,be.data);b.generateMipmaps=!1}else Oe?(Ze&&t.texStorage2D(3553,P,me,z.width,z.height),t.texSubImage2D(3553,0,0,0,z.width,z.height,ve,ye,z.data)):t.texImage2D(3553,0,me,z.width,z.height,0,ve,ye,z.data);else if(b.isCompressedTexture)if(b.isCompressedArrayTexture){Oe&&Ze&&t.texStorage3D(35866,P,me,Re[0].width,Re[0].height,z.depth);for(let k=0,re=Re.length;k<re;k++)be=Re[k],b.format!==Ht?ve!==null?Oe?t.compressedTexSubImage3D(35866,k,0,0,0,be.width,be.height,z.depth,ve,be.data,0,0):t.compressedTexImage3D(35866,k,me,be.width,be.height,z.depth,0,be.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Oe?t.texSubImage3D(35866,k,0,0,0,be.width,be.height,z.depth,ve,ye,be.data):t.texImage3D(35866,k,me,be.width,be.height,z.depth,0,ve,ye,be.data)}else{Oe&&Ze&&t.texStorage2D(3553,P,me,Re[0].width,Re[0].height);for(let k=0,re=Re.length;k<re;k++)be=Re[k],b.format!==Ht?ve!==null?Oe?t.compressedTexSubImage2D(3553,k,0,0,be.width,be.height,ve,be.data):t.compressedTexImage2D(3553,k,me,be.width,be.height,0,be.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Oe?t.texSubImage2D(3553,k,0,0,be.width,be.height,ve,ye,be.data):t.texImage2D(3553,k,me,be.width,be.height,0,ve,ye,be.data)}else if(b.isDataArrayTexture)Oe?(Ze&&t.texStorage3D(35866,P,me,z.width,z.height,z.depth),t.texSubImage3D(35866,0,0,0,0,z.width,z.height,z.depth,ve,ye,z.data)):t.texImage3D(35866,0,me,z.width,z.height,z.depth,0,ve,ye,z.data);else if(b.isData3DTexture)Oe?(Ze&&t.texStorage3D(32879,P,me,z.width,z.height,z.depth),t.texSubImage3D(32879,0,0,0,0,z.width,z.height,z.depth,ve,ye,z.data)):t.texImage3D(32879,0,me,z.width,z.height,z.depth,0,ve,ye,z.data);else if(b.isFramebufferTexture){if(Ze)if(Oe)t.texStorage2D(3553,P,me,z.width,z.height);else{let k=z.width,re=z.height;for(let ge=0;ge<P;ge++)t.texImage2D(3553,ge,me,k,re,0,ve,ye,null),k>>=1,re>>=1}}else if(Re.length>0&&de){Oe&&Ze&&t.texStorage2D(3553,P,me,Re[0].width,Re[0].height);for(let k=0,re=Re.length;k<re;k++)be=Re[k],Oe?t.texSubImage2D(3553,k,0,0,ve,ye,be):t.texImage2D(3553,k,me,ve,ye,be);b.generateMipmaps=!1}else Oe?(Ze&&t.texStorage2D(3553,P,me,z.width,z.height),t.texSubImage2D(3553,0,0,0,ve,ye,z)):t.texImage2D(3553,0,me,ve,ye,z);C(b,de)&&R(ne),A.__version=ce.version,b.onUpdate&&b.onUpdate(b)}E.__version=b.version}function Ce(E,b,B){if(b.image.length!==6)return;const ne=F(E,b),ie=b.source;t.bindTexture(34067,E.__webglTexture,33984+B);const ce=n.get(ie);if(ie.version!==ce.__version||ne===!0){t.activeTexture(33984+B),o.pixelStorei(37440,b.flipY),o.pixelStorei(37441,b.premultiplyAlpha),o.pixelStorei(3317,b.unpackAlignment),o.pixelStorei(37443,0);const A=b.isCompressedTexture||b.image[0].isCompressedTexture,Y=b.image[0]&&b.image[0].isDataTexture,z=[];for(let k=0;k<6;k++)!A&&!Y?z[k]=x(b.image[k],!1,!0,l):z[k]=Y?b.image[k].image:b.image[k],z[k]=Ve(b,z[k]);const de=z[0],ve=v(de)||a,ye=r.convert(b.format,b.encoding),me=r.convert(b.type),be=D(b.internalFormat,ye,me,b.encoding),Re=a&&b.isVideoTexture!==!0,Oe=ce.__version===void 0||ne===!0;let Ze=M(b,de,ve);pe(34067,b,ve);let P;if(A){Re&&Oe&&t.texStorage2D(34067,Ze,be,de.width,de.height);for(let k=0;k<6;k++){P=z[k].mipmaps;for(let re=0;re<P.length;re++){const ge=P[re];b.format!==Ht?ye!==null?Re?t.compressedTexSubImage2D(34069+k,re,0,0,ge.width,ge.height,ye,ge.data):t.compressedTexImage2D(34069+k,re,be,ge.width,ge.height,0,ge.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Re?t.texSubImage2D(34069+k,re,0,0,ge.width,ge.height,ye,me,ge.data):t.texImage2D(34069+k,re,be,ge.width,ge.height,0,ye,me,ge.data)}}}else{P=b.mipmaps,Re&&Oe&&(P.length>0&&Ze++,t.texStorage2D(34067,Ze,be,z[0].width,z[0].height));for(let k=0;k<6;k++)if(Y){Re?t.texSubImage2D(34069+k,0,0,0,z[k].width,z[k].height,ye,me,z[k].data):t.texImage2D(34069+k,0,be,z[k].width,z[k].height,0,ye,me,z[k].data);for(let re=0;re<P.length;re++){const we=P[re].image[k].image;Re?t.texSubImage2D(34069+k,re+1,0,0,we.width,we.height,ye,me,we.data):t.texImage2D(34069+k,re+1,be,we.width,we.height,0,ye,me,we.data)}}else{Re?t.texSubImage2D(34069+k,0,0,0,ye,me,z[k]):t.texImage2D(34069+k,0,be,ye,me,z[k]);for(let re=0;re<P.length;re++){const ge=P[re];Re?t.texSubImage2D(34069+k,re+1,0,0,ye,me,ge.image[k]):t.texImage2D(34069+k,re+1,be,ye,me,ge.image[k])}}}C(b,ve)&&R(34067),ce.__version=ie.version,b.onUpdate&&b.onUpdate(b)}E.__version=b.version}function se(E,b,B,ne,ie){const ce=r.convert(B.format,B.encoding),A=r.convert(B.type),Y=D(B.internalFormat,ce,A,B.encoding);n.get(b).__hasExternalTextures||(ie===32879||ie===35866?t.texImage3D(ie,0,Y,b.width,b.height,b.depth,0,ce,A,null):t.texImage2D(ie,0,Y,b.width,b.height,0,ce,A,null)),t.bindFramebuffer(36160,E),Se(b)?h.framebufferTexture2DMultisampleEXT(36160,ne,ie,n.get(B).__webglTexture,0,Ae(b)):(ie===3553||ie>=34069&&ie<=34074)&&o.framebufferTexture2D(36160,ne,ie,n.get(B).__webglTexture,0),t.bindFramebuffer(36160,null)}function xe(E,b,B){if(o.bindRenderbuffer(36161,E),b.depthBuffer&&!b.stencilBuffer){let ne=33189;if(B||Se(b)){const ie=b.depthTexture;ie&&ie.isDepthTexture&&(ie.type===P1?ne=36012:ie.type===L1&&(ne=33190));const ce=Ae(b);Se(b)?h.renderbufferStorageMultisampleEXT(36161,ce,ne,b.width,b.height):o.renderbufferStorageMultisample(36161,ce,ne,b.width,b.height)}else o.renderbufferStorage(36161,ne,b.width,b.height);o.framebufferRenderbuffer(36160,36096,36161,E)}else if(b.depthBuffer&&b.stencilBuffer){const ne=Ae(b);B&&Se(b)===!1?o.renderbufferStorageMultisample(36161,ne,35056,b.width,b.height):Se(b)?h.renderbufferStorageMultisampleEXT(36161,ne,35056,b.width,b.height):o.renderbufferStorage(36161,34041,b.width,b.height),o.framebufferRenderbuffer(36160,33306,36161,E)}else{const ne=b.isWebGLMultipleRenderTargets===!0?b.texture:[b.texture];for(let ie=0;ie<ne.length;ie++){const ce=ne[ie],A=r.convert(ce.format,ce.encoding),Y=r.convert(ce.type),z=D(ce.internalFormat,A,Y,ce.encoding),de=Ae(b);B&&Se(b)===!1?o.renderbufferStorageMultisample(36161,de,z,b.width,b.height):Se(b)?h.renderbufferStorageMultisampleEXT(36161,de,z,b.width,b.height):o.renderbufferStorage(36161,z,b.width,b.height)}}o.bindRenderbuffer(36161,null)}function Q(E,b){if(b&&b.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,E),!(b.depthTexture&&b.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(b.depthTexture).__webglTexture||b.depthTexture.image.width!==b.width||b.depthTexture.image.height!==b.height)&&(b.depthTexture.image.width=b.width,b.depthTexture.image.height=b.height,b.depthTexture.needsUpdate=!0),te(b.depthTexture,0);const ne=n.get(b.depthTexture).__webglTexture,ie=Ae(b);if(b.depthTexture.format===R1)Se(b)?h.framebufferTexture2DMultisampleEXT(36160,36096,3553,ne,0,ie):o.framebufferTexture2D(36160,36096,3553,ne,0);else if(b.depthTexture.format===d0)Se(b)?h.framebufferTexture2DMultisampleEXT(36160,33306,3553,ne,0,ie):o.framebufferTexture2D(36160,33306,3553,ne,0);else throw new Error("Unknown depthTexture format")}function q(E){const b=n.get(E),B=E.isWebGLCubeRenderTarget===!0;if(E.depthTexture&&!b.__autoAllocateDepthBuffer){if(B)throw new Error("target.depthTexture not supported in Cube render targets");Q(b.__webglFramebuffer,E)}else if(B){b.__webglDepthbuffer=[];for(let ne=0;ne<6;ne++)t.bindFramebuffer(36160,b.__webglFramebuffer[ne]),b.__webglDepthbuffer[ne]=o.createRenderbuffer(),xe(b.__webglDepthbuffer[ne],E,!1)}else t.bindFramebuffer(36160,b.__webglFramebuffer),b.__webglDepthbuffer=o.createRenderbuffer(),xe(b.__webglDepthbuffer,E,!1);t.bindFramebuffer(36160,null)}function K(E,b,B){const ne=n.get(E);b!==void 0&&se(ne.__webglFramebuffer,E,E.texture,36064,3553),B!==void 0&&q(E)}function _e(E){const b=E.texture,B=n.get(E),ne=n.get(b);E.addEventListener("dispose",Z),E.isWebGLMultipleRenderTargets!==!0&&(ne.__webglTexture===void 0&&(ne.__webglTexture=o.createTexture()),ne.__version=b.version,s.memory.textures++);const ie=E.isWebGLCubeRenderTarget===!0,ce=E.isWebGLMultipleRenderTargets===!0,A=v(E)||a;if(ie){B.__webglFramebuffer=[];for(let Y=0;Y<6;Y++)B.__webglFramebuffer[Y]=o.createFramebuffer()}else{if(B.__webglFramebuffer=o.createFramebuffer(),ce)if(i.drawBuffers){const Y=E.texture;for(let z=0,de=Y.length;z<de;z++){const ve=n.get(Y[z]);ve.__webglTexture===void 0&&(ve.__webglTexture=o.createTexture(),s.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(a&&E.samples>0&&Se(E)===!1){const Y=ce?b:[b];B.__webglMultisampledFramebuffer=o.createFramebuffer(),B.__webglColorRenderbuffer=[],t.bindFramebuffer(36160,B.__webglMultisampledFramebuffer);for(let z=0;z<Y.length;z++){const de=Y[z];B.__webglColorRenderbuffer[z]=o.createRenderbuffer(),o.bindRenderbuffer(36161,B.__webglColorRenderbuffer[z]);const ve=r.convert(de.format,de.encoding),ye=r.convert(de.type),me=D(de.internalFormat,ve,ye,de.encoding,E.isXRRenderTarget===!0),be=Ae(E);o.renderbufferStorageMultisample(36161,be,me,E.width,E.height),o.framebufferRenderbuffer(36160,36064+z,36161,B.__webglColorRenderbuffer[z])}o.bindRenderbuffer(36161,null),E.depthBuffer&&(B.__webglDepthRenderbuffer=o.createRenderbuffer(),xe(B.__webglDepthRenderbuffer,E,!0)),t.bindFramebuffer(36160,null)}}if(ie){t.bindTexture(34067,ne.__webglTexture),pe(34067,b,A);for(let Y=0;Y<6;Y++)se(B.__webglFramebuffer[Y],E,b,36064,34069+Y);C(b,A)&&R(34067),t.unbindTexture()}else if(ce){const Y=E.texture;for(let z=0,de=Y.length;z<de;z++){const ve=Y[z],ye=n.get(ve);t.bindTexture(3553,ye.__webglTexture),pe(3553,ve,A),se(B.__webglFramebuffer,E,ve,36064+z,3553),C(ve,A)&&R(3553)}t.unbindTexture()}else{let Y=3553;(E.isWebGL3DRenderTarget||E.isWebGLArrayRenderTarget)&&(a?Y=E.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(Y,ne.__webglTexture),pe(Y,b,A),se(B.__webglFramebuffer,E,b,36064,Y),C(b,A)&&R(Y),t.unbindTexture()}E.depthBuffer&&q(E)}function le(E){const b=v(E)||a,B=E.isWebGLMultipleRenderTargets===!0?E.texture:[E.texture];for(let ne=0,ie=B.length;ne<ie;ne++){const ce=B[ne];if(C(ce,b)){const A=E.isWebGLCubeRenderTarget?34067:3553,Y=n.get(ce).__webglTexture;t.bindTexture(A,Y),R(A),t.unbindTexture()}}}function Te(E){if(a&&E.samples>0&&Se(E)===!1){const b=E.isWebGLMultipleRenderTargets?E.texture:[E.texture],B=E.width,ne=E.height;let ie=16384;const ce=[],A=E.stencilBuffer?33306:36096,Y=n.get(E),z=E.isWebGLMultipleRenderTargets===!0;if(z)for(let de=0;de<b.length;de++)t.bindFramebuffer(36160,Y.__webglMultisampledFramebuffer),o.framebufferRenderbuffer(36160,36064+de,36161,null),t.bindFramebuffer(36160,Y.__webglFramebuffer),o.framebufferTexture2D(36009,36064+de,3553,null,0);t.bindFramebuffer(36008,Y.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,Y.__webglFramebuffer);for(let de=0;de<b.length;de++){ce.push(36064+de),E.depthBuffer&&ce.push(A);const ve=Y.__ignoreDepthValues!==void 0?Y.__ignoreDepthValues:!1;if(ve===!1&&(E.depthBuffer&&(ie|=256),E.stencilBuffer&&(ie|=1024)),z&&o.framebufferRenderbuffer(36008,36064,36161,Y.__webglColorRenderbuffer[de]),ve===!0&&(o.invalidateFramebuffer(36008,[A]),o.invalidateFramebuffer(36009,[A])),z){const ye=n.get(b[de]).__webglTexture;o.framebufferTexture2D(36009,36064,3553,ye,0)}o.blitFramebuffer(0,0,B,ne,0,0,B,ne,ie,9728),p&&o.invalidateFramebuffer(36008,ce)}if(t.bindFramebuffer(36008,null),t.bindFramebuffer(36009,null),z)for(let de=0;de<b.length;de++){t.bindFramebuffer(36160,Y.__webglMultisampledFramebuffer),o.framebufferRenderbuffer(36160,36064+de,36161,Y.__webglColorRenderbuffer[de]);const ve=n.get(b[de]).__webglTexture;t.bindFramebuffer(36160,Y.__webglFramebuffer),o.framebufferTexture2D(36009,36064+de,3553,ve,0)}t.bindFramebuffer(36009,Y.__webglMultisampledFramebuffer)}}function Ae(E){return Math.min(f,E.samples)}function Se(E){const b=n.get(E);return a&&E.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&b.__useRenderToTexture!==!1}function Ie(E){const b=s.render.frame;g.get(E)!==b&&(g.set(E,b),E.update())}function Ve(E,b){const B=E.encoding,ne=E.format,ie=E.type;return E.isCompressedTexture===!0||E.isVideoTexture===!0||E.format===P2||B!==I1&&(B===Xe?a===!1?e.has("EXT_sRGB")===!0&&ne===Ht?(E.format=P2,E.minFilter=Rt,E.generateMipmaps=!1):b=o5.sRGBToLinear(b):(ne!==Ht||ie!==D1)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",B)),b}this.allocateTextureUnit=j,this.resetTextureUnits=ee,this.setTexture2D=te,this.setTexture2DArray=Me,this.setTexture3D=ae,this.setTextureCube=V,this.rebindTextures=K,this.setupRenderTarget=_e,this.updateRenderTargetMipmap=le,this.updateMultisampleRenderTarget=Te,this.setupDepthRenderbuffer=q,this.setupFrameBufferTexture=se,this.useMultisampledRTT=Se}function B9(o,e,t){const n=t.isWebGL2;function i(r,s=null){let a;if(r===D1)return 5121;if(r===T6)return 32819;if(r===A6)return 32820;if(r===S6)return 5120;if(r===w6)return 5122;if(r===n5)return 5123;if(r===E6)return 5124;if(r===L1)return 5125;if(r===P1)return 5126;if(r===R0)return n?5131:(a=e.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(r===C6)return 6406;if(r===Ht)return 6408;if(r===L6)return 6409;if(r===P6)return 6410;if(r===R1)return 6402;if(r===d0)return 34041;if(r===P2)return a=e.get("EXT_sRGB"),a!==null?a.SRGB_ALPHA_EXT:null;if(r===R6)return 6403;if(r===D6)return 36244;if(r===I6)return 33319;if(r===U6)return 33320;if(r===N6)return 36249;if(r===O3||r===F3||r===z3||r===B3)if(s===Xe)if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(r===O3)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(r===F3)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(r===z3)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(r===B3)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(r===O3)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===F3)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===z3)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===B3)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(r===hn||r===fn||r===dn||r===pn)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(r===hn)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===fn)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===dn)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===pn)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(r===O6)return a=e.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(r===mn||r===gn)if(a=e.get("WEBGL_compressed_texture_etc"),a!==null){if(r===mn)return s===Xe?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(r===gn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(r===_n||r===vn||r===xn||r===bn||r===Mn||r===yn||r===Sn||r===wn||r===En||r===Tn||r===An||r===Cn||r===Ln||r===Pn)if(a=e.get("WEBGL_compressed_texture_astc"),a!==null){if(r===_n)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(r===vn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(r===xn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(r===bn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(r===Mn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(r===yn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(r===Sn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(r===wn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(r===En)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(r===Tn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(r===An)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(r===Cn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(r===Ln)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(r===Pn)return s===Xe?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(r===H3)if(a=e.get("EXT_texture_compression_bptc"),a!==null){if(r===H3)return s===Xe?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(r===F6||r===Rn||r===Dn||r===In)if(a=e.get("EXT_texture_compression_rgtc"),a!==null){if(r===H3)return a.COMPRESSED_RED_RGTC1_EXT;if(r===Rn)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(r===Dn)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(r===In)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return r===s0?n?34042:(a=e.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null):o[r]!==void 0?o[r]:null}return{convert:i}}class H9 extends Dt{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class r0 extends Mt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const V9={type:"move"};class c2{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new r0,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new r0,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new L,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new L),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new r0,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new L,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new L),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,r=null,s=null;const a=this._targetRay,c=this._grip,l=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(l&&e.hand){s=!0;for(const _ of e.hand.values()){const m=t.getJointPose(_,n),d=this._getHandJoint(l,_);m!==null&&(d.matrix.fromArray(m.transform.matrix),d.matrix.decompose(d.position,d.rotation,d.scale),d.jointRadius=m.radius),d.visible=m!==null}const u=l.joints["index-finger-tip"],f=l.joints["thumb-tip"],h=u.position.distanceTo(f.position),p=.02,g=.005;l.inputState.pinching&&h>p+g?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&h<=p-g&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else c!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),r!==null&&(c.matrix.fromArray(r.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),r.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(r.linearVelocity)):c.hasLinearVelocity=!1,r.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(r.angularVelocity)):c.hasAngularVelocity=!1));a!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&r!==null&&(i=r),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(V9)))}return a!==null&&(a.visible=i!==null),c!==null&&(c.visible=r!==null),l!==null&&(l.visible=s!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new r0;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}class G9 extends Ct{constructor(e,t,n,i,r,s,a,c,l,u){if(u=u!==void 0?u:R1,u!==R1&&u!==d0)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&u===R1&&(n=L1),n===void 0&&u===d0&&(n=s0),super(null,i,r,s,a,c,u,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=a!==void 0?a:vt,this.minFilter=c!==void 0?c:vt,this.flipY=!1,this.generateMipmaps=!1}}class k9 extends F1{constructor(e,t){super();const n=this;let i=null,r=1,s=null,a="local-floor",c=1,l=null,u=null,f=null,h=null,p=null,g=null;const _=t.getContextAttributes();let m=null,d=null;const w=[],x=[],v=new Set,y=new Map,C=new Dt;C.layers.enable(1),C.viewport=new ct;const R=new Dt;R.layers.enable(2),R.viewport=new ct;const D=[C,R],M=new H9;M.layers.enable(1),M.layers.enable(2);let T=null,W=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(V){let $=w[V];return $===void 0&&($=new c2,w[V]=$),$.getTargetRaySpace()},this.getControllerGrip=function(V){let $=w[V];return $===void 0&&($=new c2,w[V]=$),$.getGripSpace()},this.getHand=function(V){let $=w[V];return $===void 0&&($=new c2,w[V]=$),$.getHandSpace()};function Z(V){const $=x.indexOf(V.inputSource);if($===-1)return;const fe=w[$];fe!==void 0&&fe.dispatchEvent({type:V.type,data:V.inputSource})}function I(){i.removeEventListener("select",Z),i.removeEventListener("selectstart",Z),i.removeEventListener("selectend",Z),i.removeEventListener("squeeze",Z),i.removeEventListener("squeezestart",Z),i.removeEventListener("squeezeend",Z),i.removeEventListener("end",I),i.removeEventListener("inputsourceschange",N);for(let V=0;V<w.length;V++){const $=x[V];$!==null&&(x[V]=null,w[V].disconnect($))}T=null,W=null,e.setRenderTarget(m),p=null,h=null,f=null,i=null,d=null,ae.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(V){r=V,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(V){a=V,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||s},this.setReferenceSpace=function(V){l=V},this.getBaseLayer=function(){return h!==null?h:p},this.getBinding=function(){return f},this.getFrame=function(){return g},this.getSession=function(){return i},this.setSession=async function(V){if(i=V,i!==null){if(m=e.getRenderTarget(),i.addEventListener("select",Z),i.addEventListener("selectstart",Z),i.addEventListener("selectend",Z),i.addEventListener("squeeze",Z),i.addEventListener("squeezestart",Z),i.addEventListener("squeezeend",Z),i.addEventListener("end",I),i.addEventListener("inputsourceschange",N),_.xrCompatible!==!0&&await t.makeXRCompatible(),i.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const $={antialias:i.renderState.layers===void 0?_.antialias:!0,alpha:_.alpha,depth:_.depth,stencil:_.stencil,framebufferScaleFactor:r};p=new XRWebGLLayer(i,t,$),i.updateRenderState({baseLayer:p}),d=new U1(p.framebufferWidth,p.framebufferHeight,{format:Ht,type:D1,encoding:e.outputEncoding,stencilBuffer:_.stencil})}else{let $=null,fe=null,pe=null;_.depth&&(pe=_.stencil?35056:33190,$=_.stencil?d0:R1,fe=_.stencil?s0:L1);const F={colorFormat:32856,depthFormat:pe,scaleFactor:r};f=new XRWebGLBinding(i,t),h=f.createProjectionLayer(F),i.updateRenderState({layers:[h]}),d=new U1(h.textureWidth,h.textureHeight,{format:Ht,type:D1,depthTexture:new G9(h.textureWidth,h.textureHeight,fe,void 0,void 0,void 0,void 0,void 0,void 0,$),stencilBuffer:_.stencil,encoding:e.outputEncoding,samples:_.antialias?4:0});const Le=e.properties.get(d);Le.__ignoreDepthValues=h.ignoreDepthValues}d.isXRRenderTarget=!0,this.setFoveation(c),l=null,s=await i.requestReferenceSpace(a),ae.setContext(i),ae.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};function N(V){for(let $=0;$<V.removed.length;$++){const fe=V.removed[$],pe=x.indexOf(fe);pe>=0&&(x[pe]=null,w[pe].disconnect(fe))}for(let $=0;$<V.added.length;$++){const fe=V.added[$];let pe=x.indexOf(fe);if(pe===-1){for(let Le=0;Le<w.length;Le++)if(Le>=x.length){x.push(fe),pe=Le;break}else if(x[Le]===null){x[Le]=fe,pe=Le;break}if(pe===-1)break}const F=w[pe];F&&F.connect(fe)}}const H=new L,J=new L;function ee(V,$,fe){H.setFromMatrixPosition($.matrixWorld),J.setFromMatrixPosition(fe.matrixWorld);const pe=H.distanceTo(J),F=$.projectionMatrix.elements,Le=fe.projectionMatrix.elements,Ce=F[14]/(F[10]-1),se=F[14]/(F[10]+1),xe=(F[9]+1)/F[5],Q=(F[9]-1)/F[5],q=(F[8]-1)/F[0],K=(Le[8]+1)/Le[0],_e=Ce*q,le=Ce*K,Te=pe/(-q+K),Ae=Te*-q;$.matrixWorld.decompose(V.position,V.quaternion,V.scale),V.translateX(Ae),V.translateZ(Te),V.matrixWorld.compose(V.position,V.quaternion,V.scale),V.matrixWorldInverse.copy(V.matrixWorld).invert();const Se=Ce+Te,Ie=se+Te,Ve=_e-Ae,E=le+(pe-Ae),b=xe*se/Ie*Se,B=Q*se/Ie*Se;V.projectionMatrix.makePerspective(Ve,E,b,B,Se,Ie),V.projectionMatrixInverse.copy(V.projectionMatrix).invert()}function j(V,$){$===null?V.matrixWorld.copy(V.matrix):V.matrixWorld.multiplyMatrices($.matrixWorld,V.matrix),V.matrixWorldInverse.copy(V.matrixWorld).invert()}this.updateCamera=function(V){if(i===null)return;M.near=R.near=C.near=V.near,M.far=R.far=C.far=V.far,(T!==M.near||W!==M.far)&&(i.updateRenderState({depthNear:M.near,depthFar:M.far}),T=M.near,W=M.far);const $=V.parent,fe=M.cameras;j(M,$);for(let pe=0;pe<fe.length;pe++)j(fe[pe],$);fe.length===2?ee(M,C,R):M.projectionMatrix.copy(C.projectionMatrix),oe(V,M,$)};function oe(V,$,fe){fe===null?V.matrix.copy($.matrixWorld):(V.matrix.copy(fe.matrixWorld),V.matrix.invert(),V.matrix.multiply($.matrixWorld)),V.matrix.decompose(V.position,V.quaternion,V.scale),V.updateMatrixWorld(!0);const pe=V.children;for(let F=0,Le=pe.length;F<Le;F++)pe[F].updateMatrixWorld(!0);V.projectionMatrix.copy($.projectionMatrix),V.projectionMatrixInverse.copy($.projectionMatrixInverse),V.isPerspectiveCamera&&(V.fov=R2*2*Math.atan(1/V.projectionMatrix.elements[5]),V.zoom=1)}this.getCamera=function(){return M},this.getFoveation=function(){if(!(h===null&&p===null))return c},this.setFoveation=function(V){c=V,h!==null&&(h.fixedFoveation=V),p!==null&&p.fixedFoveation!==void 0&&(p.fixedFoveation=V)},this.getPlanes=function(){return v};let te=null;function Me(V,$){if(u=$.getViewerPose(l||s),g=$,u!==null){const fe=u.views;p!==null&&(e.setRenderTargetFramebuffer(d,p.framebuffer),e.setRenderTarget(d));let pe=!1;fe.length!==M.cameras.length&&(M.cameras.length=0,pe=!0);for(let F=0;F<fe.length;F++){const Le=fe[F];let Ce=null;if(p!==null)Ce=p.getViewport(Le);else{const xe=f.getViewSubImage(h,Le);Ce=xe.viewport,F===0&&(e.setRenderTargetTextures(d,xe.colorTexture,h.ignoreDepthValues?void 0:xe.depthStencilTexture),e.setRenderTarget(d))}let se=D[F];se===void 0&&(se=new Dt,se.layers.enable(F),se.viewport=new ct,D[F]=se),se.matrix.fromArray(Le.transform.matrix),se.matrix.decompose(se.position,se.quaternion,se.scale),se.projectionMatrix.fromArray(Le.projectionMatrix),se.projectionMatrixInverse.copy(se.projectionMatrix).invert(),se.viewport.set(Ce.x,Ce.y,Ce.width,Ce.height),F===0&&(M.matrix.copy(se.matrix),M.matrix.decompose(M.position,M.quaternion,M.scale)),pe===!0&&M.cameras.push(se)}}for(let fe=0;fe<w.length;fe++){const pe=x[fe],F=w[fe];pe!==null&&F!==void 0&&F.update(pe,$,l||s)}if(te&&te(V,$),$.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:$.detectedPlanes});let fe=null;for(const pe of v)$.detectedPlanes.has(pe)||(fe===null&&(fe=[]),fe.push(pe));if(fe!==null)for(const pe of fe)v.delete(pe),y.delete(pe),n.dispatchEvent({type:"planeremoved",data:pe});for(const pe of $.detectedPlanes)if(!v.has(pe))v.add(pe),y.set(pe,$.lastChangedTime),n.dispatchEvent({type:"planeadded",data:pe});else{const F=y.get(pe);pe.lastChangedTime>F&&(y.set(pe,pe.lastChangedTime),n.dispatchEvent({type:"planechanged",data:pe}))}}g=null}const ae=new m5;ae.setAnimationLoop(Me),this.setAnimationLoop=function(V){te=V},this.dispose=function(){}}}function W9(o,e){function t(m,d){m.matrixAutoUpdate===!0&&m.updateMatrix(),d.value.copy(m.matrix)}function n(m,d){d.color.getRGB(m.fogColor.value,h5(o)),d.isFog?(m.fogNear.value=d.near,m.fogFar.value=d.far):d.isFogExp2&&(m.fogDensity.value=d.density)}function i(m,d,w,x,v){d.isMeshBasicMaterial||d.isMeshLambertMaterial?r(m,d):d.isMeshToonMaterial?(r(m,d),f(m,d)):d.isMeshPhongMaterial?(r(m,d),u(m,d)):d.isMeshStandardMaterial?(r(m,d),h(m,d),d.isMeshPhysicalMaterial&&p(m,d,v)):d.isMeshMatcapMaterial?(r(m,d),g(m,d)):d.isMeshDepthMaterial?r(m,d):d.isMeshDistanceMaterial?(r(m,d),_(m,d)):d.isMeshNormalMaterial?r(m,d):d.isLineBasicMaterial?(s(m,d),d.isLineDashedMaterial&&a(m,d)):d.isPointsMaterial?c(m,d,w,x):d.isSpriteMaterial?l(m,d):d.isShadowMaterial?(m.color.value.copy(d.color),m.opacity.value=d.opacity):d.isShaderMaterial&&(d.uniformsNeedUpdate=!1)}function r(m,d){m.opacity.value=d.opacity,d.color&&m.diffuse.value.copy(d.color),d.emissive&&m.emissive.value.copy(d.emissive).multiplyScalar(d.emissiveIntensity),d.map&&(m.map.value=d.map,t(d.map,m.mapTransform)),d.alphaMap&&(m.alphaMap.value=d.alphaMap,t(d.alphaMap,m.alphaMapTransform)),d.bumpMap&&(m.bumpMap.value=d.bumpMap,t(d.bumpMap,m.bumpMapTransform),m.bumpScale.value=d.bumpScale,d.side===bt&&(m.bumpScale.value*=-1)),d.normalMap&&(m.normalMap.value=d.normalMap,t(d.normalMap,m.normalMapTransform),m.normalScale.value.copy(d.normalScale),d.side===bt&&m.normalScale.value.negate()),d.displacementMap&&(m.displacementMap.value=d.displacementMap,t(d.displacementMap,m.displacementMapTransform),m.displacementScale.value=d.displacementScale,m.displacementBias.value=d.displacementBias),d.emissiveMap&&(m.emissiveMap.value=d.emissiveMap,t(d.emissiveMap,m.emissiveMapTransform)),d.specularMap&&(m.specularMap.value=d.specularMap,t(d.specularMap,m.specularMapTransform)),d.alphaTest>0&&(m.alphaTest.value=d.alphaTest);const w=e.get(d).envMap;if(w&&(m.envMap.value=w,m.flipEnvMap.value=w.isCubeTexture&&w.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=d.reflectivity,m.ior.value=d.ior,m.refractionRatio.value=d.refractionRatio),d.lightMap){m.lightMap.value=d.lightMap;const x=o.useLegacyLights===!0?Math.PI:1;m.lightMapIntensity.value=d.lightMapIntensity*x,t(d.lightMap,m.lightMapTransform)}d.aoMap&&(m.aoMap.value=d.aoMap,m.aoMapIntensity.value=d.aoMapIntensity,t(d.aoMap,m.aoMapTransform))}function s(m,d){m.diffuse.value.copy(d.color),m.opacity.value=d.opacity,d.map&&(m.map.value=d.map,t(d.map,m.mapTransform))}function a(m,d){m.dashSize.value=d.dashSize,m.totalSize.value=d.dashSize+d.gapSize,m.scale.value=d.scale}function c(m,d,w,x){m.diffuse.value.copy(d.color),m.opacity.value=d.opacity,m.size.value=d.size*w,m.scale.value=x*.5,d.map&&(m.map.value=d.map,t(d.map,m.uvTransform)),d.alphaMap&&(m.alphaMap.value=d.alphaMap),d.alphaTest>0&&(m.alphaTest.value=d.alphaTest)}function l(m,d){m.diffuse.value.copy(d.color),m.opacity.value=d.opacity,m.rotation.value=d.rotation,d.map&&(m.map.value=d.map,t(d.map,m.mapTransform)),d.alphaMap&&(m.alphaMap.value=d.alphaMap),d.alphaTest>0&&(m.alphaTest.value=d.alphaTest)}function u(m,d){m.specular.value.copy(d.specular),m.shininess.value=Math.max(d.shininess,1e-4)}function f(m,d){d.gradientMap&&(m.gradientMap.value=d.gradientMap)}function h(m,d){m.metalness.value=d.metalness,d.metalnessMap&&(m.metalnessMap.value=d.metalnessMap,t(d.metalnessMap,m.metalnessMapTransform)),m.roughness.value=d.roughness,d.roughnessMap&&(m.roughnessMap.value=d.roughnessMap,t(d.roughnessMap,m.roughnessMapTransform)),e.get(d).envMap&&(m.envMapIntensity.value=d.envMapIntensity)}function p(m,d,w){m.ior.value=d.ior,d.sheen>0&&(m.sheenColor.value.copy(d.sheenColor).multiplyScalar(d.sheen),m.sheenRoughness.value=d.sheenRoughness,d.sheenColorMap&&(m.sheenColorMap.value=d.sheenColorMap,t(d.sheenColorMap,m.sheenColorMapTransform)),d.sheenRoughnessMap&&(m.sheenRoughnessMap.value=d.sheenRoughnessMap,t(d.sheenRoughnessMap,m.sheenRoughnessMapTransform))),d.clearcoat>0&&(m.clearcoat.value=d.clearcoat,m.clearcoatRoughness.value=d.clearcoatRoughness,d.clearcoatMap&&(m.clearcoatMap.value=d.clearcoatMap,t(d.clearcoatMap,m.clearcoatMapTransform)),d.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=d.clearcoatRoughnessMap,t(d.clearcoatRoughnessMap,m.clearcoatRoughnessMapTransform)),d.clearcoatNormalMap&&(m.clearcoatNormalMap.value=d.clearcoatNormalMap,t(d.clearcoatNormalMap,m.clearcoatNormalMapTransform),m.clearcoatNormalScale.value.copy(d.clearcoatNormalScale),d.side===bt&&m.clearcoatNormalScale.value.negate())),d.iridescence>0&&(m.iridescence.value=d.iridescence,m.iridescenceIOR.value=d.iridescenceIOR,m.iridescenceThicknessMinimum.value=d.iridescenceThicknessRange[0],m.iridescenceThicknessMaximum.value=d.iridescenceThicknessRange[1],d.iridescenceMap&&(m.iridescenceMap.value=d.iridescenceMap,t(d.iridescenceMap,m.iridescenceMapTransform)),d.iridescenceThicknessMap&&(m.iridescenceThicknessMap.value=d.iridescenceThicknessMap,t(d.iridescenceThicknessMap,m.iridescenceThicknessMapTransform))),d.transmission>0&&(m.transmission.value=d.transmission,m.transmissionSamplerMap.value=w.texture,m.transmissionSamplerSize.value.set(w.width,w.height),d.transmissionMap&&(m.transmissionMap.value=d.transmissionMap,t(d.transmissionMap,m.transmissionMapTransform)),m.thickness.value=d.thickness,d.thicknessMap&&(m.thicknessMap.value=d.thicknessMap,t(d.thicknessMap,m.thicknessMapTransform)),m.attenuationDistance.value=d.attenuationDistance,m.attenuationColor.value.copy(d.attenuationColor)),m.specularIntensity.value=d.specularIntensity,m.specularColor.value.copy(d.specularColor),d.specularColorMap&&(m.specularColorMap.value=d.specularColorMap,t(d.specularColorMap,m.specularColorMapTransform)),d.specularIntensityMap&&(m.specularIntensityMap.value=d.specularIntensityMap,t(d.specularIntensityMap,m.specularIntensityMapTransform))}function g(m,d){d.matcap&&(m.matcap.value=d.matcap)}function _(m,d){const w=e.get(d).light;m.referencePosition.value.setFromMatrixPosition(w.matrixWorld),m.nearDistance.value=w.shadow.camera.near,m.farDistance.value=w.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function q9(o,e,t,n){let i={},r={},s=[];const a=t.isWebGL2?o.getParameter(35375):0;function c(w,x){const v=x.program;n.uniformBlockBinding(w,v)}function l(w,x){let v=i[w.id];v===void 0&&(g(w),v=u(w),i[w.id]=v,w.addEventListener("dispose",m));const y=x.program;n.updateUBOMapping(w,y);const C=e.render.frame;r[w.id]!==C&&(h(w),r[w.id]=C)}function u(w){const x=f();w.__bindingPointIndex=x;const v=o.createBuffer(),y=w.__size,C=w.usage;return o.bindBuffer(35345,v),o.bufferData(35345,y,C),o.bindBuffer(35345,null),o.bindBufferBase(35345,x,v),v}function f(){for(let w=0;w<a;w++)if(s.indexOf(w)===-1)return s.push(w),w;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function h(w){const x=i[w.id],v=w.uniforms,y=w.__cache;o.bindBuffer(35345,x);for(let C=0,R=v.length;C<R;C++){const D=v[C];if(p(D,C,y)===!0){const M=D.__offset,T=Array.isArray(D.value)?D.value:[D.value];let W=0;for(let Z=0;Z<T.length;Z++){const I=T[Z],N=_(I);typeof I=="number"?(D.__data[0]=I,o.bufferSubData(35345,M+W,D.__data)):I.isMatrix3?(D.__data[0]=I.elements[0],D.__data[1]=I.elements[1],D.__data[2]=I.elements[2],D.__data[3]=I.elements[0],D.__data[4]=I.elements[3],D.__data[5]=I.elements[4],D.__data[6]=I.elements[5],D.__data[7]=I.elements[0],D.__data[8]=I.elements[6],D.__data[9]=I.elements[7],D.__data[10]=I.elements[8],D.__data[11]=I.elements[0]):(I.toArray(D.__data,W),W+=N.storage/Float32Array.BYTES_PER_ELEMENT)}o.bufferSubData(35345,M,D.__data)}}o.bindBuffer(35345,null)}function p(w,x,v){const y=w.value;if(v[x]===void 0){if(typeof y=="number")v[x]=y;else{const C=Array.isArray(y)?y:[y],R=[];for(let D=0;D<C.length;D++)R.push(C[D].clone());v[x]=R}return!0}else if(typeof y=="number"){if(v[x]!==y)return v[x]=y,!0}else{const C=Array.isArray(v[x])?v[x]:[v[x]],R=Array.isArray(y)?y:[y];for(let D=0;D<C.length;D++){const M=C[D];if(M.equals(R[D])===!1)return M.copy(R[D]),!0}}return!1}function g(w){const x=w.uniforms;let v=0;const y=16;let C=0;for(let R=0,D=x.length;R<D;R++){const M=x[R],T={boundary:0,storage:0},W=Array.isArray(M.value)?M.value:[M.value];for(let Z=0,I=W.length;Z<I;Z++){const N=W[Z],H=_(N);T.boundary+=H.boundary,T.storage+=H.storage}if(M.__data=new Float32Array(T.storage/Float32Array.BYTES_PER_ELEMENT),M.__offset=v,R>0){C=v%y;const Z=y-C;C!==0&&Z-T.boundary<0&&(v+=y-C,M.__offset=v)}v+=T.storage}return C=v%y,C>0&&(v+=y-C),w.__size=v,w.__cache={},this}function _(w){const x={boundary:0,storage:0};return typeof w=="number"?(x.boundary=4,x.storage=4):w.isVector2?(x.boundary=8,x.storage=8):w.isVector3||w.isColor?(x.boundary=16,x.storage=12):w.isVector4?(x.boundary=16,x.storage=16):w.isMatrix3?(x.boundary=48,x.storage=48):w.isMatrix4?(x.boundary=64,x.storage=64):w.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",w),x}function m(w){const x=w.target;x.removeEventListener("dispose",m);const v=s.indexOf(x.__bindingPointIndex);s.splice(v,1),o.deleteBuffer(i[x.id]),delete i[x.id],delete r[x.id]}function d(){for(const w in i)o.deleteBuffer(i[w]);s=[],i={},r={}}return{bind:c,update:l,dispose:d}}function X9(){const o=S3("canvas");return o.style.display="block",o}class b5{constructor(e={}){const{canvas:t=X9(),context:n=null,depth:i=!0,stencil:r=!0,alpha:s=!1,antialias:a=!1,premultipliedAlpha:c=!0,preserveDrawingBuffer:l=!1,powerPreference:u="default",failIfMajorPerformanceCaveat:f=!1}=e;this.isWebGLRenderer=!0;let h;n!==null?h=n.getContextAttributes().alpha:h=s;let p=null,g=null;const _=[],m=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=I1,this.useLegacyLights=!0,this.toneMapping=c1,this.toneMappingExposure=1;const d=this;let w=!1,x=0,v=0,y=null,C=-1,R=null;const D=new ct,M=new ct;let T=null,W=t.width,Z=t.height,I=1,N=null,H=null;const J=new ct(0,0,W,Z),ee=new ct(0,0,W,Z);let j=!1;const oe=new p5;let te=!1,Me=!1,ae=null;const V=new et,$=new L,fe={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function pe(){return y===null?I:1}let F=n;function Le(S,O){for(let G=0;G<S.length;G++){const U=S[G],X=t.getContext(U,O);if(X!==null)return X}return null}try{const S={alpha:!0,depth:i,stencil:r,antialias:a,premultipliedAlpha:c,preserveDrawingBuffer:l,powerPreference:u,failIfMajorPerformanceCaveat:f};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${B2}`),t.addEventListener("webglcontextlost",be,!1),t.addEventListener("webglcontextrestored",Re,!1),t.addEventListener("webglcontextcreationerror",Oe,!1),F===null){const O=["webgl2","webgl","experimental-webgl"];if(d.isWebGL1Renderer===!0&&O.shift(),F=Le(O,S),F===null)throw Le(O)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}F.getShaderPrecisionFormat===void 0&&(F.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(S){throw console.error("THREE.WebGLRenderer: "+S.message),S}let Ce,se,xe,Q,q,K,_e,le,Te,Ae,Se,Ie,Ve,E,b,B,ne,ie,ce,A,Y,z,de,ve;function ye(){Ce=new ir(F),se=new $i(F,Ce,e),Ce.init(se),z=new B9(F,Ce,se),xe=new F9(F,Ce,se),Q=new ar,q=new S9,K=new z9(F,Ce,xe,q,se,z,Q),_e=new Ki(d),le=new nr(d),Te=new _7(F,se),de=new ji(F,Ce,Te,se),Ae=new rr(F,Te,Q,de),Se=new ur(F,Ae,Te,Q),ce=new cr(F,se,K),B=new Ji(q),Ie=new y9(d,_e,le,Ce,se,de,B),Ve=new W9(d,q),E=new E9,b=new R9(Ce,se),ie=new Yi(d,_e,le,xe,Se,h,c),ne=new O9(d,Se,se),ve=new q9(F,Q,se,xe),A=new Zi(F,Ce,Q,se),Y=new or(F,Ce,Q,se),Q.programs=Ie.programs,d.capabilities=se,d.extensions=Ce,d.properties=q,d.renderLists=E,d.shadowMap=ne,d.state=xe,d.info=Q}ye();const me=new k9(d,F);this.xr=me,this.getContext=function(){return F},this.getContextAttributes=function(){return F.getContextAttributes()},this.forceContextLoss=function(){const S=Ce.get("WEBGL_lose_context");S&&S.loseContext()},this.forceContextRestore=function(){const S=Ce.get("WEBGL_lose_context");S&&S.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(S){S!==void 0&&(I=S,this.setSize(W,Z,!1))},this.getSize=function(S){return S.set(W,Z)},this.setSize=function(S,O,G=!0){if(me.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}W=S,Z=O,t.width=Math.floor(S*I),t.height=Math.floor(O*I),G===!0&&(t.style.width=S+"px",t.style.height=O+"px"),this.setViewport(0,0,S,O)},this.getDrawingBufferSize=function(S){return S.set(W*I,Z*I).floor()},this.setDrawingBufferSize=function(S,O,G){W=S,Z=O,I=G,t.width=Math.floor(S*G),t.height=Math.floor(O*G),this.setViewport(0,0,S,O)},this.getCurrentViewport=function(S){return S.copy(D)},this.getViewport=function(S){return S.copy(J)},this.setViewport=function(S,O,G,U){S.isVector4?J.set(S.x,S.y,S.z,S.w):J.set(S,O,G,U),xe.viewport(D.copy(J).multiplyScalar(I).floor())},this.getScissor=function(S){return S.copy(ee)},this.setScissor=function(S,O,G,U){S.isVector4?ee.set(S.x,S.y,S.z,S.w):ee.set(S,O,G,U),xe.scissor(M.copy(ee).multiplyScalar(I).floor())},this.getScissorTest=function(){return j},this.setScissorTest=function(S){xe.setScissorTest(j=S)},this.setOpaqueSort=function(S){N=S},this.setTransparentSort=function(S){H=S},this.getClearColor=function(S){return S.copy(ie.getClearColor())},this.setClearColor=function(){ie.setClearColor.apply(ie,arguments)},this.getClearAlpha=function(){return ie.getClearAlpha()},this.setClearAlpha=function(){ie.setClearAlpha.apply(ie,arguments)},this.clear=function(S=!0,O=!0,G=!0){let U=0;S&&(U|=16384),O&&(U|=256),G&&(U|=1024),F.clear(U)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",be,!1),t.removeEventListener("webglcontextrestored",Re,!1),t.removeEventListener("webglcontextcreationerror",Oe,!1),E.dispose(),b.dispose(),q.dispose(),_e.dispose(),le.dispose(),Se.dispose(),de.dispose(),ve.dispose(),Ie.dispose(),me.dispose(),me.removeEventListener("sessionstart",we),me.removeEventListener("sessionend",qe),ae&&(ae.dispose(),ae=null),Ye.stop()};function be(S){S.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),w=!0}function Re(){console.log("THREE.WebGLRenderer: Context Restored."),w=!1;const S=Q.autoReset,O=ne.enabled,G=ne.autoUpdate,U=ne.needsUpdate,X=ne.type;ye(),Q.autoReset=S,ne.enabled=O,ne.autoUpdate=G,ne.needsUpdate=U,ne.type=X}function Oe(S){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",S.statusMessage)}function Ze(S){const O=S.target;O.removeEventListener("dispose",Ze),P(O)}function P(S){k(S),q.remove(S)}function k(S){const O=q.get(S).programs;O!==void 0&&(O.forEach(function(G){Ie.releaseProgram(G)}),S.isShaderMaterial&&Ie.releaseShaderCache(S))}this.renderBufferDirect=function(S,O,G,U,X,Ee){O===null&&(O=fe);const Pe=X.isMesh&&X.matrixWorld.determinant()<0,De=k5(S,O,G,U,X);xe.setMaterial(U,Pe);let Ue=G.index,Fe=1;U.wireframe===!0&&(Ue=Ae.getWireframeAttribute(G),Fe=2);const ze=G.drawRange,Be=G.attributes.position;let ke=ze.start*Fe,pt=(ze.start+ze.count)*Fe;Ee!==null&&(ke=Math.max(ke,Ee.start*Fe),pt=Math.min(pt,(Ee.start+Ee.count)*Fe)),Ue!==null?(ke=Math.max(ke,0),pt=Math.min(pt,Ue.count)):Be!=null&&(ke=Math.max(ke,0),pt=Math.min(pt,Be.count));const Ut=pt-ke;if(Ut<0||Ut===1/0)return;de.setup(X,U,De,G,Ue);let M1,Ke=A;if(Ue!==null&&(M1=Te.get(Ue),Ke=Y,Ke.setIndex(M1)),X.isMesh)U.wireframe===!0?(xe.setLineWidth(U.wireframeLinewidth*pe()),Ke.setMode(1)):Ke.setMode(4);else if(X.isLine){let Ge=U.linewidth;Ge===void 0&&(Ge=1),xe.setLineWidth(Ge*pe()),X.isLineSegments?Ke.setMode(1):X.isLineLoop?Ke.setMode(2):Ke.setMode(3)}else X.isPoints?Ke.setMode(0):X.isSprite&&Ke.setMode(4);if(X.isInstancedMesh)Ke.renderInstances(ke,Ut,X.count);else if(G.isInstancedBufferGeometry){const Ge=G._maxInstanceCount!==void 0?G._maxInstanceCount:1/0,R3=Math.min(G.instanceCount,Ge);Ke.renderInstances(ke,Ut,R3)}else Ke.render(ke,Ut)},this.compile=function(S,O){function G(U,X,Ee){U.transparent===!0&&U.side===l1&&U.forceSinglePass===!1?(U.side=bt,U.needsUpdate=!0,V0(U,X,Ee),U.side=v1,U.needsUpdate=!0,V0(U,X,Ee),U.side=l1):V0(U,X,Ee)}g=b.get(S),g.init(),m.push(g),S.traverseVisible(function(U){U.isLight&&U.layers.test(O.layers)&&(g.pushLight(U),U.castShadow&&g.pushShadow(U))}),g.setupLights(d.useLegacyLights),S.traverse(function(U){const X=U.material;if(X)if(Array.isArray(X))for(let Ee=0;Ee<X.length;Ee++){const Pe=X[Ee];G(Pe,S,U)}else G(X,S,U)}),m.pop(),g=null};let re=null;function ge(S){re&&re(S)}function we(){Ye.stop()}function qe(){Ye.start()}const Ye=new m5;Ye.setAnimationLoop(ge),typeof self<"u"&&Ye.setContext(self),this.setAnimationLoop=function(S){re=S,me.setAnimationLoop(S),S===null?Ye.stop():Ye.start()},me.addEventListener("sessionstart",we),me.addEventListener("sessionend",qe),this.render=function(S,O){if(O!==void 0&&O.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(w===!0)return;S.matrixWorldAutoUpdate===!0&&S.updateMatrixWorld(),O.parent===null&&O.matrixWorldAutoUpdate===!0&&O.updateMatrixWorld(),me.enabled===!0&&me.isPresenting===!0&&(me.cameraAutoUpdate===!0&&me.updateCamera(O),O=me.getCamera()),S.isScene===!0&&S.onBeforeRender(d,S,O,y),g=b.get(S,m.length),g.init(),m.push(g),V.multiplyMatrices(O.projectionMatrix,O.matrixWorldInverse),oe.setFromProjectionMatrix(V),Me=this.localClippingEnabled,te=B.init(this.clippingPlanes,Me),p=E.get(S,_.length),p.init(),_.push(p),ht(S,O,0,d.sortObjects),p.finish(),d.sortObjects===!0&&p.sort(N,H),te===!0&&B.beginShadows();const G=g.state.shadowsArray;if(ne.render(G,S,O),te===!0&&B.endShadows(),this.info.autoReset===!0&&this.info.reset(),ie.render(p,S),g.setupLights(d.useLegacyLights),O.isArrayCamera){const U=O.cameras;for(let X=0,Ee=U.length;X<Ee;X++){const Pe=U[X];h1(p,S,Pe,Pe.viewport)}}else h1(p,S,O);y!==null&&(K.updateMultisampleRenderTarget(y),K.updateRenderTargetMipmap(y)),S.isScene===!0&&S.onAfterRender(d,S,O),de.resetDefaultState(),C=-1,R=null,m.pop(),m.length>0?g=m[m.length-1]:g=null,_.pop(),_.length>0?p=_[_.length-1]:p=null};function ht(S,O,G,U){if(S.visible===!1)return;if(S.layers.test(O.layers)){if(S.isGroup)G=S.renderOrder;else if(S.isLOD)S.autoUpdate===!0&&S.update(O);else if(S.isLight)g.pushLight(S),S.castShadow&&g.pushShadow(S);else if(S.isSprite){if(!S.frustumCulled||oe.intersectsSprite(S)){U&&$.setFromMatrixPosition(S.matrixWorld).applyMatrix4(V);const Pe=Se.update(S),De=S.material;De.visible&&p.push(S,Pe,De,G,$.z,null)}}else if((S.isMesh||S.isLine||S.isPoints)&&(S.isSkinnedMesh&&S.skeleton.frame!==Q.render.frame&&(S.skeleton.update(),S.skeleton.frame=Q.render.frame),!S.frustumCulled||oe.intersectsObject(S))){U&&$.setFromMatrixPosition(S.matrixWorld).applyMatrix4(V);const Pe=Se.update(S),De=S.material;if(Array.isArray(De)){const Ue=Pe.groups;for(let Fe=0,ze=Ue.length;Fe<ze;Fe++){const Be=Ue[Fe],ke=De[Be.materialIndex];ke&&ke.visible&&p.push(S,Pe,ke,G,$.z,Be)}}else De.visible&&p.push(S,Pe,De,G,$.z,null)}}const Ee=S.children;for(let Pe=0,De=Ee.length;Pe<De;Pe++)ht(Ee[Pe],O,G,U)}function h1(S,O,G,U){const X=S.opaque,Ee=S.transmissive,Pe=S.transparent;g.setupLightsView(G),te===!0&&B.setGlobalState(d.clippingPlanes,G),Ee.length>0&&$e(X,Ee,O,G),U&&xe.viewport(D.copy(U)),X.length>0&&Lt(X,O,G),Ee.length>0&&Lt(Ee,O,G),Pe.length>0&&Lt(Pe,O,G),xe.buffers.depth.setTest(!0),xe.buffers.depth.setMask(!0),xe.buffers.color.setMask(!0),xe.setPolygonOffset(!1)}function $e(S,O,G,U){if(ae===null){const De=se.isWebGL2;ae=new U1(1024,1024,{generateMipmaps:!0,type:Ce.has("EXT_color_buffer_half_float")?R0:D1,minFilter:P0,samples:De&&a===!0?4:0})}const X=d.getRenderTarget();d.setRenderTarget(ae),d.clear();const Ee=d.toneMapping;d.toneMapping=c1,Lt(S,G,U),K.updateMultisampleRenderTarget(ae),K.updateRenderTargetMipmap(ae);let Pe=!1;for(let De=0,Ue=O.length;De<Ue;De++){const Fe=O[De],ze=Fe.object,Be=Fe.geometry,ke=Fe.material,pt=Fe.group;if(ke.side===l1&&ze.layers.test(U.layers)){const Ut=ke.side;ke.side=bt,ke.needsUpdate=!0,kt(ze,G,U,Be,ke,pt),ke.side=Ut,ke.needsUpdate=!0,Pe=!0}}Pe===!0&&(K.updateMultisampleRenderTarget(ae),K.updateRenderTargetMipmap(ae)),d.setRenderTarget(X),d.toneMapping=Ee}function Lt(S,O,G){const U=O.isScene===!0?O.overrideMaterial:null;for(let X=0,Ee=S.length;X<Ee;X++){const Pe=S[X],De=Pe.object,Ue=Pe.geometry,Fe=U===null?Pe.material:U,ze=Pe.group;De.layers.test(G.layers)&&kt(De,O,G,Ue,Fe,ze)}}function kt(S,O,G,U,X,Ee){S.onBeforeRender(d,O,G,U,X,Ee),S.modelViewMatrix.multiplyMatrices(G.matrixWorldInverse,S.matrixWorld),S.normalMatrix.getNormalMatrix(S.modelViewMatrix),X.onBeforeRender(d,O,G,U,S,Ee),X.transparent===!0&&X.side===l1&&X.forceSinglePass===!1?(X.side=bt,X.needsUpdate=!0,d.renderBufferDirect(G,O,U,X,S,Ee),X.side=v1,X.needsUpdate=!0,d.renderBufferDirect(G,O,U,X,S,Ee),X.side=l1):d.renderBufferDirect(G,O,U,X,S,Ee),S.onAfterRender(d,O,G,U,X,Ee)}function V0(S,O,G){O.isScene!==!0&&(O=fe);const U=q.get(S),X=g.state.lights,Ee=g.state.shadowsArray,Pe=X.state.version,De=Ie.getParameters(S,X.state,Ee,O,G),Ue=Ie.getProgramCacheKey(De);let Fe=U.programs;U.environment=S.isMeshStandardMaterial?O.environment:null,U.fog=O.fog,U.envMap=(S.isMeshStandardMaterial?le:_e).get(S.envMap||U.environment),Fe===void 0&&(S.addEventListener("dispose",Ze),Fe=new Map,U.programs=Fe);let ze=Fe.get(Ue);if(ze!==void 0){if(U.currentProgram===ze&&U.lightsStateVersion===Pe)return en(S,De),ze}else De.uniforms=Ie.getUniforms(S),S.onBuild(G,De,d),S.onBeforeCompile(De,d),ze=Ie.acquireProgram(De,Ue),Fe.set(Ue,ze),U.uniforms=De.uniforms;const Be=U.uniforms;(!S.isShaderMaterial&&!S.isRawShaderMaterial||S.clipping===!0)&&(Be.clippingPlanes=B.uniform),en(S,De),U.needsLights=q5(S),U.lightsStateVersion=Pe,U.needsLights&&(Be.ambientLightColor.value=X.state.ambient,Be.lightProbe.value=X.state.probe,Be.directionalLights.value=X.state.directional,Be.directionalLightShadows.value=X.state.directionalShadow,Be.spotLights.value=X.state.spot,Be.spotLightShadows.value=X.state.spotShadow,Be.rectAreaLights.value=X.state.rectArea,Be.ltc_1.value=X.state.rectAreaLTC1,Be.ltc_2.value=X.state.rectAreaLTC2,Be.pointLights.value=X.state.point,Be.pointLightShadows.value=X.state.pointShadow,Be.hemisphereLights.value=X.state.hemi,Be.directionalShadowMap.value=X.state.directionalShadowMap,Be.directionalShadowMatrix.value=X.state.directionalShadowMatrix,Be.spotShadowMap.value=X.state.spotShadowMap,Be.spotLightMatrix.value=X.state.spotLightMatrix,Be.spotLightMap.value=X.state.spotLightMap,Be.pointShadowMap.value=X.state.pointShadowMap,Be.pointShadowMatrix.value=X.state.pointShadowMatrix);const ke=ze.getUniforms(),pt=b3.seqWithValue(ke.seq,Be);return U.currentProgram=ze,U.uniformsList=pt,ze}function en(S,O){const G=q.get(S);G.outputEncoding=O.outputEncoding,G.instancing=O.instancing,G.skinning=O.skinning,G.morphTargets=O.morphTargets,G.morphNormals=O.morphNormals,G.morphColors=O.morphColors,G.morphTargetsCount=O.morphTargetsCount,G.numClippingPlanes=O.numClippingPlanes,G.numIntersection=O.numClipIntersection,G.vertexAlphas=O.vertexAlphas,G.vertexTangents=O.vertexTangents,G.toneMapping=O.toneMapping}function k5(S,O,G,U,X){O.isScene!==!0&&(O=fe),K.resetTextureUnits();const Ee=O.fog,Pe=U.isMeshStandardMaterial?O.environment:null,De=y===null?d.outputEncoding:y.isXRRenderTarget===!0?y.texture.encoding:I1,Ue=(U.isMeshStandardMaterial?le:_e).get(U.envMap||Pe),Fe=U.vertexColors===!0&&!!G.attributes.color&&G.attributes.color.itemSize===4,ze=!!U.normalMap&&!!G.attributes.tangent,Be=!!G.morphAttributes.position,ke=!!G.morphAttributes.normal,pt=!!G.morphAttributes.color,Ut=U.toneMapped?d.toneMapping:c1,M1=G.morphAttributes.position||G.morphAttributes.normal||G.morphAttributes.color,Ke=M1!==void 0?M1.length:0,Ge=q.get(U),R3=g.state.lights;if(te===!0&&(Me===!0||S!==R)){const yt=S===R&&U.id===C;B.setState(U,S,yt)}let it=!1;U.version===Ge.__version?(Ge.needsLights&&Ge.lightsStateVersion!==R3.state.version||Ge.outputEncoding!==De||X.isInstancedMesh&&Ge.instancing===!1||!X.isInstancedMesh&&Ge.instancing===!0||X.isSkinnedMesh&&Ge.skinning===!1||!X.isSkinnedMesh&&Ge.skinning===!0||Ge.envMap!==Ue||U.fog===!0&&Ge.fog!==Ee||Ge.numClippingPlanes!==void 0&&(Ge.numClippingPlanes!==B.numPlanes||Ge.numIntersection!==B.numIntersection)||Ge.vertexAlphas!==Fe||Ge.vertexTangents!==ze||Ge.morphTargets!==Be||Ge.morphNormals!==ke||Ge.morphColors!==pt||Ge.toneMapping!==Ut||se.isWebGL2===!0&&Ge.morphTargetsCount!==Ke)&&(it=!0):(it=!0,Ge.__version=U.version);let y1=Ge.currentProgram;it===!0&&(y1=V0(U,O,X));let tn=!1,v0=!1,D3=!1;const mt=y1.getUniforms(),S1=Ge.uniforms;if(xe.useProgram(y1.program)&&(tn=!0,v0=!0,D3=!0),U.id!==C&&(C=U.id,v0=!0),tn||R!==S){if(mt.setValue(F,"projectionMatrix",S.projectionMatrix),se.logarithmicDepthBuffer&&mt.setValue(F,"logDepthBufFC",2/(Math.log(S.far+1)/Math.LN2)),R!==S&&(R=S,v0=!0,D3=!0),U.isShaderMaterial||U.isMeshPhongMaterial||U.isMeshToonMaterial||U.isMeshStandardMaterial||U.envMap){const yt=mt.map.cameraPosition;yt!==void 0&&yt.setValue(F,$.setFromMatrixPosition(S.matrixWorld))}(U.isMeshPhongMaterial||U.isMeshToonMaterial||U.isMeshLambertMaterial||U.isMeshBasicMaterial||U.isMeshStandardMaterial||U.isShaderMaterial)&&mt.setValue(F,"isOrthographic",S.isOrthographicCamera===!0),(U.isMeshPhongMaterial||U.isMeshToonMaterial||U.isMeshLambertMaterial||U.isMeshBasicMaterial||U.isMeshStandardMaterial||U.isShaderMaterial||U.isShadowMaterial||X.isSkinnedMesh)&&mt.setValue(F,"viewMatrix",S.matrixWorldInverse)}if(X.isSkinnedMesh){mt.setOptional(F,X,"bindMatrix"),mt.setOptional(F,X,"bindMatrixInverse");const yt=X.skeleton;yt&&(se.floatVertexTextures?(yt.boneTexture===null&&yt.computeBoneTexture(),mt.setValue(F,"boneTexture",yt.boneTexture,K),mt.setValue(F,"boneTextureSize",yt.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}const I3=G.morphAttributes;if((I3.position!==void 0||I3.normal!==void 0||I3.color!==void 0&&se.isWebGL2===!0)&&ce.update(X,G,y1),(v0||Ge.receiveShadow!==X.receiveShadow)&&(Ge.receiveShadow=X.receiveShadow,mt.setValue(F,"receiveShadow",X.receiveShadow)),U.isMeshGouraudMaterial&&U.envMap!==null&&(S1.envMap.value=Ue,S1.flipEnvMap.value=Ue.isCubeTexture&&Ue.isRenderTargetTexture===!1?-1:1),v0&&(mt.setValue(F,"toneMappingExposure",d.toneMappingExposure),Ge.needsLights&&W5(S1,D3),Ee&&U.fog===!0&&Ve.refreshFogUniforms(S1,Ee),Ve.refreshMaterialUniforms(S1,U,I,Z,ae),b3.upload(F,Ge.uniformsList,S1,K)),U.isShaderMaterial&&U.uniformsNeedUpdate===!0&&(b3.upload(F,Ge.uniformsList,S1,K),U.uniformsNeedUpdate=!1),U.isSpriteMaterial&&mt.setValue(F,"center",X.center),mt.setValue(F,"modelViewMatrix",X.modelViewMatrix),mt.setValue(F,"normalMatrix",X.normalMatrix),mt.setValue(F,"modelMatrix",X.matrixWorld),U.isShaderMaterial||U.isRawShaderMaterial){const yt=U.uniformsGroups;for(let U3=0,X5=yt.length;U3<X5;U3++)if(se.isWebGL2){const nn=yt[U3];ve.update(nn,y1),ve.bind(nn,y1)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return y1}function W5(S,O){S.ambientLightColor.needsUpdate=O,S.lightProbe.needsUpdate=O,S.directionalLights.needsUpdate=O,S.directionalLightShadows.needsUpdate=O,S.pointLights.needsUpdate=O,S.pointLightShadows.needsUpdate=O,S.spotLights.needsUpdate=O,S.spotLightShadows.needsUpdate=O,S.rectAreaLights.needsUpdate=O,S.hemisphereLights.needsUpdate=O}function q5(S){return S.isMeshLambertMaterial||S.isMeshToonMaterial||S.isMeshPhongMaterial||S.isMeshStandardMaterial||S.isShadowMaterial||S.isShaderMaterial&&S.lights===!0}this.getActiveCubeFace=function(){return x},this.getActiveMipmapLevel=function(){return v},this.getRenderTarget=function(){return y},this.setRenderTargetTextures=function(S,O,G){q.get(S.texture).__webglTexture=O,q.get(S.depthTexture).__webglTexture=G;const U=q.get(S);U.__hasExternalTextures=!0,U.__hasExternalTextures&&(U.__autoAllocateDepthBuffer=G===void 0,U.__autoAllocateDepthBuffer||Ce.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),U.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(S,O){const G=q.get(S);G.__webglFramebuffer=O,G.__useDefaultFramebuffer=O===void 0},this.setRenderTarget=function(S,O=0,G=0){y=S,x=O,v=G;let U=!0,X=null,Ee=!1,Pe=!1;if(S){const Ue=q.get(S);Ue.__useDefaultFramebuffer!==void 0?(xe.bindFramebuffer(36160,null),U=!1):Ue.__webglFramebuffer===void 0?K.setupRenderTarget(S):Ue.__hasExternalTextures&&K.rebindTextures(S,q.get(S.texture).__webglTexture,q.get(S.depthTexture).__webglTexture);const Fe=S.texture;(Fe.isData3DTexture||Fe.isDataArrayTexture||Fe.isCompressedArrayTexture)&&(Pe=!0);const ze=q.get(S).__webglFramebuffer;S.isWebGLCubeRenderTarget?(X=ze[O],Ee=!0):se.isWebGL2&&S.samples>0&&K.useMultisampledRTT(S)===!1?X=q.get(S).__webglMultisampledFramebuffer:X=ze,D.copy(S.viewport),M.copy(S.scissor),T=S.scissorTest}else D.copy(J).multiplyScalar(I).floor(),M.copy(ee).multiplyScalar(I).floor(),T=j;if(xe.bindFramebuffer(36160,X)&&se.drawBuffers&&U&&xe.drawBuffers(S,X),xe.viewport(D),xe.scissor(M),xe.setScissorTest(T),Ee){const Ue=q.get(S.texture);F.framebufferTexture2D(36160,36064,34069+O,Ue.__webglTexture,G)}else if(Pe){const Ue=q.get(S.texture),Fe=O||0;F.framebufferTextureLayer(36160,36064,Ue.__webglTexture,G||0,Fe)}C=-1},this.readRenderTargetPixels=function(S,O,G,U,X,Ee,Pe){if(!(S&&S.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let De=q.get(S).__webglFramebuffer;if(S.isWebGLCubeRenderTarget&&Pe!==void 0&&(De=De[Pe]),De){xe.bindFramebuffer(36160,De);try{const Ue=S.texture,Fe=Ue.format,ze=Ue.type;if(Fe!==Ht&&z.convert(Fe)!==F.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Be=ze===R0&&(Ce.has("EXT_color_buffer_half_float")||se.isWebGL2&&Ce.has("EXT_color_buffer_float"));if(ze!==D1&&z.convert(ze)!==F.getParameter(35738)&&!(ze===P1&&(se.isWebGL2||Ce.has("OES_texture_float")||Ce.has("WEBGL_color_buffer_float")))&&!Be){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}O>=0&&O<=S.width-U&&G>=0&&G<=S.height-X&&F.readPixels(O,G,U,X,z.convert(Fe),z.convert(ze),Ee)}finally{const Ue=y!==null?q.get(y).__webglFramebuffer:null;xe.bindFramebuffer(36160,Ue)}}},this.copyFramebufferToTexture=function(S,O,G=0){const U=Math.pow(2,-G),X=Math.floor(O.image.width*U),Ee=Math.floor(O.image.height*U);K.setTexture2D(O,0),F.copyTexSubImage2D(3553,G,0,0,S.x,S.y,X,Ee),xe.unbindTexture()},this.copyTextureToTexture=function(S,O,G,U=0){const X=O.image.width,Ee=O.image.height,Pe=z.convert(G.format),De=z.convert(G.type);K.setTexture2D(G,0),F.pixelStorei(37440,G.flipY),F.pixelStorei(37441,G.premultiplyAlpha),F.pixelStorei(3317,G.unpackAlignment),O.isDataTexture?F.texSubImage2D(3553,U,S.x,S.y,X,Ee,Pe,De,O.image.data):O.isCompressedTexture?F.compressedTexSubImage2D(3553,U,S.x,S.y,O.mipmaps[0].width,O.mipmaps[0].height,Pe,O.mipmaps[0].data):F.texSubImage2D(3553,U,S.x,S.y,Pe,De,O.image),U===0&&G.generateMipmaps&&F.generateMipmap(3553),xe.unbindTexture()},this.copyTextureToTexture3D=function(S,O,G,U,X=0){if(d.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Ee=S.max.x-S.min.x+1,Pe=S.max.y-S.min.y+1,De=S.max.z-S.min.z+1,Ue=z.convert(U.format),Fe=z.convert(U.type);let ze;if(U.isData3DTexture)K.setTexture3D(U,0),ze=32879;else if(U.isDataArrayTexture)K.setTexture2DArray(U,0),ze=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}F.pixelStorei(37440,U.flipY),F.pixelStorei(37441,U.premultiplyAlpha),F.pixelStorei(3317,U.unpackAlignment);const Be=F.getParameter(3314),ke=F.getParameter(32878),pt=F.getParameter(3316),Ut=F.getParameter(3315),M1=F.getParameter(32877),Ke=G.isCompressedTexture?G.mipmaps[0]:G.image;F.pixelStorei(3314,Ke.width),F.pixelStorei(32878,Ke.height),F.pixelStorei(3316,S.min.x),F.pixelStorei(3315,S.min.y),F.pixelStorei(32877,S.min.z),G.isDataTexture||G.isData3DTexture?F.texSubImage3D(ze,X,O.x,O.y,O.z,Ee,Pe,De,Ue,Fe,Ke.data):G.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),F.compressedTexSubImage3D(ze,X,O.x,O.y,O.z,Ee,Pe,De,Ue,Ke.data)):F.texSubImage3D(ze,X,O.x,O.y,O.z,Ee,Pe,De,Ue,Fe,Ke),F.pixelStorei(3314,Be),F.pixelStorei(32878,ke),F.pixelStorei(3316,pt),F.pixelStorei(3315,Ut),F.pixelStorei(32877,M1),X===0&&U.generateMipmaps&&F.generateMipmap(ze),xe.unbindTexture()},this.initTexture=function(S){S.isCubeTexture?K.setTextureCube(S,0):S.isData3DTexture?K.setTexture3D(S,0):S.isDataArrayTexture||S.isCompressedArrayTexture?K.setTexture2DArray(S,0):K.setTexture2D(S,0),xe.unbindTexture()},this.resetState=function(){x=0,v=0,y=null,xe.reset(),de.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(e){console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!e}}class Y9 extends b5{}Y9.prototype.isWebGL1Renderer=!0;class j9 extends Mt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t}get autoUpdate(){return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate}set autoUpdate(e){console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."),this.matrixWorldAutoUpdate=e}}class W2 extends F0{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new We(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const x4=new L,b4=new L,M4=new et,u2=new H2,c3=new T3;class Z9 extends Mt{constructor(e=new lt,t=new W2){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,r=t.count;i<r;i++)x4.fromBufferAttribute(t,i-1),b4.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=x4.distanceTo(b4);e.setAttribute("lineDistance",new Je(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,r=e.params.Line.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),c3.copy(n.boundingSphere),c3.applyMatrix4(i),c3.radius+=r,e.ray.intersectsSphere(c3)===!1)return;M4.copy(i).invert(),u2.copy(e.ray).applyMatrix4(M4);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),c=a*a,l=new L,u=new L,f=new L,h=new L,p=this.isLineSegments?2:1,g=n.index,m=n.attributes.position;if(g!==null){const d=Math.max(0,s.start),w=Math.min(g.count,s.start+s.count);for(let x=d,v=w-1;x<v;x+=p){const y=g.getX(x),C=g.getX(x+1);if(l.fromBufferAttribute(m,y),u.fromBufferAttribute(m,C),u2.distanceSqToSegment(l,u,h,f)>c)continue;h.applyMatrix4(this.matrixWorld);const D=e.ray.origin.distanceTo(h);D<e.near||D>e.far||t.push({distance:D,point:f.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else{const d=Math.max(0,s.start),w=Math.min(m.count,s.start+s.count);for(let x=d,v=w-1;x<v;x+=p){if(l.fromBufferAttribute(m,x),u.fromBufferAttribute(m,x+1),u2.distanceSqToSegment(l,u,h,f)>c)continue;h.applyMatrix4(this.matrixWorld);const C=e.ray.origin.distanceTo(h);C<e.near||C>e.far||t.push({distance:C,point:f.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const a=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}}const y4=new L,S4=new L;class M5 extends Z9{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,r=t.count;i<r;i+=2)y4.fromBufferAttribute(t,i),S4.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+y4.distanceTo(S4);e.setAttribute("lineDistance",new Je(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Qt{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),r=0;t.push(0);for(let s=1;s<=e;s++)n=this.getPoint(s/e),r+=n.distanceTo(i),t.push(r),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const r=n.length;let s;t?s=t:s=e*n[r-1];let a=0,c=r-1,l;for(;a<=c;)if(i=Math.floor(a+(c-a)/2),l=n[i]-s,l<0)a=i+1;else if(l>0)c=i-1;else{c=i;break}if(i=c,n[i]===s)return i/(r-1);const u=n[i],h=n[i+1]-u,p=(s-u)/h;return(i+p)/(r-1)}getTangent(e,t){let i=e-1e-4,r=e+1e-4;i<0&&(i=0),r>1&&(r=1);const s=this.getPoint(i),a=this.getPoint(r),c=t||(s.isVector2?new he:new L);return c.copy(a).sub(s).normalize(),c}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new L,i=[],r=[],s=[],a=new L,c=new et;for(let p=0;p<=e;p++){const g=p/e;i[p]=this.getTangentAt(g,new L)}r[0]=new L,s[0]=new L;let l=Number.MAX_VALUE;const u=Math.abs(i[0].x),f=Math.abs(i[0].y),h=Math.abs(i[0].z);u<=l&&(l=u,n.set(1,0,0)),f<=l&&(l=f,n.set(0,1,0)),h<=l&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],a),s[0].crossVectors(i[0],r[0]);for(let p=1;p<=e;p++){if(r[p]=r[p-1].clone(),s[p]=s[p-1].clone(),a.crossVectors(i[p-1],i[p]),a.length()>Number.EPSILON){a.normalize();const g=Math.acos(st(i[p-1].dot(i[p]),-1,1));r[p].applyMatrix4(c.makeRotationAxis(a,g))}s[p].crossVectors(i[p],r[p])}if(t===!0){let p=Math.acos(st(r[0].dot(r[e]),-1,1));p/=e,i[0].dot(a.crossVectors(r[0],r[e]))>0&&(p=-p);for(let g=1;g<=e;g++)r[g].applyMatrix4(c.makeRotationAxis(i[g],p*g)),s[g].crossVectors(i[g],r[g])}return{tangents:i,normals:r,binormals:s}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class q2 extends Qt{constructor(e=0,t=0,n=1,i=1,r=0,s=Math.PI*2,a=!1,c=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=c}getPoint(e,t){const n=t||new he,i=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(s?r=0:r=i),this.aClockwise===!0&&!s&&(r===i?r=-i:r=r-i);const a=this.aStartAngle+e*r;let c=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const u=Math.cos(this.aRotation),f=Math.sin(this.aRotation),h=c-this.aX,p=l-this.aY;c=h*u-p*f+this.aX,l=h*f+p*u+this.aY}return n.set(c,l)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class $9 extends q2{constructor(e,t,n,i,r,s){super(e,t,n,n,i,r,s),this.isArcCurve=!0,this.type="ArcCurve"}}function X2(){let o=0,e=0,t=0,n=0;function i(r,s,a,c){o=r,e=a,t=-3*r+3*s-2*a-c,n=2*r-2*s+a+c}return{initCatmullRom:function(r,s,a,c,l){i(s,a,l*(a-r),l*(c-s))},initNonuniformCatmullRom:function(r,s,a,c,l,u,f){let h=(s-r)/l-(a-r)/(l+u)+(a-s)/u,p=(a-s)/u-(c-s)/(u+f)+(c-a)/f;h*=u,p*=u,i(s,a,h,p)},calc:function(r){const s=r*r,a=s*r;return o+e*r+t*s+n*a}}}const u3=new L,h2=new X2,f2=new X2,d2=new X2;class J9 extends Qt{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new L){const n=t,i=this.points,r=i.length,s=(r-(this.closed?0:1))*e;let a=Math.floor(s),c=s-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/r)+1)*r:c===0&&a===r-1&&(a=r-2,c=1);let l,u;this.closed||a>0?l=i[(a-1)%r]:(u3.subVectors(i[0],i[1]).add(i[0]),l=u3);const f=i[a%r],h=i[(a+1)%r];if(this.closed||a+2<r?u=i[(a+2)%r]:(u3.subVectors(i[r-1],i[r-2]).add(i[r-1]),u=u3),this.curveType==="centripetal"||this.curveType==="chordal"){const p=this.curveType==="chordal"?.5:.25;let g=Math.pow(l.distanceToSquared(f),p),_=Math.pow(f.distanceToSquared(h),p),m=Math.pow(h.distanceToSquared(u),p);_<1e-4&&(_=1),g<1e-4&&(g=_),m<1e-4&&(m=_),h2.initNonuniformCatmullRom(l.x,f.x,h.x,u.x,g,_,m),f2.initNonuniformCatmullRom(l.y,f.y,h.y,u.y,g,_,m),d2.initNonuniformCatmullRom(l.z,f.z,h.z,u.z,g,_,m)}else this.curveType==="catmullrom"&&(h2.initCatmullRom(l.x,f.x,h.x,u.x,this.tension),f2.initCatmullRom(l.y,f.y,h.y,u.y,this.tension),d2.initCatmullRom(l.z,f.z,h.z,u.z,this.tension));return n.set(h2.calc(c),f2.calc(c),d2.calc(c)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new L().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function w4(o,e,t,n,i){const r=(n-e)*.5,s=(i-t)*.5,a=o*o,c=o*a;return(2*t-2*n+r+s)*c+(-3*t+3*n-2*r-s)*a+r*o+t}function K9(o,e){const t=1-o;return t*t*e}function Q9(o,e){return 2*(1-o)*o*e}function eo(o,e){return o*o*e}function T0(o,e,t,n){return K9(o,e)+Q9(o,t)+eo(o,n)}function to(o,e){const t=1-o;return t*t*t*e}function no(o,e){const t=1-o;return 3*t*t*o*e}function io(o,e){return 3*(1-o)*o*o*e}function ro(o,e){return o*o*o*e}function A0(o,e,t,n,i){return to(o,e)+no(o,t)+io(o,n)+ro(o,i)}class y5 extends Qt{constructor(e=new he,t=new he,n=new he,i=new he){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new he){const n=t,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(A0(e,i.x,r.x,s.x,a.x),A0(e,i.y,r.y,s.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class oo extends Qt{constructor(e=new L,t=new L,n=new L,i=new L){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new L){const n=t,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(A0(e,i.x,r.x,s.x,a.x),A0(e,i.y,r.y,s.y,a.y),A0(e,i.z,r.z,s.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class Y2 extends Qt{constructor(e=new he,t=new he){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new he){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new he){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class ao extends Qt{constructor(e=new L,t=new L){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new L){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new L){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class S5 extends Qt{constructor(e=new he,t=new he,n=new he){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new he){const n=t,i=this.v0,r=this.v1,s=this.v2;return n.set(T0(e,i.x,r.x,s.x),T0(e,i.y,r.y,s.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class so extends Qt{constructor(e=new L,t=new L,n=new L){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new L){const n=t,i=this.v0,r=this.v1,s=this.v2;return n.set(T0(e,i.x,r.x,s.x),T0(e,i.y,r.y,s.y),T0(e,i.z,r.z,s.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class w5 extends Qt{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new he){const n=t,i=this.points,r=(i.length-1)*e,s=Math.floor(r),a=r-s,c=i[s===0?s:s-1],l=i[s],u=i[s>i.length-2?i.length-1:s+1],f=i[s>i.length-3?i.length-1:s+2];return n.set(w4(a,c.x,l.x,u.x,f.x),w4(a,c.y,l.y,u.y,f.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new he().fromArray(i))}return this}}var E5=Object.freeze({__proto__:null,ArcCurve:$9,CatmullRomCurve3:J9,CubicBezierCurve:y5,CubicBezierCurve3:oo,EllipseCurve:q2,LineCurve:Y2,LineCurve3:ao,QuadraticBezierCurve:S5,QuadraticBezierCurve3:so,SplineCurve:w5});class lo extends Qt{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Y2(t,e))}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let r=0;for(;r<i.length;){if(i[r]>=n){const s=i[r]-n,a=this.curves[r],c=a.getLength(),l=c===0?0:1-s/c;return a.getPointAt(l,t)}r++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i],a=s.isEllipseCurve?e*2:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?e*s.points.length:e,c=s.getPoints(a);for(let l=0;l<c.length;l++){const u=c[l];n&&n.equals(u)||(t.push(u),n=u)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new E5[i.type]().fromJSON(i))}return this}}class I2 extends lo{constructor(e){super(),this.type="Path",this.currentPoint=new he,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new Y2(this.currentPoint.clone(),new he(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const r=new S5(this.currentPoint.clone(),new he(e,t),new he(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,r,s){const a=new y5(this.currentPoint.clone(),new he(e,t),new he(n,i),new he(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new w5(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,r,s){const a=this.currentPoint.x,c=this.currentPoint.y;return this.absarc(e+a,t+c,n,i,r,s),this}absarc(e,t,n,i,r,s){return this.absellipse(e,t,n,n,i,r,s),this}ellipse(e,t,n,i,r,s,a,c){const l=this.currentPoint.x,u=this.currentPoint.y;return this.absellipse(e+l,t+u,n,i,r,s,a,c),this}absellipse(e,t,n,i,r,s,a,c){const l=new q2(e,t,n,i,r,s,a,c);if(this.curves.length>0){const f=l.getPoint(0);f.equals(this.currentPoint)||this.lineTo(f.x,f.y)}this.curves.push(l);const u=l.getPoint(1);return this.currentPoint.copy(u),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}const h3=new L,f3=new L,p2=new L,d3=new At;class co extends lt{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),r=Math.cos(x3*t),s=e.getIndex(),a=e.getAttribute("position"),c=s?s.count:a.count,l=[0,0,0],u=["a","b","c"],f=new Array(3),h={},p=[];for(let g=0;g<c;g+=3){s?(l[0]=s.getX(g),l[1]=s.getX(g+1),l[2]=s.getX(g+2)):(l[0]=g,l[1]=g+1,l[2]=g+2);const{a:_,b:m,c:d}=d3;if(_.fromBufferAttribute(a,l[0]),m.fromBufferAttribute(a,l[1]),d.fromBufferAttribute(a,l[2]),d3.getNormal(p2),f[0]=`${Math.round(_.x*i)},${Math.round(_.y*i)},${Math.round(_.z*i)}`,f[1]=`${Math.round(m.x*i)},${Math.round(m.y*i)},${Math.round(m.z*i)}`,f[2]=`${Math.round(d.x*i)},${Math.round(d.y*i)},${Math.round(d.z*i)}`,!(f[0]===f[1]||f[1]===f[2]||f[2]===f[0]))for(let w=0;w<3;w++){const x=(w+1)%3,v=f[w],y=f[x],C=d3[u[w]],R=d3[u[x]],D=`${v}_${y}`,M=`${y}_${v}`;M in h&&h[M]?(p2.dot(h[M].normal)<=r&&(p.push(C.x,C.y,C.z),p.push(R.x,R.y,R.z)),h[M]=null):D in h||(h[D]={index0:l[w],index1:l[x],normal:p2.clone()})}}for(const g in h)if(h[g]){const{index0:_,index1:m}=h[g];h3.fromBufferAttribute(a,_),f3.fromBufferAttribute(a,m),p.push(h3.x,h3.y,h3.z),p.push(f3.x,f3.y,f3.z)}this.setAttribute("position",new Je(p,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class M3 extends I2{constructor(e){super(e),this.uuid=m0(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new I2().fromJSON(i))}return this}}const uo={triangulate:function(o,e,t=2){const n=e&&e.length,i=n?e[0]*t:o.length;let r=T5(o,0,i,t,!0);const s=[];if(!r||r.next===r.prev)return s;let a,c,l,u,f,h,p;if(n&&(r=go(o,e,r,t)),o.length>80*t){a=l=o[0],c=u=o[1];for(let g=t;g<i;g+=t)f=o[g],h=o[g+1],f<a&&(a=f),h<c&&(c=h),f>l&&(l=f),h>u&&(u=h);p=Math.max(l-a,u-c),p=p!==0?32767/p:0}return I0(r,s,t,a,c,p,0),s}};function T5(o,e,t,n,i){let r,s;if(i===Ao(o,e,t,n)>0)for(r=e;r<t;r+=n)s=E4(r,o[r],o[r+1],s);else for(r=t-n;r>=e;r-=n)s=E4(r,o[r],o[r+1],s);return s&&L3(s,s.next)&&(N0(s),s=s.next),s}function O1(o,e){if(!o)return o;e||(e=o);let t=o,n;do if(n=!1,!t.steiner&&(L3(t,t.next)||je(t.prev,t,t.next)===0)){if(N0(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function I0(o,e,t,n,i,r,s){if(!o)return;!s&&r&&Mo(o,n,i,r);let a=o,c,l;for(;o.prev!==o.next;){if(c=o.prev,l=o.next,r?fo(o,n,i,r):ho(o)){e.push(c.i/t|0),e.push(o.i/t|0),e.push(l.i/t|0),N0(o),o=l.next,a=l.next;continue}if(o=l,o===a){s?s===1?(o=po(O1(o),e,t),I0(o,e,t,n,i,r,2)):s===2&&mo(o,e,t,n,i,r):I0(O1(o),e,t,n,i,r,1);break}}}function ho(o){const e=o.prev,t=o,n=o.next;if(je(e,t,n)>=0)return!1;const i=e.x,r=t.x,s=n.x,a=e.y,c=t.y,l=n.y,u=i<r?i<s?i:s:r<s?r:s,f=a<c?a<l?a:l:c<l?c:l,h=i>r?i>s?i:s:r>s?r:s,p=a>c?a>l?a:l:c>l?c:l;let g=n.next;for(;g!==e;){if(g.x>=u&&g.x<=h&&g.y>=f&&g.y<=p&&o0(i,a,r,c,s,l,g.x,g.y)&&je(g.prev,g,g.next)>=0)return!1;g=g.next}return!0}function fo(o,e,t,n){const i=o.prev,r=o,s=o.next;if(je(i,r,s)>=0)return!1;const a=i.x,c=r.x,l=s.x,u=i.y,f=r.y,h=s.y,p=a<c?a<l?a:l:c<l?c:l,g=u<f?u<h?u:h:f<h?f:h,_=a>c?a>l?a:l:c>l?c:l,m=u>f?u>h?u:h:f>h?f:h,d=U2(p,g,e,t,n),w=U2(_,m,e,t,n);let x=o.prevZ,v=o.nextZ;for(;x&&x.z>=d&&v&&v.z<=w;){if(x.x>=p&&x.x<=_&&x.y>=g&&x.y<=m&&x!==i&&x!==s&&o0(a,u,c,f,l,h,x.x,x.y)&&je(x.prev,x,x.next)>=0||(x=x.prevZ,v.x>=p&&v.x<=_&&v.y>=g&&v.y<=m&&v!==i&&v!==s&&o0(a,u,c,f,l,h,v.x,v.y)&&je(v.prev,v,v.next)>=0))return!1;v=v.nextZ}for(;x&&x.z>=d;){if(x.x>=p&&x.x<=_&&x.y>=g&&x.y<=m&&x!==i&&x!==s&&o0(a,u,c,f,l,h,x.x,x.y)&&je(x.prev,x,x.next)>=0)return!1;x=x.prevZ}for(;v&&v.z<=w;){if(v.x>=p&&v.x<=_&&v.y>=g&&v.y<=m&&v!==i&&v!==s&&o0(a,u,c,f,l,h,v.x,v.y)&&je(v.prev,v,v.next)>=0)return!1;v=v.nextZ}return!0}function po(o,e,t){let n=o;do{const i=n.prev,r=n.next.next;!L3(i,r)&&A5(i,n,n.next,r)&&U0(i,r)&&U0(r,i)&&(e.push(i.i/t|0),e.push(n.i/t|0),e.push(r.i/t|0),N0(n),N0(n.next),n=o=r),n=n.next}while(n!==o);return O1(n)}function mo(o,e,t,n,i,r){let s=o;do{let a=s.next.next;for(;a!==s.prev;){if(s.i!==a.i&&wo(s,a)){let c=C5(s,a);s=O1(s,s.next),c=O1(c,c.next),I0(s,e,t,n,i,r,0),I0(c,e,t,n,i,r,0);return}a=a.next}s=s.next}while(s!==o)}function go(o,e,t,n){const i=[];let r,s,a,c,l;for(r=0,s=e.length;r<s;r++)a=e[r]*n,c=r<s-1?e[r+1]*n:o.length,l=T5(o,a,c,n,!1),l===l.next&&(l.steiner=!0),i.push(So(l));for(i.sort(_o),r=0;r<i.length;r++)t=vo(i[r],t);return t}function _o(o,e){return o.x-e.x}function vo(o,e){const t=xo(o,e);if(!t)return e;const n=C5(t,o);return O1(n,n.next),O1(t,t.next)}function xo(o,e){let t=e,n=-1/0,i;const r=o.x,s=o.y;do{if(s<=t.y&&s>=t.next.y&&t.next.y!==t.y){const h=t.x+(s-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(h<=r&&h>n&&(n=h,i=t.x<t.next.x?t:t.next,h===r))return i}t=t.next}while(t!==e);if(!i)return null;const a=i,c=i.x,l=i.y;let u=1/0,f;t=i;do r>=t.x&&t.x>=c&&r!==t.x&&o0(s<l?r:n,s,c,l,s<l?n:r,s,t.x,t.y)&&(f=Math.abs(s-t.y)/(r-t.x),U0(t,o)&&(f<u||f===u&&(t.x>i.x||t.x===i.x&&bo(i,t)))&&(i=t,u=f)),t=t.next;while(t!==a);return i}function bo(o,e){return je(o.prev,o,e.prev)<0&&je(e.next,o,o.next)<0}function Mo(o,e,t,n){let i=o;do i.z===0&&(i.z=U2(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==o);i.prevZ.nextZ=null,i.prevZ=null,yo(i)}function yo(o){let e,t,n,i,r,s,a,c,l=1;do{for(t=o,o=null,r=null,s=0;t;){for(s++,n=t,a=0,e=0;e<l&&(a++,n=n.nextZ,!!n);e++);for(c=l;a>0||c>0&&n;)a!==0&&(c===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,a--):(i=n,n=n.nextZ,c--),r?r.nextZ=i:o=i,i.prevZ=r,r=i;t=n}r.nextZ=null,l*=2}while(s>1);return o}function U2(o,e,t,n,i){return o=(o-t)*i|0,e=(e-n)*i|0,o=(o|o<<8)&16711935,o=(o|o<<4)&252645135,o=(o|o<<2)&858993459,o=(o|o<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,o|e<<1}function So(o){let e=o,t=o;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==o);return t}function o0(o,e,t,n,i,r,s,a){return(i-s)*(e-a)>=(o-s)*(r-a)&&(o-s)*(n-a)>=(t-s)*(e-a)&&(t-s)*(r-a)>=(i-s)*(n-a)}function wo(o,e){return o.next.i!==e.i&&o.prev.i!==e.i&&!Eo(o,e)&&(U0(o,e)&&U0(e,o)&&To(o,e)&&(je(o.prev,o,e.prev)||je(o,e.prev,e))||L3(o,e)&&je(o.prev,o,o.next)>0&&je(e.prev,e,e.next)>0)}function je(o,e,t){return(e.y-o.y)*(t.x-e.x)-(e.x-o.x)*(t.y-e.y)}function L3(o,e){return o.x===e.x&&o.y===e.y}function A5(o,e,t,n){const i=m3(je(o,e,t)),r=m3(je(o,e,n)),s=m3(je(t,n,o)),a=m3(je(t,n,e));return!!(i!==r&&s!==a||i===0&&p3(o,t,e)||r===0&&p3(o,n,e)||s===0&&p3(t,o,n)||a===0&&p3(t,e,n))}function p3(o,e,t){return e.x<=Math.max(o.x,t.x)&&e.x>=Math.min(o.x,t.x)&&e.y<=Math.max(o.y,t.y)&&e.y>=Math.min(o.y,t.y)}function m3(o){return o>0?1:o<0?-1:0}function Eo(o,e){let t=o;do{if(t.i!==o.i&&t.next.i!==o.i&&t.i!==e.i&&t.next.i!==e.i&&A5(t,t.next,o,e))return!0;t=t.next}while(t!==o);return!1}function U0(o,e){return je(o.prev,o,o.next)<0?je(o,e,o.next)>=0&&je(o,o.prev,e)>=0:je(o,e,o.prev)<0||je(o,o.next,e)<0}function To(o,e){let t=o,n=!1;const i=(o.x+e.x)/2,r=(o.y+e.y)/2;do t.y>r!=t.next.y>r&&t.next.y!==t.y&&i<(t.next.x-t.x)*(r-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==o);return n}function C5(o,e){const t=new N2(o.i,o.x,o.y),n=new N2(e.i,e.x,e.y),i=o.next,r=e.prev;return o.next=e,e.prev=o,t.next=i,i.prev=t,n.next=t,t.prev=n,r.next=n,n.prev=r,n}function E4(o,e,t,n){const i=new N2(o,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function N0(o){o.next.prev=o.prev,o.prev.next=o.next,o.prevZ&&(o.prevZ.nextZ=o.nextZ),o.nextZ&&(o.nextZ.prevZ=o.prevZ)}function N2(o,e,t){this.i=o,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Ao(o,e,t,n){let i=0;for(let r=e,s=t-n;r<t;r+=n)i+=(o[s]-o[r])*(o[r+1]+o[s+1]),s=r;return i}class c0{static area(e){const t=e.length;let n=0;for(let i=t-1,r=0;r<t;i=r++)n+=e[i].x*e[r].y-e[r].x*e[i].y;return n*.5}static isClockWise(e){return c0.area(e)<0}static triangulateShape(e,t){const n=[],i=[],r=[];T4(e),A4(n,e);let s=e.length;t.forEach(T4);for(let c=0;c<t.length;c++)i.push(s),s+=t[c].length,A4(n,t[c]);const a=uo.triangulate(n,i);for(let c=0;c<a.length;c+=3)r.push(a.slice(c,c+3));return r}}function T4(o){const e=o.length;e>2&&o[e-1].equals(o[0])&&o.pop()}function A4(o,e){for(let t=0;t<e.length;t++)o.push(e[t].x),o.push(e[t].y)}class j2 extends lt{constructor(e=new M3([new he(.5,.5),new he(-.5,.5),new he(-.5,-.5),new he(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],r=[];for(let a=0,c=e.length;a<c;a++){const l=e[a];s(l)}this.setAttribute("position",new Je(i,3)),this.setAttribute("uv",new Je(r,2)),this.computeVertexNormals();function s(a){const c=[],l=t.curveSegments!==void 0?t.curveSegments:12,u=t.steps!==void 0?t.steps:1,f=t.depth!==void 0?t.depth:1;let h=t.bevelEnabled!==void 0?t.bevelEnabled:!0,p=t.bevelThickness!==void 0?t.bevelThickness:.2,g=t.bevelSize!==void 0?t.bevelSize:p-.1,_=t.bevelOffset!==void 0?t.bevelOffset:0,m=t.bevelSegments!==void 0?t.bevelSegments:3;const d=t.extrudePath,w=t.UVGenerator!==void 0?t.UVGenerator:Co;let x,v=!1,y,C,R,D;d&&(x=d.getSpacedPoints(u),v=!0,h=!1,y=d.computeFrenetFrames(u,!1),C=new L,R=new L,D=new L),h||(m=0,p=0,g=0,_=0);const M=a.extractPoints(l);let T=M.shape;const W=M.holes;if(!c0.isClockWise(T)){T=T.reverse();for(let Q=0,q=W.length;Q<q;Q++){const K=W[Q];c0.isClockWise(K)&&(W[Q]=K.reverse())}}const I=c0.triangulateShape(T,W),N=T;for(let Q=0,q=W.length;Q<q;Q++){const K=W[Q];T=T.concat(K)}function H(Q,q,K){return q||console.error("THREE.ExtrudeGeometry: vec does not exist"),Q.clone().addScaledVector(q,K)}const J=T.length,ee=I.length;function j(Q,q,K){let _e,le,Te;const Ae=Q.x-q.x,Se=Q.y-q.y,Ie=K.x-Q.x,Ve=K.y-Q.y,E=Ae*Ae+Se*Se,b=Ae*Ve-Se*Ie;if(Math.abs(b)>Number.EPSILON){const B=Math.sqrt(E),ne=Math.sqrt(Ie*Ie+Ve*Ve),ie=q.x-Se/B,ce=q.y+Ae/B,A=K.x-Ve/ne,Y=K.y+Ie/ne,z=((A-ie)*Ve-(Y-ce)*Ie)/(Ae*Ve-Se*Ie);_e=ie+Ae*z-Q.x,le=ce+Se*z-Q.y;const de=_e*_e+le*le;if(de<=2)return new he(_e,le);Te=Math.sqrt(de/2)}else{let B=!1;Ae>Number.EPSILON?Ie>Number.EPSILON&&(B=!0):Ae<-Number.EPSILON?Ie<-Number.EPSILON&&(B=!0):Math.sign(Se)===Math.sign(Ve)&&(B=!0),B?(_e=-Se,le=Ae,Te=Math.sqrt(E)):(_e=Ae,le=Se,Te=Math.sqrt(E/2))}return new he(_e/Te,le/Te)}const oe=[];for(let Q=0,q=N.length,K=q-1,_e=Q+1;Q<q;Q++,K++,_e++)K===q&&(K=0),_e===q&&(_e=0),oe[Q]=j(N[Q],N[K],N[_e]);const te=[];let Me,ae=oe.concat();for(let Q=0,q=W.length;Q<q;Q++){const K=W[Q];Me=[];for(let _e=0,le=K.length,Te=le-1,Ae=_e+1;_e<le;_e++,Te++,Ae++)Te===le&&(Te=0),Ae===le&&(Ae=0),Me[_e]=j(K[_e],K[Te],K[Ae]);te.push(Me),ae=ae.concat(Me)}for(let Q=0;Q<m;Q++){const q=Q/m,K=p*Math.cos(q*Math.PI/2),_e=g*Math.sin(q*Math.PI/2)+_;for(let le=0,Te=N.length;le<Te;le++){const Ae=H(N[le],oe[le],_e);F(Ae.x,Ae.y,-K)}for(let le=0,Te=W.length;le<Te;le++){const Ae=W[le];Me=te[le];for(let Se=0,Ie=Ae.length;Se<Ie;Se++){const Ve=H(Ae[Se],Me[Se],_e);F(Ve.x,Ve.y,-K)}}}const V=g+_;for(let Q=0;Q<J;Q++){const q=h?H(T[Q],ae[Q],V):T[Q];v?(R.copy(y.normals[0]).multiplyScalar(q.x),C.copy(y.binormals[0]).multiplyScalar(q.y),D.copy(x[0]).add(R).add(C),F(D.x,D.y,D.z)):F(q.x,q.y,0)}for(let Q=1;Q<=u;Q++)for(let q=0;q<J;q++){const K=h?H(T[q],ae[q],V):T[q];v?(R.copy(y.normals[Q]).multiplyScalar(K.x),C.copy(y.binormals[Q]).multiplyScalar(K.y),D.copy(x[Q]).add(R).add(C),F(D.x,D.y,D.z)):F(K.x,K.y,f/u*Q)}for(let Q=m-1;Q>=0;Q--){const q=Q/m,K=p*Math.cos(q*Math.PI/2),_e=g*Math.sin(q*Math.PI/2)+_;for(let le=0,Te=N.length;le<Te;le++){const Ae=H(N[le],oe[le],_e);F(Ae.x,Ae.y,f+K)}for(let le=0,Te=W.length;le<Te;le++){const Ae=W[le];Me=te[le];for(let Se=0,Ie=Ae.length;Se<Ie;Se++){const Ve=H(Ae[Se],Me[Se],_e);v?F(Ve.x,Ve.y+x[u-1].y,x[u-1].x+K):F(Ve.x,Ve.y,f+K)}}}$(),fe();function $(){const Q=i.length/3;if(h){let q=0,K=J*q;for(let _e=0;_e<ee;_e++){const le=I[_e];Le(le[2]+K,le[1]+K,le[0]+K)}q=u+m*2,K=J*q;for(let _e=0;_e<ee;_e++){const le=I[_e];Le(le[0]+K,le[1]+K,le[2]+K)}}else{for(let q=0;q<ee;q++){const K=I[q];Le(K[2],K[1],K[0])}for(let q=0;q<ee;q++){const K=I[q];Le(K[0]+J*u,K[1]+J*u,K[2]+J*u)}}n.addGroup(Q,i.length/3-Q,0)}function fe(){const Q=i.length/3;let q=0;pe(N,q),q+=N.length;for(let K=0,_e=W.length;K<_e;K++){const le=W[K];pe(le,q),q+=le.length}n.addGroup(Q,i.length/3-Q,1)}function pe(Q,q){let K=Q.length;for(;--K>=0;){const _e=K;let le=K-1;le<0&&(le=Q.length-1);for(let Te=0,Ae=u+m*2;Te<Ae;Te++){const Se=J*Te,Ie=J*(Te+1),Ve=q+_e+Se,E=q+le+Se,b=q+le+Ie,B=q+_e+Ie;Ce(Ve,E,b,B)}}}function F(Q,q,K){c.push(Q),c.push(q),c.push(K)}function Le(Q,q,K){se(Q),se(q),se(K);const _e=i.length/3,le=w.generateTopUV(n,i,_e-3,_e-2,_e-1);xe(le[0]),xe(le[1]),xe(le[2])}function Ce(Q,q,K,_e){se(Q),se(q),se(_e),se(q),se(K),se(_e);const le=i.length/3,Te=w.generateSideWallUV(n,i,le-6,le-3,le-2,le-1);xe(Te[0]),xe(Te[1]),xe(Te[3]),xe(Te[1]),xe(Te[2]),xe(Te[3])}function se(Q){i.push(c[Q*3+0]),i.push(c[Q*3+1]),i.push(c[Q*3+2])}function xe(Q){r.push(Q.x),r.push(Q.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return Lo(t,n,e)}static fromJSON(e,t){const n=[];for(let r=0,s=e.shapes.length;r<s;r++){const a=t[e.shapes[r]];n.push(a)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new E5[i.type]().fromJSON(i)),new j2(n,e.options)}}const Co={generateTopUV:function(o,e,t,n,i){const r=e[t*3],s=e[t*3+1],a=e[n*3],c=e[n*3+1],l=e[i*3],u=e[i*3+1];return[new he(r,s),new he(a,c),new he(l,u)]},generateSideWallUV:function(o,e,t,n,i,r){const s=e[t*3],a=e[t*3+1],c=e[t*3+2],l=e[n*3],u=e[n*3+1],f=e[n*3+2],h=e[i*3],p=e[i*3+1],g=e[i*3+2],_=e[r*3],m=e[r*3+1],d=e[r*3+2];return Math.abs(a-u)<Math.abs(s-l)?[new he(s,1-c),new he(l,1-f),new he(h,1-g),new he(_,1-d)]:[new he(a,1-c),new he(u,1-f),new he(p,1-g),new he(m,1-d)]}};function Lo(o,e,t){if(t.shapes=[],Array.isArray(o))for(let n=0,i=o.length;n<i;n++){const r=o[n];t.shapes.push(r.uuid)}else t.shapes.push(o.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class Z2 extends lt{constructor(e=1,t=32,n=16,i=0,r=Math.PI*2,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:r,thetaStart:s,thetaLength:a},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const c=Math.min(s+a,Math.PI);let l=0;const u=[],f=new L,h=new L,p=[],g=[],_=[],m=[];for(let d=0;d<=n;d++){const w=[],x=d/n;let v=0;d===0&&s===0?v=.5/t:d===n&&c===Math.PI&&(v=-.5/t);for(let y=0;y<=t;y++){const C=y/t;f.x=-e*Math.cos(i+C*r)*Math.sin(s+x*a),f.y=e*Math.cos(s+x*a),f.z=e*Math.sin(i+C*r)*Math.sin(s+x*a),g.push(f.x,f.y,f.z),h.copy(f).normalize(),_.push(h.x,h.y,h.z),m.push(C+v,1-x),w.push(l++)}u.push(w)}for(let d=0;d<n;d++)for(let w=0;w<t;w++){const x=u[d][w+1],v=u[d][w],y=u[d+1][w],C=u[d+1][w+1];(d!==0||s>0)&&p.push(x,v,C),(d!==n-1||c<Math.PI)&&p.push(v,y,C)}this.setIndex(p),this.setAttribute("position",new Je(g,3)),this.setAttribute("normal",new Je(_,3)),this.setAttribute("uv",new Je(m,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Z2(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}const C4={enabled:!1,files:{},add:function(o,e){this.enabled!==!1&&(this.files[o]=e)},get:function(o){if(this.enabled!==!1)return this.files[o]},remove:function(o){delete this.files[o]},clear:function(){this.files={}}};class Po{constructor(e,t,n){const i=this;let r=!1,s=0,a=0,c;const l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(u){a++,r===!1&&i.onStart!==void 0&&i.onStart(u,s,a),r=!0},this.itemEnd=function(u){s++,i.onProgress!==void 0&&i.onProgress(u,s,a),s===a&&(r=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(u){i.onError!==void 0&&i.onError(u)},this.resolveURL=function(u){return c?c(u):u},this.setURLModifier=function(u){return c=u,this},this.addHandler=function(u,f){return l.push(u,f),this},this.removeHandler=function(u){const f=l.indexOf(u);return f!==-1&&l.splice(f,2),this},this.getHandler=function(u){for(let f=0,h=l.length;f<h;f+=2){const p=l[f],g=l[f+1];if(p.global&&(p.lastIndex=0),p.test(u))return g}return null}}}const Ro=new Po;class L5{constructor(e){this.manager=e!==void 0?e:Ro,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,r){n.load(e,i,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const a1={};class Do extends Error{constructor(e,t){super(e),this.response=t}}class Io extends L5{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=C4.get(e);if(r!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(a1[e]!==void 0){a1[e].push({onLoad:t,onProgress:n,onError:i});return}a1[e]=[],a1[e].push({onLoad:t,onProgress:n,onError:i});const s=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,c=this.responseType;fetch(s).then(l=>{if(l.status===200||l.status===0){if(l.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||l.body===void 0||l.body.getReader===void 0)return l;const u=a1[e],f=l.body.getReader(),h=l.headers.get("Content-Length")||l.headers.get("X-File-Size"),p=h?parseInt(h):0,g=p!==0;let _=0;const m=new ReadableStream({start(d){w();function w(){f.read().then(({done:x,value:v})=>{if(x)d.close();else{_+=v.byteLength;const y=new ProgressEvent("progress",{lengthComputable:g,loaded:_,total:p});for(let C=0,R=u.length;C<R;C++){const D=u[C];D.onProgress&&D.onProgress(y)}d.enqueue(v),w()}})}}});return new Response(m)}else throw new Do(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`,l)}).then(l=>{switch(c){case"arraybuffer":return l.arrayBuffer();case"blob":return l.blob();case"document":return l.text().then(u=>new DOMParser().parseFromString(u,a));case"json":return l.json();default:if(a===void 0)return l.text();{const f=/charset="?([^;"\s]*)"?/i.exec(a),h=f&&f[1]?f[1].toLowerCase():void 0,p=new TextDecoder(h);return l.arrayBuffer().then(g=>p.decode(g))}}}).then(l=>{C4.add(e,l);const u=a1[e];delete a1[e];for(let f=0,h=u.length;f<h;f++){const p=u[f];p.onLoad&&p.onLoad(l)}}).catch(l=>{const u=a1[e];if(u===void 0)throw this.manager.itemError(e),l;delete a1[e];for(let f=0,h=u.length;f<h;f++){const p=u[f];p.onError&&p.onError(l)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class Uo{constructor(e,t,n=0,i=1/0){this.ray=new H2(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new V2,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,n=[]){return O2(e,this,n,t),n.sort(L4),n}intersectObjects(e,t=!0,n=[]){for(let i=0,r=e.length;i<r;i++)O2(e[i],this,n,t);return n.sort(L4),n}}function L4(o,e){return o.distance-e.distance}function O2(o,e,t,n){if(o.layers.test(e.layers)&&o.raycast(e,t),n===!0){const i=o.children;for(let r=0,s=i.length;r<s;r++)O2(i[r],e,t,!0)}}class P4{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(st(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const R4=new L,g3=new L;class No{constructor(e=new L,t=new L){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){R4.subVectors(e,this.start),g3.subVectors(this.end,this.start);const n=g3.dot(g3);let r=g3.dot(R4)/n;return t&&(r=st(r,0,1)),r}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}class Oo extends M5{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new lt;i.setAttribute("position",new Je(t,3)),i.setAttribute("color",new Je(n,3));const r=new W2({vertexColors:!0,toneMapped:!1});super(i,r),this.type="AxesHelper"}setColors(e,t,n){const i=new We,r=this.geometry.attributes.color.array;return i.set(e),i.toArray(r,0),i.toArray(r,3),i.set(t),i.toArray(r,6),i.toArray(r,9),i.set(n),i.toArray(r,12),i.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Fo{constructor(){this.type="ShapePath",this.color=new We,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new I2,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this}bezierCurveTo(e,t,n,i,r,s){return this.currentPath.bezierCurveTo(e,t,n,i,r,s),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(d){const w=[];for(let x=0,v=d.length;x<v;x++){const y=d[x],C=new M3;C.curves=y.curves,w.push(C)}return w}function n(d,w){const x=w.length;let v=!1;for(let y=x-1,C=0;C<x;y=C++){let R=w[y],D=w[C],M=D.x-R.x,T=D.y-R.y;if(Math.abs(T)>Number.EPSILON){if(T<0&&(R=w[C],M=-M,D=w[y],T=-T),d.y<R.y||d.y>D.y)continue;if(d.y===R.y){if(d.x===R.x)return!0}else{const W=T*(d.x-R.x)-M*(d.y-R.y);if(W===0)return!0;if(W<0)continue;v=!v}}else{if(d.y!==R.y)continue;if(D.x<=d.x&&d.x<=R.x||R.x<=d.x&&d.x<=D.x)return!0}}return v}const i=c0.isClockWise,r=this.subPaths;if(r.length===0)return[];let s,a,c;const l=[];if(r.length===1)return a=r[0],c=new M3,c.curves=a.curves,l.push(c),l;let u=!i(r[0].getPoints());u=e?!u:u;const f=[],h=[];let p=[],g=0,_;h[g]=void 0,p[g]=[];for(let d=0,w=r.length;d<w;d++)a=r[d],_=a.getPoints(),s=i(_),s=e?!s:s,s?(!u&&h[g]&&g++,h[g]={s:new M3,p:_},h[g].s.curves=a.curves,u&&g++,p[g]=[]):p[g].push({h:a,p:_[0]});if(!h[0])return t(r);if(h.length>1){let d=!1,w=0;for(let x=0,v=h.length;x<v;x++)f[x]=[];for(let x=0,v=h.length;x<v;x++){const y=p[x];for(let C=0;C<y.length;C++){const R=y[C];let D=!0;for(let M=0;M<h.length;M++)n(R.p,h[M].p)&&(x!==M&&w++,D?(D=!1,f[M].push(R)):d=!0);D&&f[x].push(R)}}w>0&&d===!1&&(p=f)}let m;for(let d=0,w=h.length;d<w;d++){c=h[d].s,l.push(c),m=p[d];for(let x=0,v=m.length;x<v;x++)c.holes.push(m[x].h)}return l}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:B2}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=B2);const y3=0,zo=1,Bo=new L,D4=new No,m2=new g1,I4=new L,_3=new At;class Ho{constructor(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new U4,this.unassigned=new U4,this.vertices=[]}setFromPoints(e){if(e.length>=4){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.vertices.push(new Vo(e[t]));this.compute()}return this}setFromObject(e){const t=[];return e.updateMatrixWorld(!0),e.traverse(function(n){const i=n.geometry;if(i!==void 0){const r=i.attributes.position;if(r!==void 0)for(let s=0,a=r.count;s<a;s++){const c=new L;c.fromBufferAttribute(r,s).applyMatrix4(n.matrixWorld),t.push(c)}}}),this.setFromPoints(t)}containsPoint(e){const t=this.faces;for(let n=0,i=t.length;n<i;n++)if(t[n].distanceToPoint(e)>this.tolerance)return!1;return!0}intersectRay(e,t){const n=this.faces;let i=-1/0,r=1/0;for(let s=0,a=n.length;s<a;s++){const c=n[s],l=c.distanceToPoint(e.origin),u=c.normal.dot(e.direction);if(l>0&&u>=0)return null;const f=u!==0?-l/u:0;if(!(f<=0)&&(u>0?r=Math.min(f,r):i=Math.max(f,i),i>r))return null}return i!==-1/0?e.at(i,t):e.at(r,t),t}intersectsRay(e){return this.intersectRay(e,Bo)!==null}makeEmpty(){return this.faces=[],this.vertices=[],this}addVertexToFace(e,t){return e.face=t,t.outside===null?this.assigned.append(e):this.assigned.insertBefore(t.outside,e),t.outside=e,this}removeVertexFromFace(e,t){return e===t.outside&&(e.next!==null&&e.next.face===t?t.outside=e.next:t.outside=null),this.assigned.remove(e),this}removeAllVerticesFromFace(e){if(e.outside!==null){const t=e.outside;let n=e.outside;for(;n.next!==null&&n.next.face===e;)n=n.next;return this.assigned.removeSubList(t,n),t.prev=n.next=null,e.outside=null,t}}deleteFaceVertices(e,t){const n=this.removeAllVerticesFromFace(e);if(n!==void 0)if(t===void 0)this.unassigned.appendChain(n);else{let i=n;do{const r=i.next;t.distanceToPoint(i.point)>this.tolerance?this.addVertexToFace(i,t):this.unassigned.append(i),i=r}while(i!==null)}return this}resolveUnassignedPoints(e){if(this.unassigned.isEmpty()===!1){let t=this.unassigned.first();do{const n=t.next;let i=this.tolerance,r=null;for(let s=0;s<e.length;s++){const a=e[s];if(a.mark===y3){const c=a.distanceToPoint(t.point);if(c>i&&(i=c,r=a),i>1e3*this.tolerance)break}}r!==null&&this.addVertexToFace(t,r),t=n}while(t!==null)}return this}computeExtremes(){const e=new L,t=new L,n=[],i=[];for(let r=0;r<3;r++)n[r]=i[r]=this.vertices[0];e.copy(this.vertices[0].point),t.copy(this.vertices[0].point);for(let r=0,s=this.vertices.length;r<s;r++){const a=this.vertices[r],c=a.point;for(let l=0;l<3;l++)c.getComponent(l)<e.getComponent(l)&&(e.setComponent(l,c.getComponent(l)),n[l]=a);for(let l=0;l<3;l++)c.getComponent(l)>t.getComponent(l)&&(t.setComponent(l,c.getComponent(l)),i[l]=a)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(e.x),Math.abs(t.x))+Math.max(Math.abs(e.y),Math.abs(t.y))+Math.max(Math.abs(e.z),Math.abs(t.z))),{min:n,max:i}}computeInitialHull(){const e=this.vertices,t=this.computeExtremes(),n=t.min,i=t.max;let r=0,s=0;for(let h=0;h<3;h++){const p=i[h].point.getComponent(h)-n[h].point.getComponent(h);p>r&&(r=p,s=h)}const a=n[s],c=i[s];let l,u;r=0,D4.set(a.point,c.point);for(let h=0,p=this.vertices.length;h<p;h++){const g=e[h];if(g!==a&&g!==c){D4.closestPointToPoint(g.point,!0,I4);const _=I4.distanceToSquared(g.point);_>r&&(r=_,l=g)}}r=-1,m2.setFromCoplanarPoints(a.point,c.point,l.point);for(let h=0,p=this.vertices.length;h<p;h++){const g=e[h];if(g!==a&&g!==c&&g!==l){const _=Math.abs(m2.distanceToPoint(g.point));_>r&&(r=_,u=g)}}const f=[];if(m2.distanceToPoint(u.point)<0){f.push(zt.create(a,c,l),zt.create(u,c,a),zt.create(u,l,c),zt.create(u,a,l));for(let h=0;h<3;h++){const p=(h+1)%3;f[h+1].getEdge(2).setTwin(f[0].getEdge(p)),f[h+1].getEdge(1).setTwin(f[p+1].getEdge(0))}}else{f.push(zt.create(a,l,c),zt.create(u,a,c),zt.create(u,c,l),zt.create(u,l,a));for(let h=0;h<3;h++){const p=(h+1)%3;f[h+1].getEdge(2).setTwin(f[0].getEdge((3-h)%3)),f[h+1].getEdge(0).setTwin(f[p+1].getEdge(1))}}for(let h=0;h<4;h++)this.faces.push(f[h]);for(let h=0,p=e.length;h<p;h++){const g=e[h];if(g!==a&&g!==c&&g!==l&&g!==u){r=this.tolerance;let _=null;for(let m=0;m<4;m++){const d=this.faces[m].distanceToPoint(g.point);d>r&&(r=d,_=this.faces[m])}_!==null&&this.addVertexToFace(g,_)}}return this}reindexFaces(){const e=[];for(let t=0;t<this.faces.length;t++){const n=this.faces[t];n.mark===y3&&e.push(n)}return this.faces=e,this}nextVertexToAdd(){if(this.assigned.isEmpty()===!1){let e,t=0;const n=this.assigned.first().face;let i=n.outside;do{const r=n.distanceToPoint(i.point);r>t&&(t=r,e=i),i=i.next}while(i!==null&&i.face===n);return e}}computeHorizon(e,t,n,i){this.deleteFaceVertices(n),n.mark=zo;let r;t===null?r=t=n.getEdge(0):r=t.next;do{const s=r.twin,a=s.face;a.mark===y3&&(a.distanceToPoint(e)>this.tolerance?this.computeHorizon(e,s,a,i):i.push(r)),r=r.next}while(r!==t);return this}addAdjoiningFace(e,t){const n=zt.create(e,t.tail(),t.head());return this.faces.push(n),n.getEdge(-1).setTwin(t.twin),n.getEdge(0)}addNewFaces(e,t){this.newFaces=[];let n=null,i=null;for(let r=0;r<t.length;r++){const s=t[r],a=this.addAdjoiningFace(e,s);n===null?n=a:a.next.setTwin(i),this.newFaces.push(a.face),i=a}return n.next.setTwin(i),this}addVertexToHull(e){const t=[];return this.unassigned.clear(),this.removeVertexFromFace(e,e.face),this.computeHorizon(e.point,null,e.face,t),this.addNewFaces(e,t),this.resolveUnassignedPoints(this.newFaces),this}cleanup(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this}compute(){let e;for(this.computeInitialHull();(e=this.nextVertexToAdd())!==void 0;)this.addVertexToHull(e);return this.reindexFaces(),this.cleanup(),this}}class zt{constructor(){this.normal=new L,this.midpoint=new L,this.area=0,this.constant=0,this.outside=null,this.mark=y3,this.edge=null}static create(e,t,n){const i=new zt,r=new g2(e,i),s=new g2(t,i),a=new g2(n,i);return r.next=a.prev=s,s.next=r.prev=a,a.next=s.prev=r,i.edge=r,i.compute()}getEdge(e){let t=this.edge;for(;e>0;)t=t.next,e--;for(;e<0;)t=t.prev,e++;return t}compute(){const e=this.edge.tail(),t=this.edge.head(),n=this.edge.next.head();return _3.set(e.point,t.point,n.point),_3.getNormal(this.normal),_3.getMidpoint(this.midpoint),this.area=_3.getArea(),this.constant=this.normal.dot(this.midpoint),this}distanceToPoint(e){return this.normal.dot(e)-this.constant}}class g2{constructor(e,t){this.vertex=e,this.prev=null,this.next=null,this.twin=null,this.face=t}head(){return this.vertex}tail(){return this.prev?this.prev.vertex:null}length(){const e=this.head(),t=this.tail();return t!==null?t.point.distanceTo(e.point):-1}lengthSquared(){const e=this.head(),t=this.tail();return t!==null?t.point.distanceToSquared(e.point):-1}setTwin(e){return this.twin=e,e.twin=this,this}}class Vo{constructor(e){this.point=e,this.prev=null,this.next=null,this.face=null}}class U4{constructor(){this.head=null,this.tail=null}first(){return this.head}last(){return this.tail}clear(){return this.head=this.tail=null,this}insertBefore(e,t){return t.prev=e.prev,t.next=e,t.prev===null?this.head=t:t.prev.next=t,e.prev=t,this}insertAfter(e,t){return t.prev=e,t.next=e.next,t.next===null?this.tail=t:t.next.prev=t,e.next=t,this}append(e){return this.head===null?this.head=e:this.tail.next=e,e.prev=this.tail,e.next=null,this.tail=e,this}appendChain(e){for(this.head===null?this.head=e:this.tail.next=e,e.prev=this.tail;e.next!==null;)e=e.next;return this.tail=e,this}remove(e){return e.prev===null?this.head=e.next:e.prev.next=e.next,e.next===null?this.tail=e.prev:e.next.prev=e.prev,this}removeSubList(e,t){return e.prev===null?this.head=t.next:e.prev.next=t.next,t.next===null?this.tail=e.prev:t.next.prev=e.prev,this}isEmpty(){return this.head===null}}class Go extends lt{constructor(e=[]){super();const t=[],n=[],r=new Ho().setFromPoints(e).faces;for(let s=0;s<r.length;s++){const a=r[s];let c=a.edge;do{const l=c.head().point;t.push(l.x,l.y,l.z),n.push(a.normal.x,a.normal.y,a.normal.z),c=c.next}while(c!==a.edge)}this.setAttribute("position",new Je(t,3)),this.setAttribute("normal",new Je(n,3))}}class ko extends L5{constructor(e){super(e)}load(e,t,n,i){const r=this,s=new Io(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(e,function(a){const c=r.parse(JSON.parse(a));t&&t(c)},n,i)}parse(e){return new Wo(e)}}class Wo{constructor(e){this.isFont=!0,this.type="Font",this.data=e}generateShapes(e,t=100){const n=[],i=qo(e,t,this.data);for(let r=0,s=i.length;r<s;r++)n.push(...i[r].toShapes());return n}}function qo(o,e,t){const n=Array.from(o),i=e/t.resolution,r=(t.boundingBox.yMax-t.boundingBox.yMin+t.underlineThickness)*i,s=[];let a=0,c=0;for(let l=0;l<n.length;l++){const u=n[l];if(u===`
`)a=0,c-=r;else{const f=Xo(u,i,a,c,t);a+=f.offsetX,s.push(f.path)}}return s}function Xo(o,e,t,n,i){const r=i.glyphs[o]||i.glyphs["?"];if(!r){console.error('THREE.Font: character "'+o+'" does not exists in font family '+i.familyName+".");return}const s=new Fo;let a,c,l,u,f,h,p,g;if(r.o){const _=r._cachedOutline||(r._cachedOutline=r.o.split(" "));for(let m=0,d=_.length;m<d;)switch(_[m++]){case"m":a=_[m++]*e+t,c=_[m++]*e+n,s.moveTo(a,c);break;case"l":a=_[m++]*e+t,c=_[m++]*e+n,s.lineTo(a,c);break;case"q":l=_[m++]*e+t,u=_[m++]*e+n,f=_[m++]*e+t,h=_[m++]*e+n,s.quadraticCurveTo(f,h,l,u);break;case"b":l=_[m++]*e+t,u=_[m++]*e+n,f=_[m++]*e+t,h=_[m++]*e+n,p=_[m++]*e+t,g=_[m++]*e+n,s.bezierCurveTo(f,h,p,g,l,u);break}}return{offsetX:r.ha*e,path:s}}class Yo extends j2{constructor(e,t={}){const n=t.font;if(n===void 0)super();else{const i=n.generateShapes(e,t.size);t.depth=t.height!==void 0?t.height:50,t.bevelThickness===void 0&&(t.bevelThickness=10),t.bevelSize===void 0&&(t.bevelSize=8),t.bevelEnabled===void 0&&(t.bevelEnabled=!1),super(i,t)}this.type="TextGeometry"}}const N4=[{color:"\u9752",l:"54.54893894",a:"-11.73873234",b:"-0.7804227",parent:"\u9752"},{color:"\u8D64",l:"53.77313247",a:"39.15887941",b:"18.09358232",parent:"\u8D64"},{color:"\u9EC4",l:"72.27785236",a:"9.12971148",b:"47.41220973",parent:"\u9EC4"},{color:"\u767D",l:"82.11110918",a:"5.59169054",b:"6.1117227",parent:"\u767D"},{color:"\u9ED1",l:"32.69895543",a:"4.74059813",b:"0.82755998",parent:"\u9ED1"}],O4=[{color:"\u8759\u8760\u7070",l:"39.557",a:"-5.012",b:"2.917",parent:"\u9752"},{color:"\u6D45\u8C46\u7070",l:"59",a:"6",b:"6",parent:"\u9752"},{color:"\u6A44\u6984\u77F3\u7070",l:"55.115",a:"-7.373",b:"1.897",parent:"\u9752"},{color:"\u6A44\u6984\u7070",l:"45.359",a:"-1.469",b:"9.288",parent:"\u9752"},{color:"\u86DB\u7EB2\u7070",l:"57.327",a:"10.467",b:"4.656",parent:"\u9752"},{color:"\u7C89\u7D2B",l:"65.9",a:"11.8",b:"-27",parent:"\u9752"},{color:"\u6DE1\u7D2B",l:"71.859",a:"6.927",b:"-22.277",parent:"\u9752"},{color:"\u6708\u5170",l:"45",a:"-16",b:"-43",parent:"\u9752"},{color:"\u6DF1\u6708\u5170",l:"35",a:"-8",b:"-43",parent:"\u9752"},{color:"\u84DD\u91C7\u548C",l:"27.297",a:"0.099",b:"-30.4",parent:"\u9752"},{color:"\u665A\u5929\u5170",l:"57",a:"-21",b:"-34",parent:"\u9752"},{color:"\u6DF1\u5B54\u96C0\u5170",l:"34",a:"-22",b:"-29",parent:"\u9752"},{color:"\u6DF1\u8776\u5170",l:"49",a:"-31",b:"-14",parent:"\u9752"},{color:"\u6D45\u5170",l:"73",a:"-8",b:"-18",parent:"\u9752"},{color:"\u5929\u5170",l:"68",a:"-19",b:"-25",parent:"\u9752"},{color:"\u6DF1\u4E2D\u84DD",l:"33",a:"4",b:"-39",parent:"\u9752"},{color:"\u9634\u4E39\u58EB\u6797",l:"28.927",a:"1.027",b:"-26.392",parent:"\u9752"},{color:"\u7F57\u84DD\u7070",l:"39.486",a:"5.596",b:"-13.572",parent:"\u9752"},{color:"\u7AF9\u6708\u8272",l:"71.105",a:"-3.614",b:"-11.588",parent:"\u9752"},{color:"\u7130\u84DD",l:"71.58",a:"4.718",b:"-32.921",parent:"\u9752"},{color:"\u98DE\u71D5\u8349\u84DD",l:"40.903",a:"4.762",b:"-48.008",parent:"\u9752"},{color:"\u85CF\u9752",l:"32.68",a:"3.153",b:"-25.664",parent:"\u9752"},{color:"\u6DF1\u86CB\u9752",l:"35",a:"-29",b:"-20",parent:"\u9752"},{color:"\u627F\u5FB7\u7682",l:"41.411",a:"-0.299",b:"3.615",parent:"\u9752"},{color:"\u6D77\u9752",l:"67.875",a:"-17.491",b:"-28.626",parent:"\u9752"},{color:"\u9EDD\u7EFF",l:"45.022",a:"-13.913",b:"5.065",parent:"\u9752"},{color:"\u7EC7\u9526\u7070",l:"61.223",a:"-3.941",b:"-1.358",parent:"\u9752"},{color:"\u58A8\u7EFF",l:"32.145",a:"-34.474",b:"-0.609",parent:"\u9752"},{color:"\u6C99\u7EFF",l:"47.721",a:"-17.358",b:"0.707",parent:"\u9752"},{color:"\u6DF1\u674F\u7070",l:"48",a:"7",b:"11",parent:"\u9752"},{color:"\u7409\u7483\u8272",l:"51.761",a:"8.215",b:"11.993",parent:"\u9752"},{color:"\u6D45\u5496\u5561",l:"50",a:"8",b:"10",parent:"\u9752"},{color:"\u6FEF\u7EDB",l:"45.374",a:"5.34",b:"6.994",parent:"\u9752"},{color:"\u94F6\u8910",l:"62.912",a:"12.104",b:"3.717",parent:"\u9752"},{color:"\u7F57\u5170\u7D2B",l:"27.959",a:"49.076",b:"37.273",parent:"\u8D64"},{color:"\u8336\u53F6\u672B",l:"38.867",a:"29.996",b:"43.885",parent:"\u8D64"},{color:"\u6DF1\u7C73\u68D5",l:"66",a:"28",b:"42",parent:"\u8D64"},{color:"\u6D45\u8840\u72593",l:"75",a:"36",b:"35",parent:"\u8D64"},{color:"\u5A9A\u8776",l:"54.156",a:"26.314",b:"42.949",parent:"\u8D64"},{color:"\u6DF1\u8089\u8272",l:"75",a:"31",b:"35",parent:"\u8D64"},{color:"\u7C89\u6A59\u8272",l:"66.873",a:"26.318",b:"38.757",parent:"\u8D64"},{color:"\u7F8E\u4EBA\u7126\u6A59",l:"65.713",a:"40.252",b:"56.882",parent:"\u8D64"},{color:"\u6A58\u6A59",l:"68.621",a:"37.324",b:"51.883",parent:"\u8D64"},{color:"\u6A31\u7EA2",l:"52",a:"61",b:"28",parent:"\u8D64"},{color:"\u6A59\u8272",l:"57.891",a:"30.342",b:"50.018",parent:"\u8D64"},{color:"\u6731\u6A31",l:"31.43",a:"46.791",b:"27.322",parent:"\u8D64"},{color:"\u6731\u6E5B",l:"35.405",a:"42.143",b:"24.859",parent:"\u8D64"},{color:"\u6731\u5B54\u9633",l:"39.898",a:"60.281",b:"27.572",parent:"\u8D64"},{color:"\u4E39\u7F7D",l:"48.099",a:"74.232",b:"56.84",parent:"\u8D64"},{color:"\u6731\u989C\u9161",l:"71.759",a:"29.213",b:"32.57",parent:"\u8D64"},{color:"\u62C9\u4E1D\u7EA2",l:"51.308",a:"73.75",b:"55.582",parent:"\u8D64"},{color:"\u671D\u971E\u7EA2",l:"28.147",a:"50.955",b:"37.545",parent:"\u8D64"},{color:"\u6DF1\u897F\u7EA2",l:"50",a:"56",b:"27",parent:"\u8D64"},{color:"\u6731\u7F25",l:"64.48",a:"54.19",b:"51",parent:"\u8D64"},{color:"\u5915\u9633\u7EA2",l:"56.559",a:"62.911",b:"34.945",parent:"\u8D64"},{color:"\u82F9\u679C\u7EA22",l:"71.559",a:"47.2",b:"28.738",parent:"\u8D64"},{color:"\u82F9\u679C\u7EA2",l:"60.942",a:"54.498",b:"28.143",parent:"\u8D64"},{color:"\u8C37\u9798\u7EA2",l:"68.949",a:"42.928",b:"26.881",parent:"\u8D64"},{color:"\u94C1\u6C34\u7EA2",l:"58.06",a:"63.32",b:"37.238",parent:"\u8D64"},{color:"\u91CE\u8537\u8587\u7EA2",l:"73.24",a:"30.805",b:"31.469",parent:"\u8D64"},{color:"\u71D5\u9894\u7EA2",l:"61.377",a:"55.446",b:"66.472",parent:"\u8D64"},{color:"\u5510\u83D6\u84B2\u7EA2",l:"50.707",a:"64.132",b:"32.542",parent:"\u8D64"},{color:"\u9E45\u51A0\u7EA2",l:"44.925",a:"66.647",b:"39.401",parent:"\u8D64"},{color:"\u8D6D\u7EA2",l:"49.52",a:"25.693",b:"24.031",parent:"\u8D64"},{color:"\u68E0\u68A8\u8910",l:"44.371",a:"21.685",b:"24.056",parent:"\u8D64"},{color:"\u7DC5\u7D7A",l:"37.764",a:"18.955",b:"26.91",parent:"\u8D64"},{color:"\u69DF\u6994\u68D5",l:"48.525",a:"27.405",b:"44.569",parent:"\u8D64"},{color:"\u7B4D\u76AE\u68D5",l:"28.495",a:"28.761",b:"31.816",parent:"\u8D64"},{color:"\u706B\u6CE5\u68D5",l:"48.533",a:"21.849",b:"23.621",parent:"\u8D64"},{color:"\u6C34\u9F99\u541F",l:"63.92",a:"-29.619",b:"57.069",parent:"\u9EC4"},{color:"\u4EBA\u7C41",l:"71.762",a:"-29.51",b:"69.043",parent:"\u9EC4"},{color:"\u7FE0\u7F25",l:"80.116",a:"-29.27",b:"70.604",parent:"\u9EC4"},{color:"\u5AE9\u8349\u7EFF",l:"65.584",a:"-14.742",b:"41.767",parent:"\u9EC4"},{color:"\u82E6\u74DC\u7EFF",l:"85.305",a:"-16.129",b:"38.581",parent:"\u9EC4"},{color:"\u7259\u7EFF",l:"88.995",a:"-13.346",b:"37.052",parent:"\u9EC4"},{color:"\u82BD\u7EFF",l:"73.627",a:"-23.126",b:"45.928",parent:"\u9EC4"},{color:"\u6D45\u8C46\u9EC4",l:"75",a:"7",b:"28",parent:"\u9EC4"},{color:"\u59DA\u9EC4",l:"81.372",a:"-11.679",b:"35.954",parent:"\u9EC4"},{color:"\u5C11\u827E",l:"90.787",a:"-15.179",b:"39.427",parent:"\u9EC4"},{color:"\u82B8\u9EC4",l:"70.163",a:"10.604",b:"35.129",parent:"\u9EC4"},{color:"\u871C\u5408\u8272",l:"79.891",a:"14.061",b:"25.825",parent:"\u9EC4"},{color:"\u9EC4\u767D\u6E38",l:"96.031",a:"-10.313",b:"46.092",parent:"\u9EC4"},{color:"\u864E\u9EC4",l:"69.5",a:"38.5",b:"65.5",parent:"\u9EC4"},{color:"\u7409\u7483\u9EC4",l:"76.777",a:"5.07",b:"78.387",parent:"\u9EC4"},{color:"\u5361\u5176\u9EC4",l:"73.833",a:"1.082",b:"30.244",parent:"\u9EC4"},{color:"\u6D45\u8840\u72592",l:"82",a:"23",b:"26",parent:"\u9EC4"},{color:"\u8431\u8349\u9EC4",l:"65.849",a:"31.541",b:"63.55",parent:"\u9EC4"},{color:"\u571F\u5E03\u8272",l:"73.71",a:"8.686",b:"29.76",parent:"\u9EC4"},{color:"\u67F3\u53F6\u9EC4",l:"67.27",a:"-11.89",b:"66.45",parent:"\u9EC4"},{color:"\u5317\u74DC\u9EC4",l:"72.843",a:"33.014",b:"50.26",parent:"\u9EC4"},{color:"\u4E07\u5BFF\u83CA\u9EC4",l:"69.771",a:"38.583",b:"65.864",parent:"\u9EC4"},{color:"\u6787\u6777\u9EC4",l:"75.384",a:"29.859",b:"69.747",parent:"\u9EC4"},{color:"\u6A59\u76AE\u9EC4",l:"75.102",a:"26.757",b:"78.875",parent:"\u9EC4"},{color:"\u9EA6\u82BD\u7CD6\u9EC4",l:"88.473",a:"7.812",b:"33.385",parent:"\u9EC4"},{color:"\u7BFE\u9EC4",l:"87.582",a:"1.97",b:"30.965",parent:"\u9EC4"},{color:"\u8C37\u9EC4",l:"74.963",a:"8.371",b:"77.288",parent:"\u9EC4"},{color:"\u91D1\u76CF\u9EC4",l:"81.7",a:"7.089",b:"82.675",parent:"\u9EC4"},{color:"\u67DA\u9EC4",l:"83.106",a:"-3.846",b:"80.767",parent:"\u9EC4"},{color:"\u8FCE\u6625\u9EC4",l:"91.054",a:"-7.01",b:"79.097",parent:"\u9EC4"},{color:"\u8D64\u9EC4",l:"78.2",a:"20.1",b:"24.9",parent:"\u9EC4"},{color:"\u6912\u623F",l:"69.218",a:"16.887",b:"41.456",parent:"\u9EC4"},{color:"\u8776\u7C89",l:"77.673",a:"13.193",b:"25.761",parent:"\u9EC4"},{color:"\u9C91\u9C7C\u7EA2",l:"73.568",a:"22.502",b:"36.8",parent:"\u9EC4"},{color:"\u77F3\u871C",l:"77.914",a:"-0.374",b:"29.989",parent:"\u9EC4"},{color:"\u51CB\u53F6\u68D5",l:"71.078",a:"20.707",b:"39.973",parent:"\u9EC4"},{color:"\u767D\u73CA\u745A",l:"97.57",a:"0.77",b:"3.45",parent:"\u767D"},{color:"\u9E23\u73C2",l:"72.913",a:"-5.103",b:"12.521",parent:"\u767D"},{color:"\u94F6\u7070\u8272",l:"66.65",a:"3.326",b:"-0.115",parent:"\u767D"},{color:"\u6DE1\u73AB\u7470\u7070",l:"62.929",a:"13.809",b:"7.598",parent:"\u767D"},{color:"\u661F\u7070",l:"69.758",a:"-0.022",b:"-7.071",parent:"\u767D"},{color:"\u83B2\u74E3\u767D",l:"93.539",a:"3.703",b:"-12.206",parent:"\u767D"},{color:"\u8089\u68D5\u7070",l:"66.655",a:"5.365",b:"14.759",parent:"\u767D"},{color:"\u94F6\u7070",l:"66.368",a:"3.054",b:"7.989",parent:"\u767D"},{color:"\u6A31\u82B1",l:"79.375",a:"20.531",b:"-8.54",parent:"\u767D"},{color:"\u76C8\u76C8",l:"88.101",a:"15.828",b:"-2.915",parent:"\u767D"},{color:"\u6DE1\u9752\u83B2",l:"81.348",a:"17.024",b:"-13.896",parent:"\u767D"},{color:"\u6DE1\u84DD\u7D2B",l:"70.492",a:"10.147",b:"-14.732",parent:"\u767D"},{color:"\u77F3\u854A\u84DD",l:"71.597",a:"13.044",b:"-18.173",parent:"\u767D"},{color:"\u6674\u5C71",l:"75.102",a:"-1.094",b:"-18.728",parent:"\u767D"},{color:"\u78A7\u843D",l:"81.991",a:"-4.611",b:"-18.46",parent:"\u767D"},{color:"\u6D45\u5170\u7EFF",l:"85",a:"-16",b:"-1",parent:"\u767D"},{color:"\u4E95\u5929",l:"78.476",a:"-11.576",b:"-5.566",parent:"\u767D"},{color:"\u4E91\u95E8",l:"81.436",a:"-11.911",b:"-12.967",parent:"\u767D"},{color:"\u9C7C\u9752",l:"75",a:"-8",b:"7",parent:"\u767D"},{color:"\u6D77\u6CAB\u7EFF",l:"78.427",a:"-10.512",b:"18.713",parent:"\u767D"},{color:"\u867E\u7070",l:"73.981",a:"-5.767",b:"17.327",parent:"\u767D"},{color:"\u6D45\u9C9C\u7EFF",l:"87.003",a:"-16.213",b:"0.173",parent:"\u767D"},{color:"\u78A7\u7389",l:"84.31",a:"-16.99",b:"18.44",parent:"\u767D"},{color:"\u6D45\u7070\u7EFF",l:"71.578",a:"-0.457",b:"18.416",parent:"\u767D"},{color:"\u6D45\u5AE9\u9EC4",l:"94",a:"-11",b:"28",parent:"\u767D"},{color:"\u6D45\u871C",l:"99",a:"-3",b:"22",parent:"\u767D"},{color:"\u5973\u8D1E\u9EC4",l:"93.425",a:"-6.612",b:"32.634",parent:"\u767D"},{color:"\u534A\u89C1",l:"97.785",a:"-6.761",b:"25.473",parent:"\u767D"},{color:"\u51DD\u8102",l:"98",a:"-5.588",b:"8.298",parent:"\u767D"},{color:"\u674F\u76AE",l:"67.5",a:"9",b:"18.5",parent:"\u767D"},{color:"\u6C34\u6676\u672B",l:"77.777",a:"13.952",b:"22.833",parent:"\u767D"},{color:"\u6D45\u8840\u7259",l:"79.259",a:"21.976",b:"16.277",parent:"\u767D"},{color:"\u9A86\u9A7C\u8272",l:"73.674",a:"7.445",b:"23.739",parent:"\u767D"},{color:"\u7C73\u9EC4",l:"86.624",a:"2.897",b:"28.663",parent:"\u767D"},{color:"\u6D45\u5983",l:"90",a:"17",b:"6",parent:"\u767D"},{color:"\u6D45\u7C89\u7EA2",l:"82.5",a:"25.5",b:"7.5",parent:"\u767D"},{color:"\u6F02\u51C0\u80A4\u8272",l:"83.92",a:"23.7",b:"19.4",parent:"\u767D"},{color:"\u6DE1\u7C89",l:"74.178",a:"19.64",b:"-2.742",parent:"\u767D"},{color:"\u65E0\u82B1\u679C\u7EA2",l:"75.923",a:"23.554",b:"6.458",parent:"\u767D"},{color:"\u6D0B\u6C34\u4ED9\u7EA22\uFF08munsell)",l:"83.853",a:"24.825",b:"5.934",parent:"\u767D"},{color:"\u7389\u7C89\u7EA2",l:"75.957",a:"16.23",b:"20.912",parent:"\u767D"},{color:"\u4E01\u9999\u8910",l:"65.178",a:"11.826",b:"15.584",parent:"\u767D"},{color:"\u74F7\u79D8",l:"76.666",a:"-7.313",b:"21.123",parent:"\u767D"},{color:"\u4E73\u68D5",l:"76.138",a:"-1.305",b:"23.749",parent:"\u767D"},{color:"\u9ED1\u5F69",l:"12.533",a:"3.602",b:"4.734",parent:"\u9ED1"},{color:"\u73E0\u6BCD\u7070",l:"44.377",a:"9.824",b:"8.875",parent:"\u9ED1"},{color:"\u6DF1\u70702",l:"33",a:"-3",b:"-12",parent:"\u9ED1"},{color:"\u6697\u84DD\u7D2B",l:"13.244",a:"5.759",b:"-19.06",parent:"\u9ED1"},{color:"\u706B\u9E45\u7D2B",l:"11.262",a:"16.986",b:"0.359",parent:"\u9ED1"},{color:"\u6817\u7D2B",l:"26.709",a:"27.641",b:"11.014",parent:"\u9ED1"},{color:"\u8461\u8404\u7D2B",l:"27.624",a:"15.57",b:"-8.582",parent:"\u9ED1"},{color:"\u736D\u89C1",l:"10.544",a:"0.33",b:"-9.264",parent:"\u9ED1"},{color:"\u4F5B\u5934\u9752",l:"21.259",a:"7.415",b:"-29.675",parent:"\u9ED1"},{color:"\u5E1D\u91CA\u9752",l:"21.208",a:"3.37",b:"-30.456",parent:"\u9ED1"},{color:"\u87BA\u5B50\u9EDB",l:"21.625",a:"-11.504",b:"-7.121",parent:"\u9ED1"},{color:"\u9A90\u9A4E",l:"15.897",a:"8.244",b:"-27.615",parent:"\u9ED1"},{color:"\u6DF1\u666F\u84DD",l:"29",a:"5",b:"-25",parent:"\u9ED1"},{color:"\u52B3\u52A8\u5E03\u8272",l:"32.174",a:"4.219",b:"-19.389",parent:"\u9ED1"},{color:"\u975B\u84DD",l:"28.395",a:"4.14",b:"-27.054",parent:"\u9ED1"},{color:"\u7ED3\u7EFF",l:"38.987",a:"-7.625",b:"9.021",parent:"\u9ED1"},{color:"\u6CB9\u9752",l:"28.99",a:"4.57",b:"22.198",parent:"\u9ED1"},{color:"\u6BDB\u9752",l:"27.21",a:"-0.13",b:"-24.75",parent:"\u9ED1"},{color:"\u87BA\u9752",l:"32.055",a:"-11.335",b:"10.253",parent:"\u9ED1"},{color:"\u71CB\u8336\u8272",l:"42.371",a:"-3.186",b:"10.93",parent:"\u9ED1"},{color:"\u4E91\u6749\u7EFF",l:"18.616",a:"-13.184",b:"2.487",parent:"\u9ED1"},{color:"\u82F7\u84DD\u7EFF",l:"14.394",a:"-3.902",b:"0.944",parent:"\u9ED1"},{color:"\u82CD\u7EFF",l:"37.735",a:"-9.103",b:"5.36",parent:"\u9ED1"},{color:"\u6DF1\u6D77\u7EFF",l:"31.672",a:"-13.804",b:"-0.986",parent:"\u9ED1"},{color:"\u87F9\u58F3\u7EFF",l:"41.139",a:"3.475",b:"20.857",parent:"\u9ED1"},{color:"\u7126\u8336\u7EFF",l:"36.813",a:"4.572",b:"25.744",parent:"\u9ED1"},{color:"\u8D6D\u7EFF",l:"39.691",a:"-0.399",b:"22.224",parent:"\u9ED1"},{color:"\u6DF1\u8349\u7EFF ",l:"37",a:"-9.167",b:"12",parent:"\u9ED1"},{color:"\u6731\u53E4\u529B\u8272",l:"44.864",a:"6.067",b:"12.914",parent:"\u9ED1"},{color:"\u8910\u7EA2",l:"10.053",a:"14.169",b:"9.815",parent:"\u9ED1"},{color:"\u739B\u7459\u7EA2",l:"17.558",a:"28.155",b:"20.398",parent:"\u9ED1"},{color:"\u6817\u8272",l:"24.724",a:"29.51",b:"17.204",parent:"\u9ED1"},{color:"\u9A7C\u8910",l:"41.4",a:"9.695",b:"21.962",parent:"\u9ED1"},{color:"\u7D20\u7DA6",l:"35.102",a:"-2.887",b:"19.631",parent:"\u9ED1"},{color:"\u9F99\u6218",l:"30.778",a:"7.969",b:"25.081",parent:"\u9ED1"},{color:"\u6A61\u6811\u68D5",l:"38.404",a:"18.416",b:"13.614",parent:"\u9ED1"},{color:"\u67DE\u53F6\u68D5",l:"29.791",a:"24.141",b:"20.904",parent:"\u9ED1"},{color:"\u4E01\u9999\u68D5",l:"43.97",a:"14.692",b:"17.33",parent:"\u9ED1"},{color:"\u6697\u7816\u7070",l:"43.048",a:"10.319",b:"5.342",parent:"\u9ED1"},{color:"\u8336\u8910",l:"42.206",a:"13.793",b:"20.566",parent:"\u9ED1"},{color:"\u6D45\u674F\u7070",l:"63",a:"6",b:"12",parent:"\u7EFF"},{color:"\u674F\u7070",l:"60.5",a:"7",b:"13",parent:"\u7EFF"},{color:"\u71D5\u7FBD\u7070",l:"45.92558436",a:"-0.405317634",b:"12.41335102",parent:"\u7EFF"},{color:"\u7334\u6BDB\u7070",l:"60.560366",a:"6.894201607",b:"9.829268889",parent:"\u7EFF"},{color:"\u9EB9\u5C18",l:"81.155",a:"-14.128",b:"23.583",parent:"\u7EFF"},{color:"\u6B27\u78A7",l:"82.63",a:"-18.276",b:"29.743",parent:"\u7EFF"},{color:"\u9CDD\u9C7C\u76AE",l:"53.04342417",a:"-9.74115606",b:"35.65646753",parent:"\u7EFF"},{color:"\u67F3\u8272",l:"58.571",a:"-20.911",b:"45.378",parent:"\u7EFF"},{color:"\u5EAD\u9662\u74E6\u7070\u8272",l:"53.532",a:"-1.247",b:"8.688",parent:"\u7EFF"},{color:"\u87B3\u8782\u7EFF",l:"76.5274989",a:"-21.68252103",b:"14.54414751",parent:"\u7EFF"},{color:"\u5AE9\u8377\u7EFF",l:"84.92377881",a:"-22.35779174",b:"18.77042227",parent:"\u7EFF"},{color:"\u9752\u83DC\u7EFF",l:"71.58316435",a:"-51.09692881",b:"45.4172776",parent:"\u7EFF"},{color:"\u6F6D\u6C34\u7EFF",l:"39.33912733",a:"-2.802818819",b:"25.63627295",parent:"\u7EFF"},{color:"\u5927\u7EFF",l:"33.1",a:"-29.4",b:"11.3",parent:"\u7EFF"},{color:"\u860B\u5A46\u7EFF",l:"40.2096",a:"-28.1302",b:"1.8136",parent:"\u7EFF"},{color:"\u6A44\u6984\u7EFF",l:"41.17460391",a:"-5.583304473",b:"30.89897825",parent:"\u7EFF"},{color:"\u7D2B\u6749\u7EFF",l:"33.62058343",a:"-21.10681967",b:"15.21051759",parent:"\u7EFF"},{color:"\u679C\u7EFF",l:"63.5468",a:"-30.9568",b:"25.1154",parent:"\u7EFF"},{color:"\u6D45\u5AE9\u7EFF",l:"81",a:"-25.5",b:"38.5",parent:"\u7EFF"},{color:"\u9F9F\u80CC\u9EC4",l:"46.618",a:"4.049",b:"23.017",parent:"\u7EFF"},{color:"\u660E\u8336\u8910",l:"56.587",a:"6.266",b:"18.476",parent:"\u7EFF"},{color:"\u6C89\u9999",l:"55.374",a:"6.453",b:"14.444",parent:"\u7EFF"},{color:"\u517B\u751F\u4E3B",l:"65.498",a:"4.95",b:"18.115",parent:"\u7EFF"},{color:"\u5927\u5757",l:"69.702",a:"3.201",b:"22.38",parent:"\u7EFF"},{color:"\u5496\u5561\u68D5",l:"50.175",a:"4.273",b:"16.873",parent:"\u7EFF"},{color:"\u7ECD\u8863",l:"66.684",a:"1.621",b:"3.501",parent:"\u78A7"},{color:"\u4EBA\u718A\u4E1C\u65B9\u767D",l:"72",a:"-4",b:"-2",parent:"\u78A7"},{color:"\u6D77\u9E25\u7070",l:"61.61551346",a:"6.764362996",b:"8.410816093",parent:"\u78A7"},{color:"\u9752\u9E3E",l:"67.785",a:"-2.49",b:"-6.706",parent:"\u78A7"},{color:"\u6DF1\u6C34\u5170",l:"55",a:"-35",b:"-20",parent:"\u78A7"},{color:"\u6D45\u7FE0\u5170",l:"74",a:"-30",b:"-13",parent:"\u78A7"},{color:"\u6D45\u7FE0\u51702",l:"70",a:"-24",b:"-22",parent:"\u78A7"},{color:"\u7538\u5B50\u84DD",l:"64.04266255",a:"-32.33163052",b:"-22.70583903",parent:"\u78A7"},{color:"\u79CB\u6CE2\u84DD",l:"73.79964717",a:"-5.961514673",b:"-15.64084976",parent:"\u78A7"},{color:"\u6E56\u84DD",l:"80.7",a:"-18.1",b:"-4.2",parent:"\u78A7"},{color:"\u9752\u867E",l:"57.79",a:"-6.081",b:"0.935",parent:"\u78A7"},{color:"\u9701\u9752",l:"76.36441397",a:"-13.23876543",b:"-18.70618397",parent:"\u78A7"},{color:"\u4E8C\u9752",l:"75.9",a:"-25.2",b:"-12.5",parent:"\u78A7"},{color:"\u86CB\u9752",l:"76.9647876",a:"-10.15159108",b:"-8.308622016",parent:"\u78A7"},{color:"\u6E0C\u6CE2",l:"70.741",a:"-14.337",b:"12.476",parent:"\u78A7"},{color:"\u7261\u86CE\u7EFF",l:"71.59692279",a:"-16.03820631",b:"12.70526172",parent:"\u78A7"},{color:"\u5F69\u7EFF",l:"40",a:"-43",b:"0",parent:"\u78A7"},{color:"\u4E2D\u6761\u867E\u7EFF",l:"57.137",a:"-3.967",b:"4.049",parent:"\u78A7"},{color:"\u7389\u7EFF",l:"82.976",a:"-21.897",b:"7.952",parent:"\u78A7"},{color:"\u6697\u6A44\u6984\u7EFF",l:"52.87247754",a:"-14.07232657",b:"5.192149054",parent:"\u78A7"},{color:"\u5B54\u96C0\u7EFF",l:"52.1084874",a:"-38.12293635",b:"5.231078818",parent:"\u78A7"},{color:"\u86D9\u7EFF",l:"69.36277783",a:"-38.4052069",b:"9.554650599",parent:"\u78A7"},{color:"\u9EA6\u82D7\u7EFF",l:"73.23123406",a:"-35.2818296",b:"11.62415446",parent:"\u78A7"},{color:"\u7AF9\u7EFF",l:"64.34075652",a:"-41.22172704",b:"1.954444879",parent:"\u78A7"},{color:"\u827E\u7EFF",l:"71.18607158",a:"-14.02909847",b:"12.563031",parent:"\u78A7"},{color:"\u6DF1\u7FE0\u7EFF",l:"43",a:"-32.5",b:"1",parent:"\u78A7"},{color:"\u7EA2\u8E2F\u8E85",l:"44.103",a:"56.819",b:"-3.536",parent:"\u7EA2"},{color:"\u845B\u82B1\u7D2B",l:"21.85454597",a:"35.21043013",b:"17.91355552",parent:"\u7EA2"},{color:"\u83DC\u5934\u7D2B",l:"39.80104343",a:"49.36767558",b:"-2.221564732",parent:"\u7EA2"},{color:"\u6DF1\u674F",l:"57",a:"15",b:"16.5",parent:"\u7EA2"},{color:"\u674F\u8089",l:"69.5",a:"16",b:"20.5",parent:"\u7EA2"},{color:"\u719F\u8910",l:"46.67",a:"15.497",b:"19.267",parent:"\u7EA2"},{color:"\u6DF1\u9508\u7EA2",l:"38",a:"25",b:"14",parent:"\u7EA2"},{color:"\u7235\u5934",l:"20.612",a:"35.671",b:"20.208",parent:"\u7EA2"},{color:"\u987A\u5723",l:"26.949",a:"41.885",b:"23.68",parent:"\u7EA2"},{color:"\u6D45\u7C89\u7EA22",l:"82",a:"42",b:"10",parent:"\u7EA2"},{color:"\u73AB\u7EA2",l:"44",a:"60",b:"4",parent:"\u7EA2"},{color:"\u6DF1\u73AB\u7EA2",l:"37",a:"53",b:"6",parent:"\u7EA2"},{color:"\u6CE2\u6839\u7EA2",l:"77",a:"31",b:"1",parent:"\u7EA2"},{color:"\u6DF1\u7259\u5983",l:"78",a:"26",b:"14",parent:"\u7EA2"},{color:"\u8549\u7EA2\u8272",l:"40.98",a:"51.769",b:"25.508",parent:"\u7EA2"},{color:"\u8840\u7EA2",l:"34.902",a:"29.308",b:"22.961",parent:"\u7EA2"},{color:"\u9C9C\u7EA2",l:"65.29922417",a:"58.35439821",b:"25.1765886",parent:"\u7EA2"},{color:"\u6DE1\u7F42\u7C9F\u7EA2",l:"74.10370935",a:"33.67326113",b:"22.78477303",parent:"\u7EA2"},{color:"\u6DE1\u7EAC\u7EA2",l:"71.56594766",a:"23.8379879",b:"2.777691723",parent:"\u7EA2"},{color:"\u6DE1\u85CF\u82B1\u7EA2",l:"79.13723039",a:"27.59218254",b:"21.09493673",parent:"\u7EA2"},{color:"\u9F99\u987B\u7EA2",l:"55.01503702",a:"53.87550828",b:"-10.6810305",parent:"\u7EA2"},{color:"\u83F1\u9530\u7EA2",l:"63.85337762",a:"43.34991023",b:"-8.118149239",parent:"\u7EA2"},{color:"\u85CF\u82B1\u7EA2",l:"52.30265732",a:"67.07395543",b:"1.196198849",parent:"\u7EA2"},{color:"\u6241\u8C46\u82B1\u7EA2",l:"60.83036472",a:"59.39740137",b:"-4.293164893",parent:"\u7EA2"},{color:"\u7D2B\u8346\u7EA2",l:"53.52896256",a:"67.21900918",b:"1.325834444",parent:"\u7EA2"},{color:"\u9162\u9171\u8349\u7EA2",l:"58.82109846",a:"34.04437668",b:"-2.066517609",parent:"\u7EA2"},{color:"\u69B2\u6872\u7EA2",l:"53.041",a:"72.51",b:"14.221",parent:"\u7EA2"},{color:"\u5782\u4E1D\u6D77\u68E0\u7EA2",l:"71.59707527",a:"44.77461186",b:"-7.753099651",parent:"\u7EA2"},{color:"\u828D\u836F\u7EEF\u7EA2",l:"68.88530077",a:"29.60116124",b:"-1.910115724",parent:"\u7EA2"},{color:"\u6DE1\u66D9\u7EA2",l:"53.86818255",a:"63.4395732",b:"27.02304555",parent:"\u7EA2"},{color:"\u9709\u7EA2",l:"61.6440738",a:"24.29943558",b:"3.354453714",parent:"\u7EA2"},{color:"\u892A\u8272\u73AB\u7470",l:"66.7007681",a:"16.78215604",b:"12.75944531",parent:"\u7EA2"},{color:"\u7EA2\uFF08\u8D64\u767D\uFF09a",l:"42.215",a:"61.534",b:"24.592",parent:"\u7EA2"},{color:"\u6D0B\u7EA2",l:"50.4705",a:"55.744",b:"-10.525",parent:"\u7EA2"},{color:"\u8D6B\u8272",l:"43.435",a:"24.92",b:"23.15",parent:"\u7EA2"},{color:"\u6912\u8910",l:"42.3065",a:"24.0845",b:"12.2165",parent:"\u7EA2"},{color:"\u7EA2\u68D5",l:"47",a:"25",b:"23.5",parent:"\u7EA2"},{color:"\u674F\u68D5",l:"55",a:"17.5",b:"23",parent:"\u7EA2"},{color:"\u6DE1\u5496\u5561",l:"49.08668678",a:"16.58461938",b:"21.60901783",parent:"\u7EA2"},{color:"\u66AE\u4E91\u70702",l:"55.66044196",a:"10.88703177",b:"2.758325617",parent:"\u7D2B"},{color:"\u6CB9\u7D2B",l:"13.249",a:"29.798",b:"-8.929",parent:"\u7D2B"},{color:"\u7D2B\u8584\u6C57",l:"69.73",a:"17.311",b:"-17.926",parent:"\u7D2B"},{color:"\u8D6A\u7D2B",l:"32.522",a:"54.663",b:"-24.45",parent:"\u7D2B"},{color:"\u6D45\u96EA\u9752",l:"67.66666667",a:"14.66666667",b:"-15",parent:"\u7D2B"},{color:"\u4E01\u9999\u8272",l:"68.511",a:"16.06",b:"-17.3165",parent:"\u7D2B"},{color:"\u7D2B\u7EDB\u8272",l:"26.672",a:"22.486",b:"1.172",parent:"\u7D2B"},{color:"\u6D45\u51E4\u4ED9\u7D2B",l:"66.185",a:"32.351",b:"-31.066",parent:"\u7D2B"},{color:"\u6D45\u77F3\u82F1\u7D2B",l:"65.458",a:"16.057",b:"-22.914",parent:"\u7D2B"},{color:"\u7D2B\u8587\u82B1",l:"72.686",a:"32.123",b:"-17.535",parent:"\u7D2B"},{color:"\u7EA2\u5149\u7532\u57FA\u7D2B",l:"41.2169516",a:"46.90013556",b:"-34.70787651",parent:"\u7D2B"},{color:"\u8461\u8404\u9171\u7D2B",l:"24.70476685",a:"31.60426951",b:"13.93794954",parent:"\u7D2B"},{color:"\u7EC0\u5B87",l:"25.557",a:"5.947",b:"-36.367",parent:"\u7D2B"},{color:"\u82CD\u82CD",l:"50.245",a:"9.147",b:"-39.064",parent:"\u7D2B"},{color:"\u7D2B\u84DD",l:"7.152926203",a:"26.96018088",b:"-21.99191542",parent:"\u7D2B"},{color:"\u6DF1\u8273\u5170",l:"32",a:"5",b:"-31",parent:"\u7D2B"},{color:"\u9C9C\u84DD",l:"36.515",a:"28.887",b:"-58.842",parent:"\u7D2B"},{color:"\u6D77\u6D9B\u84DD",l:"39.91070861",a:"6.249850428",b:"-38.44567815",parent:"\u7D2B"},{color:"\u666E\u84DD",l:"33.19266667",a:"5.296",b:"-39.95766667",parent:"\u7D2B"},{color:"\u7FA4\u9752",l:"34.55628571",a:"7.748857143",b:"-44.38057143",parent:"\u7D2B"},{color:"\u9A7C\u8272",l:"52.99950964",a:"13.39643758",b:"13.39995103",parent:"\u7D2B"},{color:"\u8C46\u6C99",l:"40.30341523",a:"16.74087581",b:"11.97743724",parent:"\u7D2B"},{color:"\u4E2D\u7EA2\u7070",l:"54.19417428",a:"10.967015",b:"12.45280023",parent:"\u7D2B"},{color:"\u8377\u82B1\u7EA2",l:"62.293",a:"40.873",b:"-9.205",parent:"\u7D2B"},{color:"\u59DC\u7EA2",l:"65.70910573",a:"20.82009593",b:"0.990238274",parent:"\u7D2B"},{color:"\u6697\u7D2B\u82D1\u7EA2",l:"35.23373607",a:"34.08633942",b:"7.948687687",parent:"\u7D2B"},{color:"\u7261\u4E39\u8272",l:"44.927",a:"56.289",b:"-11.489",parent:"\u7D2B"},{color:"\u7EA2\u8C46\u6C99",l:"56",a:"12",b:"11",parent:"\u7D2B"},{color:"\u6D45\u73AB\u7470",l:"49",a:"41",b:"-3",parent:"\u7D2B"},{color:"\u8377\u82B1",l:"71.8",a:"27.8",b:"-12",parent:"\u7D2B"},{color:"\u85D5\u4E1D\u8910",l:"59.346",a:"12.558",b:"4.771",parent:"\u7D2B"},{color:"\u5CA9\u5CB1\u8D6D",l:"39.34",a:"18.46",b:"12.96",parent:"\u7D2B"},{color:"\u6D77\u8C79\u7070",l:"44.37448298",a:"10.28619604",b:"5.251567421",parent:"\u7D2B"},{color:"\u9009\u91D1",l:"62.415",a:"0.568",b:"27.555",parent:"\u6D41\u9EC4"},{color:"\u6DF1\u82BD\u7EFF",l:"60.239",a:"-15.311",b:"45.896",parent:"\u6D41\u9EC4"},{color:"\u65B0\u82BD\u8272",l:"65.415",a:"-5.654",b:"36.739",parent:"\u6D41\u9EC4"},{color:"\u7802\u7EFF",l:"49",a:"-21",b:"49",parent:"\u6D41\u9EC4"},{color:"\u7CBD\u53F6\u7EFF",l:"45.796",a:"4.485",b:"46.23",parent:"\u6D41\u9EC4"},{color:"\u6697\u6D77\u6C34\u7EFF",l:"38.48338435",a:"1.530420319",b:"32.34024476",parent:"\u6D41\u9EC4"},{color:"\u6D45\u7EA2\u68D5",l:"66",a:"19",b:"27",parent:"\u6D41\u9EC4"},{color:"\u67AF\u9EC4",l:"67.4375",a:"17.7385",b:"37.281",parent:"\u6D41\u9EC4"},{color:"\u9A7C\u9EC4",l:"51",a:"24",b:"39",parent:"\u6D41\u9EC4"},{color:"\u6D45\u674F\u8272",l:"65",a:"20",b:"27",parent:"\u6D41\u9EC4"},{color:"\u9EC4\u9E2D\u8272",l:"47.393",a:"13.756",b:"22.634",parent:"\u6D41\u9EC4"},{color:"\u79CB\u9999\u8272",l:"64.79442857",a:"6.273",b:"52.28471429",parent:"\u6D41\u9EC4"},{color:"\u6DF1\u9EC4",l:"64.8",a:"25.1",b:"59.5",parent:"\u6D41\u9EC4"},{color:"\u96C4\u9EC4",l:"66.48808187",a:"30.43249571",b:"57.63058322",parent:"\u6D41\u9EC4"},{color:"\u6817\u5B50\u8272",l:"40.11",a:"22.629",b:"40.222",parent:"\u6D41\u9EC4"},{color:"\u739B\u7459\u7C89",l:"67.297",a:"13.472",b:"24.777",parent:"\u6D41\u9EC4"},{color:"\u5C04\u5E72",l:"43.33",a:"5.641",b:"23.852",parent:"\u6D41\u9EC4"},{color:"\u6C99\u9967",l:"69.126",a:"1.572",b:"31.308",parent:"\u6D41\u9EC4"},{color:"\u7D2B\u74EF",l:"35.519",a:"19.646",b:"33.114",parent:"\u6D41\u9EC4"},{color:"\u9EC4\u57C3",l:"62.928",a:"8.34",b:"21.266",parent:"\u6D41\u9EC4"},{color:"\u68D5\u6988\u7EFF",l:"38.44039879",a:"1.622833423",b:"38.91483889",parent:"\u6D41\u9EC4"},{color:"\u53E4\u94DC\u8910",l:"35.44287174",a:"12.05257944",b:"28.25511769",parent:"\u6D41\u9EC4"},{color:"\u6D45\u68D5",l:"58.7",a:"11.05",b:"17.1",parent:"\u6D41\u9EC4"},{color:"\u8910\u8272",l:"42.7805",a:"19.079",b:"29.15625",parent:"\u6D41\u9EC4"}],F4=[{color:"\u827E\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"76.53150103",a:"-7.751689312",b:"-1.783782993",parent:"\u827E\u7EFF"},{color:"\u827E\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"65.515",a:"-29.182",b:"16.649",parent:"\u827E\u7EFF"},{color:"\u827E\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"77.121",a:"-18.246",b:"3.374",parent:"\u827E\u7EFF"},{color:"\u827E\u7EFF",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"78.486",a:"-5.743",b:"4.578",parent:"\u827E\u7EFF"},{color:"\u827E\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"60.662",a:"-2.534",b:"43.458",parent:"\u827E\u7EFF"},{color:"\u827E\u7EFF",from:"\u8272\u8C31_perchouli",l:"83.487",a:"-5.947",b:"6.866",parent:"\u827E\u7EFF"},{color:"\u827E\u7EFF",from:"\u56FD\u6807",l:"56.5",a:"-28.8",b:"14.8",parent:"\u827E\u7EFF"},{color:"\u5B9D\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.65130356",a:"-0.30660378",b:"-32.34170401",parent:"\u5B9D\u84DD"},{color:"\u5B9D\u84DD",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"28.57708589",a:"11.36810573",b:"-29.36659205",parent:"\u5B9D\u84DD"},{color:"\u5B9D\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"30.28",a:"30.656",b:"-52.206",parent:"\u5B9D\u84DD"},{color:"\u5B9D\u84DD",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"23",a:"1",b:"-17",parent:"\u5B9D\u84DD"},{color:"\u5B9D\u84DD",from:"\u8272\u8C31_perchouli",l:"52.868",a:"-9.681",b:"-34.505",parent:"\u5B9D\u84DD"},{color:"\u5B9D\u84DD",from:"\u56FD\u6807",l:"42.6",a:"-18.5",b:"-27.3",parent:"\u5B9D\u84DD"},{color:"\u78A7\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"65.651",a:"-33.628",b:"10.658",parent:"\u78A7\u7EFF"},{color:"\u78A7\u7EFF",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"43.206",a:"-34.483",b:"-15.81",parent:"\u78A7\u7EFF"},{color:"\u78A7\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"55.067",a:"-50.224",b:"-3.446",parent:"\u78A7\u7EFF"},{color:"\u78A7\u7EFF",from:"\u56FD\u6807",l:"66",a:"-41.6",b:"5.5",parent:"\u78A7\u7EFF"},{color:"\u82CD\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"54.15573121",a:"1.587578255",b:"18.27771209",parent:"\u82CD\u9EC4"},{color:"\u82CD\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"60.25",a:"0.687",b:"12.098",parent:"\u82CD\u9EC4"},{color:"\u82CD\u9EC4",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"65.857",a:"-5.03",b:"66.057",parent:"\u82CD\u9EC4"},{color:"\u82CD\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"60.655",a:"15.051",b:"37.607",parent:"\u82CD\u9EC4"},{color:"\u82CD\u9EC4",from:"\u8272\u8C31_perchouli",l:"43.864",a:"5.65",b:"31.902",parent:"\u82CD\u9EC4"},{color:"\u82CD\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"46.54071269",a:"-6.98929493",b:"-3.521909172",parent:"\u82CD\u7EFF"},{color:"\u82CD\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"37.723",a:"-7.194",b:"10.1",parent:"\u82CD\u7EFF"},{color:"\u82CD\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"42.834",a:"-9.354",b:"13.264",parent:"\u82CD\u7EFF"},{color:"\u82CD\u7EFF",from:"\u8272\u8C31_perchouli",l:"23.841",a:"-12.876",b:"1.597",parent:"\u82CD\u7EFF"},{color:"\u82CD\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"52.754",a:"-4.323",b:"-5.09",parent:"\u82CD\u8272"},{color:"\u82CD\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"52.808",a:"-4.176",b:"-5.816",parent:"\u82CD\u8272"},{color:"\u82CD\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"26.612",a:"-16.525",b:"-14.691",parent:"\u82CD\u8272"},{color:"\u82CD\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"54.329",a:"-24.42",b:"8.254",parent:"\u82CD\u8272"},{color:"\u85CF\u84DD",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"26.399",a:"18.959",b:"-33.231",parent:"\u85CF\u84DD"},{color:"\u85CF\u84DD",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"26.199",a:"7.669",b:"-24.222",parent:"\u85CF\u84DD"},{color:"\u85CF\u84DD",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"55.27389833",a:"-17.57465548",b:"-2.409372747",parent:"\u85CF\u84DD"},{color:"\u85CF\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"29.85",a:"10.109",b:"-24.922",parent:"\u85CF\u84DD"},{color:"\u85CF\u84DD",from:"\u56FD\u6807",l:"29.2",a:"-9",b:"-15.8",parent:"\u85CF\u84DD"},{color:"\u8349\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"73.33292788",a:"-4.12166695",b:"48.9222613",parent:"\u8349\u9EC4"},{color:"\u8349\u9EC4",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"63",a:"5",b:"42",parent:"\u8349\u9EC4"},{color:"\u8349\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"80.76",a:"-11.309",b:"57.557",parent:"\u8349\u9EC4"},{color:"\u8349\u9EC4",from:"\u8272\u8C31_perchouli",l:"73.887",a:"-2.55",b:"67.6",parent:"\u8349\u9EC4"},{color:"\u8349\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.17305166",a:"-21.56004289",b:"16.68474086",parent:"\u8349\u7EFF"},{color:"\u8349\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"64.616",a:"-35.889",b:"34.922",parent:"\u8349\u7EFF"},{color:"\u8349\u7EFF",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"55",a:"10",b:"25",parent:"\u8349\u7EFF"},{color:"\u8349\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"58.823",a:"-29.772",b:"37.393",parent:"\u8349\u7EFF"},{color:"\u8349\u7EFF",from:"\u56FD\u6807",l:"55.5",a:"-23.7",b:"26",parent:"\u8349\u7EFF"},{color:"\u8336\u8910",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"43.94431129",a:"9.332852541",b:"12.26765",parent:"\u8336\u8910"},{color:"\u8336\u8910",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"55.44",a:"29.48",b:"21.97",parent:"\u8336\u8910"},{color:"\u8336\u8910",from:"\u8272\u8C31_perchouli",l:"28.838",a:"10.761",b:"22.725",parent:"\u8336\u8910"},{color:"\u8336\u8910",from:"\u56FD\u6807",l:"40.6",a:"5.6",b:"25.3",parent:"\u8336\u8910"},{color:"\u8336\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"56",a:"-13",b:"30",parent:"\u8336\u7EFF"},{color:"\u8336\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"52",a:"-12",b:"30",parent:"\u8336\u7EFF"},{color:"\u8336\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"43.185",a:"-5.076",b:"9.635",parent:"\u8336\u7EFF"},{color:"\u8336\u7EFF",from:"\u56FD\u6807",l:"41.2",a:"-2.8",b:"10.3",parent:"\u8336\u7EFF"},{color:"\u8336\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"45.874",a:"31.911",b:"23.37",parent:"\u8336\u8272"},{color:"\u8336\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"50.685",a:"23.158",b:"18.225",parent:"\u8336\u8272"},{color:"\u8336\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"34.604",a:"33.199",b:"25.002",parent:"\u8336\u8272"},{color:"\u8336\u8272",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"50.546",a:"2.156",b:"19.672",parent:"\u8336\u8272"},{color:"\u8471\u6839\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"64.06300228",a:"-34.25392902",b:"8.085363332",parent:"\u8471\u6839\u7EFF"},{color:"\u8471\u6839\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"70.018",a:"-27.739",b:"48.299",parent:"\u8471\u6839\u7EFF"},{color:"\u8471\u6839\u7EFF",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"52.348",a:"-50.354",b:"10.877",parent:"\u8471\u6839\u7EFF"},{color:"\u8471\u6839\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"71.635",a:"-19.867",b:"30.061",parent:"\u8471\u6839\u7EFF"},{color:"\u8471\u6839\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"75.783",a:"-25.598",b:"42.392",parent:"\u8471\u6839\u7EFF"},{color:"\u8471\u6839\u7EFF",from:"\u56FD\u6807",l:"65.5",a:"-24.4",b:"36.3",parent:"\u8471\u6839\u7EFF"},{color:"\u5927\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"47",a:"68.006",b:"47.976",parent:"\u5927\u7EA2"},{color:"\u5927\u7EA2",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"59.19",a:"40.14",b:"12.21",parent:"\u5927\u7EA2"},{color:"\u5927\u7EA2",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"42",a:"44",b:"31",parent:"\u5927\u7EA2"},{color:"\u5927\u7EA2",from:"\u8272\u8C31_perchouli",l:"55.765",a:"61.402",b:"57.007",parent:"\u5927\u7EA2"},{color:"\u5927\u7EA2",from:"\u56FD\u6807",l:"44.2",a:"54.8",b:"35.8",parent:"\u5927\u7EA2"},{color:"\u73B3\u7441\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.5970387",a:"14.58736955",b:"15.78540406",parent:"\u73B3\u7441\u9EC4"},{color:"\u73B3\u7441\u9EC4",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"64",a:"18",b:"27",parent:"\u73B3\u7441\u9EC4"},{color:"\u73B3\u7441\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"35.169",a:"23.534",b:"13.557",parent:"\u73B3\u7441\u9EC4"},{color:"\u73B3\u7441\u9EC4",from:"\u8272\u8C31_perchouli",l:"71.007",a:"11.867",b:"45.591",parent:"\u73B3\u7441\u9EC4"},{color:"\u9EDB\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"39.36",a:"-1.862",b:"-9.135",parent:"\u9EDB\u8272"},{color:"\u9EDB\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"24.61",a:"-4.199",b:"-6.116",parent:"\u9EDB\u8272"},{color:"\u9EDB\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"17.076",a:"5.392",b:"-7.181",parent:"\u9EDB\u8272"},{color:"\u9EDB\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"34.097",a:"-7.684",b:"-2.846",parent:"\u9EDB\u8272"},{color:"\u86CB\u9752",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"91.08172557",a:"1.712453497",b:"-11.8007321",parent:"\u86CB\u9752"},{color:"\u86CB\u9752",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"87.358",a:"-4.518",b:"-1.63",parent:"\u86CB\u9752"},{color:"\u86CB\u9752",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"46",a:"-35",b:"-21",parent:"\u86CB\u9752"},{color:"\u86CB\u9752",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"58.11",a:"-9.79",b:"-12.57",parent:"\u86CB\u9752"},{color:"\u86CB\u9752",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"89.939",a:"-4.914",b:"1.049",parent:"\u86CB\u9752"},{color:"\u86CB\u9752",from:"\u56FD\u6807",l:"89.3",a:"-8.4",b:"-3.9",parent:"\u86CB\u9752"},{color:"\u975B\u84DD",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"32.355",a:"-4.284",b:"-23.342",parent:"\u975B\u84DD"},{color:"\u975B\u84DD",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"18.1787136",a:"16.27492522",b:"-31.69048666",parent:"\u975B\u84DD"},{color:"\u975B\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"28.625",a:"5.246",b:"-15.963",parent:"\u975B\u84DD"},{color:"\u975B\u84DD",from:"\u56FD\u6807",l:"35.8",a:"0.8",b:"-38.8",parent:"\u975B\u84DD"},{color:"\u975B\u9752",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.1582044",a:"7.070662746",b:"-42.09625029",parent:"\u975B\u9752"},{color:"\u975B\u9752",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"45.468",a:"-10.502",b:"-31.723",parent:"\u975B\u9752"},{color:"\u975B\u9752",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"36.31352778",a:"9.790599215",b:"-49.74652829",parent:"\u975B\u9752"},{color:"\u975B\u9752",from:"\u8272\u8C31_perchouli",l:"40.668",a:"6.248",b:"-45.703",parent:"\u975B\u9752"},{color:"\u4E01\u9999\u7D2B",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"67.713",a:"16.381",b:"-17.785",parent:"\u4E01\u9999\u7D2B"},{color:"\u4E01\u9999\u7D2B",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"74.99878683",a:"-66.99592395",b:"22.63615156",parent:"\u4E01\u9999\u7D2B"},{color:"\u4E01\u9999\u7D2B",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"39.912",a:"12.265",b:"-12.189",parent:"\u4E01\u9999\u7D2B"},{color:"\u4E01\u9999\u7D2B",from:"\u56FD\u6807",l:"70.9",a:"12.1",b:"-17.8",parent:"\u4E01\u9999\u7D2B"},{color:"\u8C46\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.66164778",a:"-51.75001546",b:"45.36551962",parent:"\u8C46\u7EFF"},{color:"\u8C46\u7EFF",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"47",a:"-12",b:"18",parent:"\u8C46\u7EFF"},{color:"\u8C46\u7EFF",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"72.591",a:"-24.302",b:"50.354",parent:"\u8C46\u7EFF"},{color:"\u8C46\u7EFF",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"69.22",a:"-14.49",b:"7.85",parent:"\u8C46\u7EFF"},{color:"\u8C46\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"69.917",a:"-24.071",b:"49.877",parent:"\u8C46\u7EFF"},{color:"\u8C46\u7EFF",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"68.5",a:"-10.2",b:"10.24",parent:"\u8C46\u7EFF"},{color:"\u8C46\u9752",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"70.357",a:"-26.392",b:"44.089",parent:"\u8C46\u9752"},{color:"\u8C46\u9752",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"48.29863797",a:"11.96769799",b:"27.22889662",parent:"\u8C46\u9752"},{color:"\u8C46\u9752",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"54.23",a:"-5.94",b:"5.5",parent:"\u8C46\u9752"},{color:"\u8C46\u9752",from:"\u56FD\u6807",l:"85.8",a:"-9.4",b:"-7.5",parent:"\u8C46\u9752"},{color:"\u8C46\u6C99",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"39.594",a:"26.637",b:"10.417",parent:"\u8C46\u6C99"},{color:"\u8C46\u6C99",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"61",a:"10",b:"12",parent:"\u8C46\u6C99"},{color:"\u8C46\u6C99",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"48",a:"14",b:"15",parent:"\u8C46\u6C99"},{color:"\u8C46\u6C99",from:"\u8272\u8C31_perchouli",l:"17.416",a:"19.846",b:"10.943",parent:"\u8C46\u6C99"},{color:"\u9E45\u9EC4",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"89.289",a:"-5.771",b:"60.97",parent:"\u9E45\u9EC4"},{color:"\u9E45\u9EC4",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"77.89",a:"-10.8",b:"20.2",parent:"\u9E45\u9EC4"},{color:"\u9E45\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"77.401",a:"10.484",b:"79.833",parent:"\u9E45\u9EC4"},{color:"\u9E45\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"68.09",a:"18.638",b:"66.518",parent:"\u9E45\u9EC4"},{color:"\u9E45\u9EC4",from:"\u56FD\u6807",l:"80.1",a:"17.8",b:"60.1",parent:"\u9E45\u9EC4"},{color:"\u5983\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"45.643",a:"43.74",b:"33.229",parent:"\u5983\u8272"},{color:"\u5983\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"45.972",a:"63.575",b:"43.967",parent:"\u5983\u8272"},{color:"\u5983\u8272",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"77.936",a:"13.662",b:"1.155",parent:"\u5983\u8272"},{color:"\u5983\u8272",from:"\u56FD\u6807",l:"77.7",a:"22.2",b:"6.2",parent:"\u5983\u8272"},{color:"\u7C89\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"76.00760177",a:"24.02044874",b:"2.595973752",parent:"\u7C89\u7EA2"},{color:"\u7C89\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"83.35",a:"14.443",b:"-0.142",parent:"\u7C89\u7EA2"},{color:"\u7C89\u7EA2",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"60",a:"54",b:"7",parent:"\u7C89\u7EA2"},{color:"\u7C89\u7EA2",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"69",a:"42",b:"4",parent:"\u7C89\u7EA2"},{color:"\u7C89\u7EA2",from:"\u8272\u8C31_perchouli",l:"80.063",a:"19.577",b:"11.524",parent:"\u7C89\u7EA2"},{color:"\u7C89\u7EA2",from:"\u56FD\u6807",l:"77.8",a:"20.6",b:"1",parent:"\u7C89\u7EA2"},{color:"\u6A44\u6984\u7070",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"51.57718005",a:"1.904969588",b:"11.05943503",parent:"\u6A44\u6984\u7070"},{color:"\u6A44\u6984\u7070",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"32.59",a:"-0.33",b:"3.98",parent:"\u6A44\u6984\u7070"},{color:"\u6A44\u6984\u7070",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"62.003",a:"-8.686",b:"7.118",parent:"\u6A44\u6984\u7070"},{color:"\u6A44\u6984\u7070",from:"\u8272\u8C31_perchouli",l:"27.623",a:"4.766",b:"15.282",parent:"\u6A44\u6984\u7070"},{color:"\u6A44\u6984\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.21701955",a:"-6.618522363",b:"41.22189127",parent:"\u6A44\u6984\u7EFF"},{color:"\u6A44\u6984\u7EFF",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"46",a:"-11",b:"24",parent:"\u6A44\u6984\u7EFF"},{color:"\u6A44\u6984\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"39.92",a:"-6.167",b:"22.421",parent:"\u6A44\u6984\u7EFF"},{color:"\u6A44\u6984\u7EFF",from:"\u8272\u8C31_perchouli",l:"35.236",a:"-3.231",b:"36.352",parent:"\u6A44\u6984\u7EFF"},{color:"\u6A44\u6984\u7EFF",from:"\u56FD\u6807",l:"43.5",a:"-0.9",b:"30.5",parent:"\u6A44\u6984\u7EFF"},{color:"\u7EC0\u7D2B",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"33.62001256",a:"25.39510582",b:"-7.126179161",parent:"\u7EC0\u7D2B"},{color:"\u7EC0\u7D2B",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"26.858",a:"12.435",b:"-22.343",parent:"\u7EC0\u7D2B"},{color:"\u7EC0\u7D2B",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"32.087",a:"31.741",b:"-25.033",parent:"\u7EC0\u7D2B"},{color:"\u7EC0\u7D2B",from:"\u8272\u8C31_perchouli",l:"15.677",a:"25.133",b:"-0.841",parent:"\u7EC0\u7D2B"},{color:"\u94B4\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"66.52191114",a:"-14.729075",b:"-33.7982694",parent:"\u94B4\u84DD"},{color:"\u94B4\u84DD",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"71.78",a:"-17.97",b:"-6.41",parent:"\u94B4\u84DD"},{color:"\u94B4\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"61.197",a:"-3.995",b:"-15.102",parent:"\u94B4\u84DD"},{color:"\u94B4\u84DD",from:"\u8272\u8C31_perchouli",l:"57.102",a:"-17.26",b:"-29.627",parent:"\u94B4\u84DD"},{color:"\u94B4\u84DD",from:"\u56FD\u6807",l:"42.2",a:"-0.6",b:"-46.7",parent:"\u94B4\u84DD"},{color:"\u679C\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"66",a:"-37",b:"29",parent:"\u679C\u7EFF"},{color:"\u679C\u7EFF",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"56",a:"-32",b:"32",parent:"\u679C\u7EFF"},{color:"\u679C\u7EFF",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"66",a:"-30",b:"13",parent:"\u679C\u7EFF"},{color:"\u679C\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"73.934",a:"-22.084",b:"23.377",parent:"\u679C\u7EFF"},{color:"\u679C\u7EFF",from:"\u56FD\u6807",l:"55.8",a:"-33.7",b:"28.2",parent:"\u679C\u7EFF"},{color:"\u6D77\u68E0\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"53.05748252",a:"60.15122448",b:"14.20573713",parent:"\u6D77\u68E0\u7EA2"},{color:"\u6D77\u68E0\u7EA2",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"51.317",a:"46.973",b:"12.192",parent:"\u6D77\u68E0\u7EA2"},{color:"\u6D77\u68E0\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"45.86812829",a:"55.07690353",b:"38.26684438",parent:"\u6D77\u68E0\u7EA2"},{color:"\u6D77\u68E0\u7EA2",from:"\u8272\u8C31_perchouli",l:"53.892",a:"69.743",b:"29.794",parent:"\u6D77\u68E0\u7EA2"},{color:"\u6D77\u68E0\u7EA2",from:"\u56FD\u6807",l:"45.2",a:"52",b:"19.2",parent:"\u6D77\u68E0\u7EA2"},{color:"\u8910\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"36.013",a:"8.236",b:"24.323",parent:"\u8910\u8272"},{color:"\u8910\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"64.473",a:"28.411",b:"40.918",parent:"\u8910\u8272"},{color:"\u8910\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"36.436",a:"25.969",b:"36.184",parent:"\u8910\u8272"},{color:"\u8910\u8272",from:"\u56FD\u6807",l:"34.2",a:"13.7",b:"15.2",parent:"\u8910\u8272"},{color:"\u8679\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"54.58372582",a:"5.99229521",b:"-41.48440569",parent:"\u8679\u84DD"},{color:"\u8679\u84DD",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"61",a:"-10",b:"-30",parent:"\u8679\u84DD"},{color:"\u8679\u84DD",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"47",a:"-2",b:"-29",parent:"\u8679\u84DD"},{color:"\u8679\u84DD",from:"\u8272\u8C31_perchouli",l:"48.229",a:"-1.51",b:"-41.24",parent:"\u8679\u84DD"},{color:"\u6E56\u8272",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"74.07263347",a:"-28.84811179",b:"24.46280942",parent:"\u6E56\u8272"},{color:"\u6E56\u8272",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"61",a:"-31",b:"-4",parent:"\u6E56\u8272"},{color:"\u6E56\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"69.431",a:"-27.421",b:"-0.922",parent:"\u6E56\u8272"},{color:"\u6E56\u8272",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"75",a:"-28",b:"4",parent:"\u6E56\u8272"},{color:"\u6E56\u8272",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"51.397",a:"-12.883",b:"-1.735",parent:"\u6E56\u8272"},{color:"\u6E56\u8272",from:"\u8272\u8C31_perchouli",l:"73.009",a:"-33.462",b:"39.093",parent:"\u6E56\u8272"},{color:"\u6E56\u8272",from:"\u56FD\u6807",l:"65.6",a:"-39.1",b:"-2",parent:"\u6E56\u8272"},{color:"\u7425\u73C0\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"84.92480304",a:"17.11593936",b:"69.53056386",parent:"\u7425\u73C0\u9EC4"},{color:"\u7425\u73C0\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"56.92",a:"28.821",b:"43.308",parent:"\u7425\u73C0\u9EC4"},{color:"\u7425\u73C0\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"62.719",a:"14.765",b:"40.748",parent:"\u7425\u73C0\u9EC4"},{color:"\u7425\u73C0\u9EC4",from:"\u8272\u8C31_perchouli",l:"79.733",a:"12.612",b:"81.392",parent:"\u7425\u73C0\u9EC4"},{color:"\u82B1\u9752",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"53.5530178",a:"6.104809883",b:"-42.5551007",parent:"\u82B1\u9752"},{color:"\u82B1\u9752",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"24.936",a:"6.029",b:"-26.277",parent:"\u82B1\u9752"},{color:"\u82B1\u9752",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"42.448",a:"-14.707",b:"-40.929",parent:"\u82B1\u9752"},{color:"\u82B1\u9752",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"16.464",a:"5.145",b:"-21.222",parent:"\u82B1\u9752"},{color:"\u82B1\u9752",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"48.923",a:"0.212",b:"-12.407",parent:"\u82B1\u9752"},{color:"\u82B1\u9752",from:"\u8272\u8C31_perchouli",l:"47.92",a:"-1.084",b:"-41.15",parent:"\u82B1\u9752"},{color:"\u9EC4",from:"\u5148\u79E6\u8272\u5F69_\u8096\u4E16\u5B5F",l:"68",a:"22",b:"68",parent:"\u9EC4"},{color:"\u9EC4",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"82.776",a:"4.136",b:"85.66",parent:"\u9EC4"},{color:"\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"85.668",a:"0.052",b:"52.861",parent:"\u9EC4"},{color:"\u9EC4",from:"\u56FD\u6807",l:"80.4",a:"3.9",b:"89.9",parent:"\u9EC4"},{color:"\u7070\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.21688977",a:"-5.467674394",b:"-7.813145679",parent:"\u7070\u84DD"},{color:"\u7070\u84DD",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"67.06",a:"-0.613",b:"-15.871",parent:"\u7070\u84DD"},{color:"\u7070\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"54.757",a:"-6.838",b:"-5.96",parent:"\u7070\u84DD"},{color:"\u7070\u84DD",from:"\u8272\u8C31_perchouli",l:"21.552",a:"-6.79",b:"-6.489",parent:"\u7070\u84DD"},{color:"\u7070\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"54.13729657",a:"1.793211668",b:"47.29634728",parent:"\u7070\u7EFF"},{color:"\u7070\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"58.551",a:"-9.896",b:"-0.302",parent:"\u7070\u7EFF"},{color:"\u7070\u7EFF",from:"\u8272\u8C31_perchouli",l:"46.385",a:"5.158",b:"48.569",parent:"\u7070\u7EFF"},{color:"\u7070\u7EFF",from:"\u56FD\u6807",l:"63.4",a:"-13.8",b:"18.9",parent:"\u7070\u7EFF"},{color:"\u8304\u76AE\u7D2B",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"30.69429804",a:"27.5028716",b:"0.775962242",parent:"\u8304\u76AE\u7D2B"},{color:"\u8304\u76AE\u7D2B",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"21.52745958",a:"24.66833329",b:"5.963706204",parent:"\u8304\u76AE\u7D2B"},{color:"\u8304\u76AE\u7D2B",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"33.005",a:"8.55",b:"-0.093",parent:"\u8304\u76AE\u7D2B"},{color:"\u8304\u76AE\u7D2B",from:"\u8272\u8C31_perchouli",l:"7.841",a:"17.765",b:"3.314",parent:"\u8304\u76AE\u7D2B"},{color:"\u59DC\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"81.34806086",a:"-4.890971763",b:"55.26541103",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"77.42",a:"13.955",b:"39.709",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"54.5",a:"5.794",b:"39.542",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"77",a:"22",b:"75",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"77",a:"22",b:"55",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"79.085",a:"-6.729",b:"52.038",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"58.744",a:"0.42",b:"41.838",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u8272\u8C31_perchouli",l:"78.472",a:"-2.017",b:"73.617",parent:"\u59DC\u9EC4"},{color:"\u59DC\u9EC4",from:"\u56FD\u6807",l:"55",a:"12.5",b:"40.4",parent:"\u59DC\u9EC4"},{color:"\u8C47\u8C46\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"65.31274767",a:"23.78977025",b:"0.134153677",parent:"\u8C47\u8C46\u7EA2"},{color:"\u8C47\u8C46\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"51.898",a:"51.236",b:"24.613",parent:"\u8C47\u8C46\u7EA2"},{color:"\u8C47\u8C46\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"50.69275503",a:"64.37043589",b:"63.079368",parent:"\u8C47\u8C46\u7EA2"},{color:"\u8C47\u8C46\u7EA2",from:"\u8272\u8C31_perchouli",l:"73.113",a:"32.598",b:"1.466",parent:"\u8C47\u8C46\u7EA2"},{color:"\u9171\u8272",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"25",a:"16",b:"-2",parent:"\u9171\u8272"},{color:"\u9171\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"24.438",a:"27.553",b:"16.02",parent:"\u9171\u8272"},{color:"\u9171\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"24.88",a:"5.93",b:"3.477",parent:"\u9171\u8272"},{color:"\u9171\u8272",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"37.174",a:"4.854",b:"15.987",parent:"\u9171\u8272"},{color:"\u9171\u8272",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"23",a:"13",b:"7",parent:"\u9171\u8272"},{color:"\u9171\u7D2B",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"30.69478023",a:"27.21729645",b:"4.48278126",parent:"\u9171\u7D2B"},{color:"\u9171\u7D2B",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"40.399",a:"21.082",b:"-10.582",parent:"\u9171\u7D2B"},{color:"\u9171\u7D2B",from:"\u8272\u8C31_perchouli",l:"15.565",a:"28.871",b:"11.54",parent:"\u9171\u7D2B"},{color:"\u9171\u7D2B",from:"\u56FD\u6807",l:"29.4",a:"23.9",b:"4.6",parent:"\u9171\u7D2B"},{color:"\u91D1\u9EC4",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"86.22441055",a:"5.476817933",b:"64.78202394",parent:"\u91D1\u9EC4"},{color:"\u91D1\u9EC4",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"57",a:"54",b:"60",parent:"\u91D1\u9EC4"},{color:"\u91D1\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"77.584",a:"3.333",b:"73.308",parent:"\u91D1\u9EC4"},{color:"\u91D1\u9EC4",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"53.226",a:"20.758",b:"39.474",parent:"\u91D1\u9EC4"},{color:"\u91D1\u9EC4",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"65",a:"19",b:"71",parent:"\u91D1\u9EC4"},{color:"\u91D1\u9EC4",from:"\u8272\u8C31_perchouli",l:"64.28",a:"40.615",b:"65.026",parent:"\u91D1\u9EC4"},{color:"\u91D1\u9EC4",from:"\u56FD\u6807",l:"70.3",a:"18.9",b:"52.4",parent:"\u91D1\u9EC4"},{color:"\u91D1\u68D5",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"30.037",a:"42.206",b:"29.268",parent:"\u91D1\u68D5"},{color:"\u91D1\u68D5",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"42.229",a:"32.904",b:"35.629",parent:"\u91D1\u68D5"},{color:"\u91D1\u68D5",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"42.847",a:"20.866",b:"21.734",parent:"\u91D1\u68D5"},{color:"\u91D1\u68D5",from:"\u56FD\u6807",l:"55.4",a:"22",b:"21.1",parent:"\u91D1\u68D5"},{color:"\u666F\u6CF0\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"65.32367155",a:"5.77538771",b:"-41.50964511",parent:"\u666F\u6CF0\u84DD"},{color:"\u666F\u6CF0\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"51.56656883",a:"16.02401005",b:"-40.50890532",parent:"\u666F\u6CF0\u84DD"},{color:"\u666F\u6CF0\u84DD",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"71.745",a:"-25.409",b:"59.9",parent:"\u666F\u6CF0\u84DD"},{color:"\u666F\u6CF0\u84DD",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"33.088",a:"2.703",b:"-47.147",parent:"\u666F\u6CF0\u84DD"},{color:"\u666F\u6CF0\u84DD",from:"\u8272\u8C31_perchouli",l:"47.662",a:"-0.423",b:"-40.973",parent:"\u666F\u6CF0\u84DD"},{color:"\u6854\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"60",a:"52",b:"30",parent:"\u6854\u7EA2"},{color:"\u6854\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"55",a:"58",b:"40",parent:"\u6854\u7EA2"},{color:"\u6854\u7EA2",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"61",a:"49",b:"37",parent:"\u6854\u7EA2"},{color:"\u6854\u7EA2",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"59",a:"16",b:"19",parent:"\u6854\u7EA2"},{color:"\u6854\u7EA2",from:"\u56FD\u6807",l:"58.1",a:"53.1",b:"55.9",parent:"\u6854\u7EA2"},{color:"\u6854\u9EC4",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"61",a:"39",b:"44",parent:"\u6854\u9EC4"},{color:"\u6854\u9EC4",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"66",a:"45",b:"42",parent:"\u6854\u9EC4"},{color:"\u6854\u9EC4",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"68",a:"18",b:"30",parent:"\u6854\u9EC4"},{color:"\u6854\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"60.078",a:"26.433",b:"43.627",parent:"\u6854\u9EC4"},{color:"\u6854\u9EC4",from:"\u56FD\u6807",l:"69.1",a:"41.3",b:"52.4",parent:"\u6854\u9EC4"},{color:"\u5B54\u96C0\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.47380032",a:"-18.23627124",b:"-28.09401248",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"60.886",a:"-22.163",b:"-24.273",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"22.82341366",a:"8.288995095",b:"-30.4925605",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"45",a:"-28",b:"-32",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"58",a:"-31",b:"-22",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"25.019",a:"19.084",b:"-38.556",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"58.583",a:"-8.563",b:"-31.76",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"30.545",a:"31.652",b:"-57.866",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u84DD",from:"\u8272\u8C31_perchouli",l:"66.026",a:"-27.972",b:"-23.169",parent:"\u5B54\u96C0\u84DD"},{color:"\u5B54\u96C0\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"57.5597427",a:"-39.9052715",b:"4.719720358",parent:"\u5B54\u96C0\u7EFF"},{color:"\u5B54\u96C0\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"54.805",a:"-39.55",b:"-10.779",parent:"\u5B54\u96C0\u7EFF"},{color:"\u5B54\u96C0\u7EFF",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"41.89120688",a:"-26.89647391",b:"1.288594916",parent:"\u5B54\u96C0\u7EFF"},{color:"\u5B54\u96C0\u7EFF",from:"\u8272\u8C31_perchouli",l:"54.178",a:"-46.14",b:"25.695",parent:"\u5B54\u96C0\u7EFF"},{color:"\u67AF\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.6566488",a:"1.596613768",b:"48.65944777",parent:"\u67AF\u7EFF"},{color:"\u67AF\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"67.208",a:"-3.071",b:"24.015",parent:"\u67AF\u7EFF"},{color:"\u67AF\u7EFF",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"75",a:"3",b:"53",parent:"\u67AF\u7EFF"},{color:"\u67AF\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"71.385",a:"-7.204",b:"32.513",parent:"\u67AF\u7EFF"},{color:"\u67AF\u7EFF",from:"\u8272\u8C31_perchouli",l:"60.925",a:"5.669",b:"62.646",parent:"\u67AF\u7EFF"},{color:"\u8475\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"82.32881247",a:"10.18265987",b:"79.06977159",parent:"\u8475\u9EC4"},{color:"\u8475\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"76.704",a:"9.796",b:"38.1",parent:"\u8475\u9EC4"},{color:"\u8475\u9EC4",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"82",a:"-3",b:"65",parent:"\u8475\u9EC4"},{color:"\u8475\u9EC4",from:"\u8272\u8C31_perchouli",l:"84.122",a:"3.397",b:"83.467",parent:"\u8475\u9EC4"},{color:"\u8475\u9EC4",from:"\u56FD\u6807",l:"71.7",a:"27.8",b:"76.1",parent:"\u8475\u9EC4"},{color:"\u84DD\u7FE0",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"64.13698797",a:"-11.77399956",b:"-20.48855476",parent:"\u84DD\u7FE0"},{color:"\u84DD\u7FE0",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"57.08",a:"-7.13",b:"-20.54",parent:"\u84DD\u7FE0"},{color:"\u84DD\u7FE0",from:"\u8272\u8C31_perchouli",l:"59.872",a:"-25.267",b:"-20.271",parent:"\u84DD\u7FE0"},{color:"\u84DD\u7FE0",from:"\u56FD\u6807",l:"56.5",a:"-20.8",b:"-33.4",parent:"\u84DD\u7FE0"},{color:"\u83B2\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.15459944",a:"43.44971524",b:"9.420704828",parent:"\u83B2\u7EA2"},{color:"\u83B2\u7EA2",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"58.67",a:"39.98",b:"12.69",parent:"\u83B2\u7EA2"},{color:"\u83B2\u7EA2",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"71.657",a:"23.966",b:"-1.472",parent:"\u83B2\u7EA2"},{color:"\u83B2\u7EA2",from:"\u56FD\u6807",l:"35",a:"41.1",b:"17.6",parent:"\u83B2\u7EA2"},{color:"\u7EFF\u8272",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"56",a:"-37",b:"19",parent:"\u7EFF\u8272"},{color:"\u7EFF\u8272",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"56",a:"-43",b:"8",parent:"\u7EFF\u8272"},{color:"\u7EFF\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"53.4",a:"-24.963",b:"-4.745",parent:"\u7EFF\u8272"},{color:"\u7EFF\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"58.972",a:"-45.705",b:"42.567",parent:"\u7EFF\u8272"},{color:"\u6EE1\u5929\u661F\u7D2B",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.20580008",a:"19.44608577",b:"-31.55406255",parent:"\u6EE1\u5929\u661F\u7D2B"},{color:"\u6EE1\u5929\u661F\u7D2B",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"24.774",a:"11.745",b:"-35.867",parent:"\u6EE1\u5929\u661F\u7D2B"},{color:"\u6EE1\u5929\u661F\u7D2B",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"48",a:"15",b:"-26",parent:"\u6EE1\u5929\u661F\u7D2B"},{color:"\u6EE1\u5929\u661F\u7D2B",from:"\u8272\u8C31_perchouli",l:"24.425",a:"23.302",b:"-43.176",parent:"\u6EE1\u5929\u661F\u7D2B"},{color:"\u73AB\u7470\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"51.54345514",a:"47.04518128",b:"-18.27073224",parent:"\u73AB\u7470\u7EA2"},{color:"\u73AB\u7470\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"51.561",a:"67.342",b:"-4.567",parent:"\u73AB\u7470\u7EA2"},{color:"\u73AB\u7470\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"24.08323776",a:"38.16961282",b:"20.3105263",parent:"\u73AB\u7470\u7EA2"},{color:"\u73AB\u7470\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"35.287",a:"50.491",b:"35.043",parent:"\u73AB\u7470\u7EA2"},{color:"\u73AB\u7470\u7EA2",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"34.237",a:"33.907",b:"6.236",parent:"\u73AB\u7470\u7EA2"},{color:"\u73AB\u7470\u7EA2",from:"\u8272\u8C31_perchouli",l:"49.17",a:"65.311",b:"-3.482",parent:"\u73AB\u7470\u7EA2"},{color:"\u73AB\u7470\u7D2B",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"44.18418811",a:"51.07745064",b:"-20.54626394",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"22.08773701",a:"6.776731966",b:"-4.331635662",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"31",a:"40",b:"-18",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"40",a:"55",b:"-4",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"46",a:"41",b:"-3",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"46.028",a:"57.843",b:"-3.665",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u8272\u8C31_perchouli",l:"44.097",a:"60.649",b:"-10.284",parent:"\u73AB\u7470\u7D2B"},{color:"\u73AB\u7470\u7D2B",from:"\u56FD\u6807",l:"32.9",a:"26.7",b:"-17.4",parent:"\u73AB\u7470\u7D2B"},{color:"\u7C73\u767D",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"79.251",a:"5.377",b:"71.922",parent:"\u7C73\u767D"},{color:"\u7C73\u767D",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"92.568",a:"-0.89",b:"5.192",parent:"\u7C73\u767D"},{color:"\u7C73\u767D",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"87",a:"4",b:"34",parent:"\u7C73\u767D"},{color:"\u7C73\u767D",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"84",a:"6",b:"25",parent:"\u7C73\u767D"},{color:"\u7C73\u767D",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"70",a:"25",b:"55",parent:"\u7C73\u767D"},{color:"\u7C73\u767D",from:"\u8272\u8C31_perchouli",l:"90.471",a:"6.119",b:"12.08",parent:"\u7C73\u767D"},{color:"\u7C73\u767D",from:"\u56FD\u6807",l:"90.3",a:"0",b:"7.2",parent:"\u7C73\u767D"},{color:"\u7C73\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"91.08182304",a:"6.52712531",b:"8.818286854",parent:"\u7C73\u9EC4"},{color:"\u7C73\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"79.251",a:"5.377",b:"71.922",parent:"\u7C73\u9EC4"},{color:"\u7C73\u9EC4",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"92.568",a:"-0.89",b:"5.192",parent:"\u7C73\u9EC4"},{color:"\u7C73\u9EC4",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"65.61128409",a:"59.09807278",b:"28.672999",parent:"\u7C73\u9EC4"},{color:"\u7C73\u9EC4",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"87",a:"4",b:"34",parent:"\u7C73\u9EC4"},{color:"\u7C73\u9EC4",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"84",a:"6",b:"25",parent:"\u7C73\u9EC4"},{color:"\u7C73\u9EC4",from:"\u56FD\u6807",l:"90.3",a:"0",b:"7.2",parent:"\u7C73\u9EC4"},{color:"\u79D8\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"63.829",a:"-20.998",b:"-7.861",parent:"\u79D8\u8272"},{color:"\u79D8\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"83.366",a:"-5.501",b:"2.553",parent:"\u79D8\u8272"},{color:"\u79D8\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"63.026",a:"-7.545",b:"3.602",parent:"\u79D8\u8272"},{color:"\u79D8\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"88.988",a:"-5.889",b:"2.926",parent:"\u79D8\u8272"},{color:"\u871C\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"83.8614894",a:"17.70317431",b:"37.54357758",parent:"\u871C\u9EC4"},{color:"\u871C\u9EC4",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"89",a:"1",b:"43",parent:"\u871C\u9EC4"},{color:"\u871C\u9EC4",from:"\u8272\u8C31_perchouli",l:"79.557",a:"14.294",b:"57.686",parent:"\u871C\u9EC4"},{color:"\u871C\u9EC4",from:"\u56FD\u6807",l:"87.9",a:"5.3",b:"37.5",parent:"\u871C\u9EC4"},{color:"\u660E\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"85.854",a:"-5.152",b:"64.889",parent:"\u660E\u9EC4"},{color:"\u660E\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"88.57",a:"-3.148",b:"72.379",parent:"\u660E\u9EC4"},{color:"\u660E\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"78.165",a:"0.459",b:"61.132",parent:"\u660E\u9EC4"},{color:"\u660E\u9EC4",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"79",a:"1",b:"73",parent:"\u660E\u9EC4"},{color:"\u660E\u9EC4",from:"\u56FD\u6807",l:"79.2",a:"11.6",b:"73.4",parent:"\u660E\u9EC4"},{color:"\u58A8\u7EFF",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"27",a:"-7",b:"-6",parent:"\u58A8\u7EFF"},{color:"\u58A8\u7EFF",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"27",a:"-111",b:"-7",parent:"\u58A8\u7EFF"},{color:"\u58A8\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"35.88",a:"-8.096",b:"3.864",parent:"\u58A8\u7EFF"},{color:"\u58A8\u7EFF",from:"\u56FD\u6807",l:"38.7",a:"-11.8",b:"6.7",parent:"\u58A8\u7EFF"},{color:"\u58A8\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"31.109",a:"-0.66",b:"-3.339",parent:"\u58A8\u8272"},{color:"\u58A8\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"40.009",a:"-2.646",b:"-9.217",parent:"\u58A8\u8272"},{color:"\u58A8\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"13.927",a:"-1.5",b:"2.124",parent:"\u58A8\u8272"},{color:"\u58A8\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"20.386",a:"-0.069",b:"-0.12",parent:"\u58A8\u8272"},{color:"\u58A8\u8272",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"37",a:"1",b:"0",parent:"\u58A8\u8272"},{color:"\u5AE9\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.68122822",a:"-29.795989",b:"39.13823402",parent:"\u5AE9\u7EFF"},{color:"\u5AE9\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"63",a:"-27",b:"31",parent:"\u5AE9\u7EFF"},{color:"\u5AE9\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"69.509",a:"-28.502",b:"60.543",parent:"\u5AE9\u7EFF"},{color:"\u5AE9\u7EFF",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"73",a:"-22",b:"11",parent:"\u5AE9\u7EFF"},{color:"\u5AE9\u7EFF",from:"\u56FD\u6807",l:"81",a:"-22.8",b:"48.7",parent:"\u5AE9\u7EFF"},{color:"\u85D5\u8377",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"81.34803538",a:"17.1780035",b:"12.73360878",parent:"\u85D5\u8377"},{color:"\u85D5\u8377",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"78.11",a:"10.869",b:"-3.539",parent:"\u85D5\u8377"},{color:"\u85D5\u8377",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"78.792",a:"11.693",b:"-3.461",parent:"\u85D5\u8377"},{color:"\u85D5\u8377",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"83.718",a:"11.014",b:"13.187",parent:"\u85D5\u8377"},{color:"\u85D5\u8377",from:"\u8272\u8C31_perchouli",l:"81.889",a:"11.886",b:"16.174",parent:"\u85D5\u8377"},{color:"\u860B\u5A46\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"35.791",a:"-11.557",b:"8.141",parent:"\u860B\u5A46\u7EFF"},{color:"\u860B\u5A46\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"55.857",a:"-35.794",b:"11.627",parent:"\u860B\u5A46\u7EFF"},{color:"\u860B\u5A46\u7EFF",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"32",a:"-22",b:"-8",parent:"\u860B\u5A46\u7EFF"},{color:"\u860B\u5A46\u7EFF",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"38",a:"-41",b:"-7",parent:"\u860B\u5A46\u7EFF"},{color:"\u860B\u5A46\u7EFF",from:"\u56FD\u6807",l:"39.4",a:"-30.3",b:"4.3",parent:"\u860B\u5A46\u7EFF"},{color:"\u8461\u8404\u7D2B",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"41.21698588",a:"12.42185484",b:"-0.085884091",parent:"\u8461\u8404\u7D2B"},{color:"\u8461\u8404\u7D2B",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"20.8037771",a:"5.853924895",b:"-5.588137379",parent:"\u8461\u8404\u7D2B"},{color:"\u8461\u8404\u7D2B",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"21.528",a:"5.268",b:"-16.331",parent:"\u8461\u8404\u7D2B"},{color:"\u8461\u8404\u7D2B",from:"\u8272\u8C31_perchouli",l:"18.559",a:"21.846",b:"6.995",parent:"\u8461\u8404\u7D2B"},{color:"\u8461\u8404\u7D2B",from:"\u56FD\u6807",l:"31.8",a:"22.5",b:"-19.3",parent:"\u8461\u8404\u7D2B"},{color:"\u6F06\u9ED1",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"17.426",a:"1.878",b:"-0.923",parent:"\u6F06\u9ED1"},{color:"\u6F06\u9ED1",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"17.34",a:"2.055",b:"-2.624",parent:"\u6F06\u9ED1"},{color:"\u6F06\u9ED1",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"11.573",a:"0.574",b:"1.111",parent:"\u6F06\u9ED1"},{color:"\u6F06\u9ED1",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"10.679",a:"3.261",b:"-4.534",parent:"\u6F06\u9ED1"},{color:"\u6D45\u7C89\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"85",a:"33",b:"7",parent:"\u6D45\u7C89\u7EA2"},{color:"\u6D45\u7C89\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"82",a:"42",b:"10",parent:"\u6D45\u7C89\u7EA2"},{color:"\u6D45\u7C89\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"76",a:"38",b:"5",parent:"\u6D45\u7C89\u7EA2"},{color:"\u6D45\u7C89\u7EA2",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"80",a:"18",b:"8",parent:"\u6D45\u7C89\u7EA2"},{color:"\u6D45\u6E56\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"86",a:"-7",b:"0",parent:"\u6D45\u6E56\u5170"},{color:"\u6D45\u6E56\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"84",a:"-10",b:"-4",parent:"\u6D45\u6E56\u5170"},{color:"\u6D45\u6E56\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"83",a:"-8",b:"-7",parent:"\u6D45\u6E56\u5170"},{color:"\u6D45\u6E56\u5170",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"82",a:"-15",b:"0",parent:"\u6D45\u6E56\u5170"},{color:"\u6D45\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"77",a:"1",b:"2",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"70",a:"0",b:"4",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"64",a:"1",b:"2",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"59",a:"-4",b:"-1",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"50",a:"-5",b:"-4",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"81.432",a:"-1.357",b:"-6.496",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"65",a:"-1",b:"-4",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"85.47",a:"0.67",b:"1.51",parent:"\u6D45\u7070"},{color:"\u6D45\u7070",from:"\u8272\u8C31_perchouli",l:"85.152",a:"0.494",b:"5.176",parent:"\u6D45\u7070"},{color:"\u6D45\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"73",a:"-8",b:"-18",parent:"\u6D45\u5170"},{color:"\u6D45\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"67",a:"-9",b:"-18",parent:"\u6D45\u5170"},{color:"\u6D45\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"62",a:"-7",b:"-27",parent:"\u6D45\u5170"},{color:"\u6D45\u5170",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"55",a:"-2",b:"-29",parent:"\u6D45\u5170"},{color:"\u6D45\u84DD",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"79.411",a:"-13.428",b:"-18.007",parent:"\u6D45\u84DD"},{color:"\u6D45\u84DD",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"46",a:"-5",b:"-30",parent:"\u6D45\u84DD"},{color:"\u6D45\u84DD",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"51",a:"-5",b:"-29",parent:"\u6D45\u84DD"},{color:"\u6D45\u84DD",from:"\u56FD\u6807",l:"82.6",a:"-10.4",b:"-17.6",parent:"\u6D45\u84DD"},{color:"\u6D45\u96EA\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"85",a:"7",b:"-6",parent:"\u6D45\u96EA\u9752"},{color:"\u6D45\u96EA\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"80",a:"11",b:"-12",parent:"\u6D45\u96EA\u9752"},{color:"\u6D45\u96EA\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"65",a:"-13",b:"-19",parent:"\u6D45\u96EA\u9752"},{color:"\u6D45\u96EA\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"61",a:"24",b:"-20",parent:"\u6D45\u96EA\u9752"},{color:"\u6D45\u96EA\u9752",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"67",a:"19",b:"-14",parent:"\u6D45\u96EA\u9752"},{color:"\u6D45\u96EA\u9752",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"51",a:"18",b:"-25",parent:"\u6D45\u96EA\u9752"},{color:"\u6D45\u8840\u7259",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"87",a:"12",b:"28",parent:"\u6D45\u8840\u7259"},{color:"\u6D45\u8840\u7259",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"82",a:"23",b:"26",parent:"\u6D45\u8840\u7259"},{color:"\u6D45\u8840\u7259",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"75",a:"36",b:"35",parent:"\u6D45\u8840\u7259"},{color:"\u6D45\u8840\u7259",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"67",a:"45",b:"17",parent:"\u6D45\u8840\u7259"},{color:"\u6D45\u8840\u7259",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"83.776",a:"8.927",b:"3.832",parent:"\u6D45\u8840\u7259"},{color:"\u831C\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"58",a:"52",b:"16",parent:"\u831C\u7EA2"},{color:"\u831C\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"44.521",a:"50.375",b:"13.877",parent:"\u831C\u7EA2"},{color:"\u831C\u7EA2",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"59.824",a:"41.763",b:"11.648",parent:"\u831C\u7EA2"},{color:"\u831C\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"44.726",a:"41.672",b:"31.866",parent:"\u831C\u7EA2"},{color:"\u831C\u7EA2",from:"\u56FD\u6807",l:"44.9",a:"41.5",b:"8.7",parent:"\u831C\u7EA2"},{color:"\u9752",from:"\u5148\u79E6\u8272\u5F69_\u8096\u4E16\u5B5F",l:"25",a:"20",b:"-58",parent:"\u9752"},{color:"\u9752",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"41.612",a:"-20.568",b:"-44.405",parent:"\u9752"},{color:"\u9752",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"43.486",a:"7.823",b:"-39.026",parent:"\u9752"},{color:"\u9752",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"16",a:"3",b:"-6",parent:"\u9752"},{color:"\u9752",from:"\u56FD\u6807",l:"71.1",a:"-22.6",b:"-15.4",parent:"\u9752"},{color:"\u9752\u7FE0",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.51479085",a:"-44.92446608",b:"5.556893733",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"56.969",a:"-49.387",b:"39.147",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"30.98246263",a:"-31.84451587",b:"-4.615803633",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"51.025",a:"-61.288",b:"15.826",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"49.505",a:"-24.25",b:"-6.497",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"42.67",a:"-20.812",b:"3.127",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"\u8272\u8C31_perchouli",l:"58.674",a:"-48.444",b:"23.467",parent:"\u9752\u7FE0"},{color:"\u9752\u7FE0",from:"\u56FD\u6807",l:"54.6",a:"-54.8",b:"25.2",parent:"\u9752\u7FE0"},{color:"\u9752\u7070\u8272",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"45.05307515",a:"4.164096469",b:"-18.60995631",parent:"\u9752\u7070\u8272"},{color:"\u9752\u7070\u8272",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"48",a:"-2",b:"-7",parent:"\u9752\u7070\u8272"},{color:"\u9752\u7070\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"44.224",a:"-1.137",b:"-2.521",parent:"\u9752\u7070\u8272"},{color:"\u9752\u7070\u8272",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"42.672",a:"-0.352",b:"-1.4",parent:"\u9752\u7070\u8272"},{color:"\u9752\u83B2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"49",a:"30",b:"-18",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"41",a:"36",b:"-30",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"33.885",a:"33.681",b:"-34.6",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"41",a:"28",b:"-23",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"34.343",a:"37.177",b:"-32.719",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"53.25",a:"36.546",b:"-14.348",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u8272\u8C31_perchouli",l:"34.126",a:"50.005",b:"-20.038",parent:"\u9752\u83B2"},{color:"\u9752\u83B2",from:"\u56FD\u6807",l:"61",a:"13.5",b:"-30.5",parent:"\u9752\u83B2"},{color:"\u79CB\u9999\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"68.019",a:"10.115",b:"44.053",parent:"\u79CB\u9999\u8272"},{color:"\u79CB\u9999\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"69.698",a:"5.423",b:"63.246",parent:"\u79CB\u9999\u8272"},{color:"\u79CB\u9999\u8272",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"65.98",a:"3.243",b:"48.792",parent:"\u79CB\u9999\u8272"},{color:"\u79CB\u9999\u8272",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"52",a:"5",b:"50",parent:"\u79CB\u9999\u8272"},{color:"\u79CB\u9999\u8272",from:"\u56FD\u6807",l:"60.5",a:"9.6",b:"39.4",parent:"\u79CB\u9999\u8272"},{color:"\u7FA4\u9752",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"33.088",a:"2.703",b:"-47.147",parent:"\u7FA4\u9752"},{color:"\u7FA4\u9752",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"28.431",a:"2.76",b:"-38.381",parent:"\u7FA4\u9752"},{color:"\u7FA4\u9752",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"33.69",a:"15.55",b:"-53.33",parent:"\u7FA4\u9752"},{color:"\u7FA4\u9752",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"38.75",a:"12.531",b:"-46.373",parent:"\u7FA4\u9752"},{color:"\u7FA4\u9752",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"33.179",a:"18.768",b:"-45.099",parent:"\u7FA4\u9752"},{color:"\u7FA4\u9752",from:"\u8272\u8C31_perchouli",l:"46.325",a:"-0.83",b:"-41.953",parent:"\u7FA4\u9752"},{color:"\u4E73\u767D",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"94.43399914",a:"4.131899544",b:"10.48067279",parent:"\u4E73\u767D"},{color:"\u4E73\u767D",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"90.109",a:"0.015",b:"-1.639",parent:"\u4E73\u767D"},{color:"\u4E73\u767D",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"83.3244701",a:"-5.223897718",b:"-5.631954643",parent:"\u4E73\u767D"},{color:"\u4E73\u767D",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"89.47",a:"-0.723",b:"18.887",parent:"\u4E73\u767D"},{color:"\u4E73\u767D",from:"\u8272\u8C31_perchouli",l:"96.001",a:"-2.299",b:"12.164",parent:"\u4E73\u767D"},{color:"\u4E09\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"74.04457368",a:"-23.89130436",b:"2.086162151",parent:"\u4E09\u7EFF"},{color:"\u4E09\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"64.05",a:"-34.594",b:"-6.065",parent:"\u4E09\u7EFF"},{color:"\u4E09\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"78.325",a:"-18.293",b:"10.342",parent:"\u4E09\u7EFF"},{color:"\u4E09\u7EFF",from:"\u8272\u8C31_perchouli",l:"76.383",a:"-29.347",b:"8.388",parent:"\u4E09\u7EFF"},{color:"\u4E09\u7EFF",from:"\u56FD\u6807",l:"75.9",a:"-27.8",b:"13.5",parent:"\u4E09\u7EFF"},{color:"\u4E0A\u9752",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"23",a:"1",b:"-18",parent:"\u4E0A\u9752"},{color:"\u4E0A\u9752",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"26",a:"-1",b:"-15",parent:"\u4E0A\u9752"},{color:"\u4E0A\u9752",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"24",a:"1",b:"-13",parent:"\u4E0A\u9752"},{color:"\u4E0A\u9752",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"23",a:"2",b:"-15",parent:"\u4E0A\u9752"},{color:"\u4E0A\u9752",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"24",a:"6",b:"-16",parent:"\u4E0A\u9752"},{color:"\u6DF1\u8349\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"40",a:"-13",b:"17",parent:"\u6DF1\u8349\u7EFF"},{color:"\u6DF1\u8349\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"39",a:"-12",b:"14",parent:"\u6DF1\u8349\u7EFF"},{color:"\u6DF1\u8349\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"38",a:"-9",b:"11",parent:"\u6DF1\u8349\u7EFF"},{color:"\u6DF1\u8349\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"38",a:"-8",b:"14",parent:"\u6DF1\u8349\u7EFF"},{color:"\u6DF1\u8349\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"34",a:"-7",b:"12",parent:"\u6DF1\u8349\u7EFF"},{color:"\u6DF1\u8349\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"33",a:"-6",b:"4",parent:"\u6DF1\u8349\u7EFF"},{color:"\u6DF1\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"32",a:"-4",b:"-6",parent:"\u6DF1\u7070"},{color:"\u6DF1\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"33",a:"-3",b:"-12",parent:"\u6DF1\u7070"},{color:"\u6DF1\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"31",a:"1",b:"-10",parent:"\u6DF1\u7070"},{color:"\u6DF1\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"32",a:"0",b:"-11",parent:"\u6DF1\u7070"},{color:"\u6DF1\u7070",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"33",a:"8",b:"-5",parent:"\u6DF1\u7070"},{color:"\u6DF1\u7070",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"44",a:"-8",b:"0",parent:"\u6DF1\u7070"},{color:"\u6DF1\u7070",from:"\u8272\u8C31_perchouli",l:"50.672",a:"2.201",b:"6.334",parent:"\u6DF1\u7070"},{color:"\u6DF1\u84DD",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"30",a:"5",b:"-37",parent:"\u6DF1\u84DD"},{color:"\u6DF1\u84DD",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"30.677",a:"3.071",b:"-17.93",parent:"\u6DF1\u84DD"},{color:"\u6DF1\u84DD",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"19",a:"3",b:"-13",parent:"\u6DF1\u84DD"},{color:"\u6DF1\u84DD",from:"\u56FD\u6807",l:"32",a:"-8.6",b:"-22.4",parent:"\u6DF1\u84DD"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"30",a:"-2",b:"-18",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"31",a:"-3",b:"15",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"30",a:"-3",b:"-13",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"29",a:"7",b:"-15",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"27",a:"-1",b:"-17",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"28",a:"3",b:"-17",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"25",a:"1",b:"-16",parent:"\u6DF1\u4E0A\u9752"},{color:"\u6DF1\u4E0A\u9752",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"22",a:"0",b:"-13",parent:"\u6DF1\u4E0A\u9752"},{color:"\u77F3\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"76.528184",a:"8.595019207",b:"21.37768195",parent:"\u77F3\u9EC4"},{color:"\u77F3\u9EC4",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"80.34",a:"0.96",b:"83.96",parent:"\u77F3\u9EC4"},{color:"\u77F3\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"79.406",a:"2.832",b:"59.225",parent:"\u77F3\u9EC4"},{color:"\u77F3\u9EC4",from:"\u8272\u8C31_perchouli",l:"76.753",a:"5.797",b:"56.675",parent:"\u77F3\u9EC4"},{color:"\u77F3\u9EC4",from:"\u56FD\u6807",l:"80.6",a:"12.5",b:"34",parent:"\u77F3\u9EC4"},{color:"\u77F3\u69B4\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"47.243",a:"68.75",b:"38.64",parent:"\u77F3\u69B4\u7EA2"},{color:"\u77F3\u69B4\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"22.9301559",a:"42.95796206",b:"21.946282",parent:"\u77F3\u69B4\u7EA2"},{color:"\u77F3\u69B4\u7EA2",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"43",a:"51",b:"31",parent:"\u77F3\u69B4\u7EA2"},{color:"\u77F3\u69B4\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"47.143",a:"58.643",b:"28.614",parent:"\u77F3\u69B4\u7EA2"},{color:"\u77F3\u69B4\u7EA2",from:"\u56FD\u6807",l:"52.3",a:"52.1",b:"31.5",parent:"\u77F3\u69B4\u7EA2"},{color:"\u77F3\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"74.03006303",a:"-20.62329357",b:"-7.565615991",parent:"\u77F3\u7EFF"},{color:"\u77F3\u7EFF",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"67.776",a:"-28.666",b:"-10.428",parent:"\u77F3\u7EFF"},{color:"\u77F3\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"52.163",a:"-21.751",b:"15.347",parent:"\u77F3\u7EFF"},{color:"\u77F3\u7EFF",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"39.65",a:"-27.62",b:"10.5",parent:"\u77F3\u7EFF"},{color:"\u77F3\u7EFF",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"39.793",a:"-22.789",b:"-4.238",parent:"\u77F3\u7EFF"},{color:"\u77F3\u7EFF",from:"\u8272\u8C31_perchouli",l:"72.858",a:"-30.952",b:"-8.882",parent:"\u77F3\u7EFF"},{color:"\u77F3\u7EFF",from:"\u56FD\u6807",l:"70.8",a:"-29.2",b:"8",parent:"\u77F3\u7EFF"},{color:"\u6731\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"56.48499616",a:"53.93452241",b:"55.53413355",parent:"\u6731\u7EA2"},{color:"\u6731\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"57.59",a:"46.744",b:"58.822",parent:"\u6731\u7EA2"},{color:"\u6731\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"45.032",a:"64.859",b:"25.699",parent:"\u6731\u7EA2"},{color:"\u6731\u7EA2",from:"\u8272\u8C31_perchouli",l:"56.123",a:"58.183",b:"55.407",parent:"\u6731\u7EA2"},{color:"\u6731\u7EA2",from:"\u56FD\u6807",l:"51.4",a:"48.3",b:"43.2",parent:"\u6731\u7EA2"},{color:"\u6C34\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.57197947",a:"14.08298554",b:"-2.483481753",parent:"\u6C34\u7EA2"},{color:"\u6C34\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"77.323",a:"11.408",b:"-7.463",parent:"\u6C34\u7EA2"},{color:"\u6C34\u7EA2",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"83",a:"20.03",b:"3.33",parent:"\u6C34\u7EA2"},{color:"\u6C34\u7EA2",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"77.719",a:"24.344",b:"-0.05",parent:"\u6C34\u7EA2"},{color:"\u6C34\u7EA2",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"68",a:"28",b:"19",parent:"\u6C34\u7EA2"},{color:"\u6C34\u7EA2",from:"\u8272\u8C31_perchouli",l:"83.227",a:"17.365",b:"1.566",parent:"\u6C34\u7EA2"},{color:"\u677E\u53F6\u7261\u4E39\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"43.56753146",a:"48.64388335",b:"-3.655970478",parent:"\u677E\u53F6\u7261\u4E39\u7EA2"},{color:"\u677E\u53F6\u7261\u4E39\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"39.668",a:"53.224",b:"26.671",parent:"\u677E\u53F6\u7261\u4E39\u7EA2"},{color:"\u677E\u53F6\u7261\u4E39\u7EA2",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"33.296",a:"53.083",b:"13.346",parent:"\u677E\u53F6\u7261\u4E39\u7EA2"},{color:"\u677E\u53F6\u7261\u4E39\u7EA2",from:"\u8272\u8C31_perchouli",l:"54.1",a:"68.769",b:"12.035",parent:"\u677E\u53F6\u7261\u4E39\u7EA2"},{color:"\u6843\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.59696773",a:"11.36731023",b:"-1.180787885",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"50",a:"58",b:"12",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"60.847",a:"50.55",b:"-6.69",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"42.54160394",a:"44.63568689",b:"23.30265013",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"70",a:"44",b:"-2",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"47",a:"44",b:"30",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u8272\u8C31_perchouli",l:"76.651",a:"22.844",b:"16.418",parent:"\u6843\u7EA2"},{color:"\u6843\u7EA2",from:"\u56FD\u6807",l:"58.9",a:"41.1",b:"-0.7",parent:"\u6843\u7EA2"},{color:"\u85E4\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"87.71765655",a:"-0.372825429",b:"84.76815222",parent:"\u85E4\u9EC4"},{color:"\u85E4\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"78.667",a:"10.795",b:"72.197",parent:"\u85E4\u9EC4"},{color:"\u85E4\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"74.943",a:"18.118",b:"51.345",parent:"\u85E4\u9EC4"},{color:"\u85E4\u9EC4",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"80.316",a:"8.068",b:"77.489",parent:"\u85E4\u9EC4"},{color:"\u85E4\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"88.344",a:"-6.938",b:"49.808",parent:"\u85E4\u9EC4"},{color:"\u85E4\u9EC4",from:"\u8272\u8C31_perchouli",l:"85.359",a:"0.83",b:"84.497",parent:"\u85E4\u9EC4"},{color:"\u85E4\u9EC4",from:"\u56FD\u6807",l:"64.6",a:"14.4",b:"57.4",parent:"\u85E4\u9EC4"},{color:"\u5929\u84DD",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"51.52098898",a:"-0.37609669",b:"-43.55239646",parent:"\u5929\u84DD"},{color:"\u5929\u84DD",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"69.856",a:"-22.951",b:"-27.935",parent:"\u5929\u84DD"},{color:"\u5929\u84DD",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"43.94457369",a:"-4.354096317",b:"-28.53419588",parent:"\u5929\u84DD"},{color:"\u5929\u84DD",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"61.44",a:"-7.07",b:"-18.82",parent:"\u5929\u84DD"},{color:"\u5929\u84DD",from:"\u8272\u8C31_perchouli",l:"47.774",a:"-4.319",b:"-39.079",parent:"\u5929\u84DD"},{color:"\u5929\u84DD",from:"\u56FD\u6807",l:"76.3",a:"-9.5",b:"-26.5",parent:"\u5929\u84DD"},{color:"\u5929\u9752",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"47.73637944",a:"-13.53582486",b:"2.436520966",parent:"\u5929\u9752"},{color:"\u5929\u9752",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"50.714",a:"-15.058",b:"-43.802",parent:"\u5929\u9752"},{color:"\u5929\u9752",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"43.5",a:"8.53",b:"-7.03",parent:"\u5929\u9752"},{color:"\u5929\u9752",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"68.633",a:"-24.127",b:"-30.258",parent:"\u5929\u9752"},{color:"\u5929\u9752",from:"\u56FD\u6807",l:"66",a:"-18.5",b:"-21.5",parent:"\u5929\u9752"},{color:"\u94DC\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"52.363",a:"-19.127",b:"-2.433",parent:"\u94DC\u7EFF"},{color:"\u94DC\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"67.675",a:"-8.032",b:"10.804",parent:"\u94DC\u7EFF"},{color:"\u94DC\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"66.167",a:"-20.454",b:"0.865",parent:"\u94DC\u7EFF"},{color:"\u94DC\u7EFF",from:"\u8272\u8C31_perchouli",l:"63.735",a:"-44.499",b:"11.235",parent:"\u94DC\u7EFF"},{color:"\u571F\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"66.4996932",a:"6.799616769",b:"38.05888003",parent:"\u571F\u9EC4"},{color:"\u571F\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"74.065",a:"8.375",b:"58.14",parent:"\u571F\u9EC4"},{color:"\u571F\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"67.679",a:"8.317",b:"41.758",parent:"\u571F\u9EC4"},{color:"\u571F\u9EC4",from:"\u8272\u8C31_perchouli",l:"69.133",a:"9.379",b:"67.989",parent:"\u571F\u9EC4"},{color:"\u571F\u9EC4",from:"\u56FD\u6807",l:"63.8",a:"17.6",b:"66",parent:"\u571F\u9EC4"},{color:"\u9A7C\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"54.458",a:"11.432",b:"18.496",parent:"\u9A7C\u8272"},{color:"\u9A7C\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"56.963",a:"16.383",b:"-16.871",parent:"\u9A7C\u8272"},{color:"\u9A7C\u8272",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"59",a:"15",b:"28",parent:"\u9A7C\u8272"},{color:"\u9A7C\u8272",from:"\u8272\u8C31_perchouli",l:"32.641",a:"10.263",b:"22.227",parent:"\u9A7C\u8272"},{color:"\u9A7C\u8272",from:"\u56FD\u6807",l:"70.7",a:"15.1",b:"15.9",parent:"\u9A7C\u8272"},{color:"\u867E\u9752",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"44.224",a:"-1.137",b:"-2.521",parent:"\u867E\u9752"},{color:"\u867E\u9752",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"58.07440632",a:"-18.83611333",b:"-5.421130805",parent:"\u867E\u9752"},{color:"\u867E\u9752",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"63",a:"-11",b:"6",parent:"\u867E\u9752"},{color:"\u867E\u9752",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"63",a:"-1",b:"-6",parent:"\u867E\u9752"},{color:"\u867E\u9752",from:"\u56FD\u6807",l:"60.9",a:"-5.9",b:"-7.9",parent:"\u867E\u9752"},{color:"\u8C61\u7259\u767D",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"83.197",a:"1.602",b:"19.437",parent:"\u8C61\u7259\u767D"},{color:"\u8C61\u7259\u767D",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"93.243",a:"0.909",b:"3.372",parent:"\u8C61\u7259\u767D"},{color:"\u8C61\u7259\u767D",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"87",a:"3",b:"13",parent:"\u8C61\u7259\u767D"},{color:"\u8C61\u7259\u767D",from:"\u8272\u8C31_perchouli",l:"99.581",a:"-0.706",b:"2.979",parent:"\u8C61\u7259\u767D"},{color:"\u87F9\u9752",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"76.069",a:"-5.768",b:"-0.774",parent:"\u87F9\u9752"},{color:"\u87F9\u9752",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"29.36044818",a:"12.92866342",b:"-21.89103423",parent:"\u87F9\u9752"},{color:"\u87F9\u9752",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"66",a:"-1",b:"10",parent:"\u87F9\u9752"},{color:"\u87F9\u9752",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"49",a:"-6",b:"0",parent:"\u87F9\u9752"},{color:"\u87F9\u9752",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"61.717",a:"-9.914",b:"4.969",parent:"\u87F9\u9752"},{color:"\u87F9\u9752",from:"\u56FD\u6807",l:"61",a:"-15.3",b:"-10.3",parent:"\u87F9\u9752"},{color:"\u674F\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"76.50751126",a:"35.55919481",b:"42.30820374",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"88",a:"5",b:"50",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"59",a:"10",b:"24",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"60",a:"24",b:"28",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"67",a:"9",b:"25",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"65.004",a:"33.254",b:"60.423",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"57.787",a:"23.38",b:"60.275",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"73",a:"16",b:"85",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u8272\u8C31_perchouli",l:"69.279",a:"34.007",b:"71.631",parent:"\u674F\u9EC4"},{color:"\u674F\u9EC4",from:"\u56FD\u6807",l:"72",a:"35.4",b:"54.8",parent:"\u674F\u9EC4"},{color:"\u96C4\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"74.03865492",a:"38.49696568",b:"48.03366579",parent:"\u96C4\u9EC4"},{color:"\u96C4\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"66.64",a:"29.885",b:"68.265",parent:"\u96C4\u9EC4"},{color:"\u96C4\u9EC4",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"71.167",a:"8.571",b:"60.913",parent:"\u96C4\u9EC4"},{color:"\u96C4\u9EC4",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"62.05",a:"58.84",b:"71.32",parent:"\u96C4\u9EC4"},{color:"\u96C4\u9EC4",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"57.48",a:"20.447",b:"39.567",parent:"\u96C4\u9EC4"},{color:"\u96C4\u9EC4",from:"\u8272\u8C31_perchouli",l:"72.261",a:"30.165",b:"77.225",parent:"\u96C4\u9EC4"},{color:"\u96C4\u9EC4",from:"\u56FD\u6807",l:"59.4",a:"30.4",b:"32.3",parent:"\u96C4\u9EC4"},{color:"\u96EA\u9752",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"65.726",a:"9.123",b:"-22.586",parent:"\u96EA\u9752"},{color:"\u96EA\u9752",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"64",a:"21",b:"-13",parent:"\u96EA\u9752"},{color:"\u96EA\u9752",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"35",a:"22",b:"-29",parent:"\u96EA\u9752"},{color:"\u96EA\u9752",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"49",a:"29",b:"-23",parent:"\u96EA\u9752"},{color:"\u96EA\u9752",from:"\u56FD\u6807",l:"70.9",a:"6.7",b:"-11.7",parent:"\u96EA\u9752"},{color:"\u7259\u8272",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"91.08186713",a:"4.76476076",b:"24.69969807",parent:"\u7259\u8272"},{color:"\u7259\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"83.197",a:"1.602",b:"19.437",parent:"\u7259\u8272"},{color:"\u7259\u8272",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"70",a:"3",b:"15",parent:"\u7259\u8272"},{color:"\u7259\u8272",from:"\u8272\u8C31_perchouli",l:"86.4",a:"0.055",b:"35.42",parent:"\u7259\u8272"},{color:"\u7259\u8272",from:"\u56FD\u6807",l:"91.6",a:"5.1",b:"11",parent:"\u7259\u8272"},{color:"\u82BD\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.58166833",a:"-34.61783444",b:"47.19695952",parent:"\u82BD\u7EFF"},{color:"\u82BD\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"76.629",a:"-16.275",b:"64.121",parent:"\u82BD\u7EFF"},{color:"\u82BD\u7EFF",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"73",a:"-9",b:"20",parent:"\u82BD\u7EFF"},{color:"\u82BD\u7EFF",from:"\u8272\u8C31_perchouli",l:"73.296",a:"-32.611",b:"52.394",parent:"\u82BD\u7EFF"},{color:"\u80ED\u8102\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"56.53068885",a:"51.28661709",b:"31.98816931",parent:"\u80ED\u8102\u7EA2"},{color:"\u80ED\u8102\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"43.517",a:"49.919",b:"-6.749",parent:"\u80ED\u8102\u7EA2"},{color:"\u80ED\u8102\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"69.09561046",a:"63.34527918",b:"32.60782044",parent:"\u80ED\u8102\u7EA2"},{color:"\u80ED\u8102\u7EA2",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"35.399",a:"31.515",b:"8.536",parent:"\u80ED\u8102\u7EA2"},{color:"\u80ED\u8102\u7EA2",from:"\u8272\u8C31_perchouli",l:"54.253",a:"65.643",b:"54.898",parent:"\u80ED\u8102\u7EA2"},{color:"\u80ED\u8102\u7EA2",from:"\u56FD\u6807",l:"35.2",a:"43.1",b:"5.7",parent:"\u80ED\u8102\u7EA2"},{color:"\u6BB7\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"33.47336899",a:"34.91385768",b:"-4.557985183",parent:"\u6BB7\u7EA2"},{color:"\u6BB7\u7EA2",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"38.879",a:"51.526",b:"25.954",parent:"\u6BB7\u7EA2"},{color:"\u6BB7\u7EA2",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"34.576",a:"33.646",b:"7.379",parent:"\u6BB7\u7EA2"},{color:"\u6BB7\u7EA2",from:"\u8272\u8C31_perchouli",l:"27.428",a:"46.106",b:"23.922",parent:"\u6BB7\u7EA2"},{color:"\u6BB7\u7EA2",from:"\u56FD\u6807",l:"38",a:"40.1",b:"22.6",parent:"\u6BB7\u7EA2"},{color:"\u94F6\u767D",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"91.08176574",a:"9.586963566",b:"-8.973411842",parent:"\u94F6\u767D"},{color:"\u94F6\u767D",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"90.038",a:"-0.1",b:"-0.851",parent:"\u94F6\u767D"},{color:"\u94F6\u767D",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"90.485",a:"0.186",b:"8.287",parent:"\u94F6\u767D"},{color:"\u94F6\u767D",from:"\u8272\u8C31_perchouli",l:"94.796",a:"-0.193",b:"1.563",parent:"\u94F6\u767D"},{color:"\u94F6\u767D",from:"\u56FD\u6807",l:"84.4",a:"-0.4",b:"-1.1",parent:"\u94F6\u767D"},{color:"\u94F6\u767D",from:"\u56FD\u6807",l:"79",a:"0",b:"-1.4",parent:"\u94F6\u767D"},{color:"\u94F6\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"47.758",a:"52.64",b:"27.398",parent:"\u94F6\u7EA2"},{color:"\u94F6\u7EA2",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"77.22",a:"27.75",b:"4.2",parent:"\u94F6\u7EA2"},{color:"\u94F6\u7EA2",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"83.932",a:"11.649",b:"-0.718",parent:"\u94F6\u7EA2"},{color:"\u94F6\u7EA2",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"52.946",a:"31.149",b:"5.618",parent:"\u94F6\u7EA2"},{color:"\u94F6\u7EA2",from:"\u56FD\u6807",l:"34.3",a:"28.2",b:"29.4",parent:"\u94F6\u7EA2"},{color:"\u94F6\u8272",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"86.601",a:"1.892",b:"-5.736",parent:"\u94F6\u8272"},{color:"\u94F6\u8272",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"87.08",a:"2.416",b:"-6.73",parent:"\u94F6\u8272"},{color:"\u94F6\u8272",from:"\u56FD\u6807",l:"76.9",a:"-0.4",b:"-0.6",parent:"\u94F6\u8272"},{color:"\u94F6\u8272",from:"\u56FD\u6807",l:"76.44",a:"-1.22",b:"-0.88",parent:"\u94F6\u8272"},{color:"\u94F6\u9F20\u7070",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.5747446",a:"4.672955968",b:"16.93418813",parent:"\u94F6\u9F20\u7070"},{color:"\u94F6\u9F20\u7070",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"63.991",a:"0.239",b:"-4.256",parent:"\u94F6\u9F20\u7070"},{color:"\u94F6\u9F20\u7070",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"59.553",a:"0.006",b:"-1.114",parent:"\u94F6\u9F20\u7070"},{color:"\u94F6\u9F20\u7070",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"68.828",a:"0.133",b:"-1.728",parent:"\u94F6\u9F20\u7070"},{color:"\u94F6\u9F20\u7070",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"54.859",a:"1.115",b:"-5.091",parent:"\u94F6\u9F20\u7070"},{color:"\u94F6\u9F20\u7070",from:"\u8272\u8C31_perchouli",l:"69.886",a:"-0.36",b:"14.847",parent:"\u94F6\u9F20\u7070"},{color:"\u94F6\u6731",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"53.84120277",a:"54.7025446",b:"34.38015452",parent:"\u94F6\u6731"},{color:"\u94F6\u6731",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"47.749",a:"59.356",b:"32.02",parent:"\u94F6\u6731"},{color:"\u94F6\u6731",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"45.975",a:"62.972",b:"47.335",parent:"\u94F6\u6731"},{color:"\u94F6\u6731",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"46.546",a:"41.609",b:"16.991",parent:"\u94F6\u6731"},{color:"\u94F6\u6731",from:"\u8272\u8C31_perchouli",l:"54.76",a:"66.765",b:"65.183",parent:"\u94F6\u6731"},{color:"\u94F6\u6731",from:"\u56FD\u6807",l:"46.8",a:"41.5",b:"22.6",parent:"\u94F6\u6731"},{color:"\u9E66\u54E5\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"61.67588909",a:"-45.49256094",b:"-4.633001871",parent:"\u9E66\u54E5\u7EFF"},{color:"\u9E66\u54E5\u7EFF",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"58",a:"-32",b:"-11",parent:"\u9E66\u54E5\u7EFF"},{color:"\u9E66\u54E5\u7EFF",from:"\u8272\u8C31_perchouli",l:"59.185",a:"-42.241",b:"6.393",parent:"\u9E66\u54E5\u7EFF"},{color:"\u9E66\u54E5\u7EFF",from:"\u56FD\u6807",l:"76.4",a:"-36.8",b:"5.5",parent:"\u9E66\u54E5\u7EFF"},{color:"\u9E66\u9E49\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"64.14139573",a:"-40.79767351",b:"58.48845744",parent:"\u9E66\u9E49\u7EFF"},{color:"\u9E66\u9E49\u7EFF",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"45.612",a:"-30.869",b:"15.478",parent:"\u9E66\u9E49\u7EFF"},{color:"\u9E66\u9E49\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"35.324",a:"-28.873",b:"10.465",parent:"\u9E66\u9E49\u7EFF"},{color:"\u9E66\u9E49\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"53.293",a:"-29.999",b:"21.531",parent:"\u9E66\u9E49\u7EFF"},{color:"\u9E66\u9E49\u7EFF",from:"\u8272\u8C31_perchouli",l:"63.849",a:"-48.01",b:"58.148",parent:"\u9E66\u9E49\u7EFF"},{color:"\u6CB9\u7EFF",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"45.02607288",a:"-10.04262484",b:"3.156933198",parent:"\u6CB9\u7EFF"},{color:"\u6CB9\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"59.784",a:"-44.268",b:"43.949",parent:"\u6CB9\u7EFF"},{color:"\u6CB9\u7EFF",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"58.03",a:"-0.84",b:"16.2",parent:"\u6CB9\u7EFF"},{color:"\u6CB9\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"39.607",a:"-6.028",b:"4.401",parent:"\u6CB9\u7EFF"},{color:"\u6CB9\u7EFF",from:"\u8272\u8C31_perchouli",l:"23.196",a:"-15.453",b:"12.547",parent:"\u6CB9\u7EFF"},{color:"\u6CB9\u7EFF",from:"\u56FD\u6807",l:"34.4",a:"-6.5",b:"3.9",parent:"\u6CB9\u7EFF"},{color:"\u7389\u8272",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.56874342",a:"-21.15637632",b:"4.432895772",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"66.278",a:"-32.551",b:"8.494",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"71",a:"-23",b:"2",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"84.901",a:"-9.777",b:"2.072",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"90.589",a:"-1.162",b:"9.994",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"84.397",a:"-10.592",b:"9.183",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"\u8272\u8C31_perchouli",l:"64.754",a:"-32.426",b:"12.905",parent:"\u7389\u8272"},{color:"\u7389\u8272",from:"\u56FD\u6807",l:"80.8",a:"-13.6",b:"17.7",parent:"\u7389\u8272"},{color:"\u5143\u9752",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"27.503",a:"0.426",b:"8.119",parent:"\u5143\u9752"},{color:"\u5143\u9752",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"23",a:"-2",b:"0",parent:"\u5143\u9752"},{color:"\u5143\u9752",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"29.944",a:"1.051",b:"-0.304",parent:"\u5143\u9752"},{color:"\u5143\u9752",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"15",a:"1",b:"0",parent:"\u5143\u9752"},{color:"\u6708\u767D",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"91.08171916",a:"-6.844989068",b:"-6.342586645",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"86.335",a:"-1.485",b:"-4.957",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"91.81266643",a:"5.077512984",b:"9.783418849",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"70.66",a:"-6.76",b:"-13.43",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"91.474",a:"-2.952",b:"-6.928",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"43",a:"-7",b:"-14",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u8272\u8C31_perchouli",l:"96.455",a:"-3.859",b:"1.367",parent:"\u6708\u767D"},{color:"\u6708\u767D",from:"\u56FD\u6807",l:"89.2",a:"-8.6",b:"-2",parent:"\u6708\u767D"},{color:"\u67A3\u8910",from:"\u4EBA\u9020\u4E1D\u7EF8\u7F0E\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"43",a:"7",b:"9",parent:"\u67A3\u8910"},{color:"\u67A3\u8910",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"35",a:"10",b:"15",parent:"\u67A3\u8910"},{color:"\u67A3\u8910",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"53.32",a:"22.93",b:"6.16",parent:"\u67A3\u8910"},{color:"\u67A3\u8910",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"28.529",a:"19.772",b:"26.896",parent:"\u67A3\u8910"},{color:"\u67A3\u8910",from:"\u8272\u8C31_perchouli",l:"29.517",a:"28.188",b:"30.276",parent:"\u67A3\u8910"},{color:"\u67A3\u8910",from:"\u56FD\u6807",l:"26.4",a:"9.4",b:"6",parent:"\u67A3\u8910"},{color:"\u67A3\u7EA2",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"33.39559933",a:"35.15159466",b:"4.388485506",parent:"\u67A3\u7EA2"},{color:"\u67A3\u7EA2",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"49.488",a:"43.913",b:"33.88",parent:"\u67A3\u7EA2"},{color:"\u67A3\u7EA2",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"26.34242247",a:"43.67285486",b:"30.27080097",parent:"\u67A3\u7EA2"},{color:"\u67A3\u7EA2",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"42",a:"54",b:"26",parent:"\u67A3\u7EA2"},{color:"\u67A3\u7EA2",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"27",a:"26",b:"3",parent:"\u67A3\u7EA2"},{color:"\u67A3\u7EA2",from:"\u8272\u8C31_perchouli",l:"26.908",a:"42.468",b:"20.38",parent:"\u67A3\u7EA2"},{color:"\u7682",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"15.632",a:"1.063",b:"-1.98",parent:"\u7682"},{color:"\u7682",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"29.425",a:"2.049",b:"1.707",parent:"\u7682"},{color:"\u7682",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"28.81",a:"1.46",b:"2.35",parent:"\u7682"},{color:"\u7682",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"30.168",a:"4.503",b:"15.536",parent:"\u7682"},{color:"\u8D6D\u77F3",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"33.41918815",a:"33.41768887",b:"14.95512569",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u6DA4\u68C9\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"47",a:"8",b:"25",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"49.327",a:"18.75",b:"41.11",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"40.453",a:"13.532",b:"23.842",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"33.886",a:"41.825",b:"29.166",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u6566\u714C\u5F69\u7ED8\u6587\u7269\u6570\u5B57\u5316\u4FDD\u62A4\u8272\u5361\u5236\u4F5C\u65B9\u6CD5\u7814\u7A76_\u6881\u91D1\u661F",l:"52.05",a:"28.94",b:"32.45",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"56.164",a:"18.088",b:"23.942",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u8272\u8C31_perchouli",l:"30.684",a:"40.058",b:"32.479",parent:"\u8D6D\u77F3"},{color:"\u8D6D\u77F3",from:"\u56FD\u6807",l:"40.1",a:"16.1",b:"19.6",parent:"\u8D6D\u77F3"},{color:"\u679D\u7EFF",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"87.528",a:"-7.787",b:"15.001",parent:"\u679D\u7EFF"},{color:"\u679D\u7EFF",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"56",a:"-23",b:"-9",parent:"\u679D\u7EFF"},{color:"\u679D\u7EFF",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"65",a:"-31",b:"-1",parent:"\u679D\u7EFF"},{color:"\u679D\u7EFF",from:"DIC\u4E2D\u56FD\u4F20\u7EDF\u8272",l:"87.149",a:"-12.494",b:"6.289",parent:"\u679D\u7EFF"},{color:"\u679D\u7EFF",from:"\u56FD\u6807",l:"81.2",a:"-17.4",b:"8.4",parent:"\u679D\u7EFF"},{color:"\u6800\u5B50\u9EC4",from:"\u4E2D\u56FD\u8272\u540D\u7EFC\u89C8_\u51D1\u5E78\u536B",l:"71.56626429",a:"1.184966935",b:"62.81944157",parent:"\u6800\u5B50\u9EC4"},{color:"\u6800\u5B50\u9EC4",from:"\u4E2D\u56FD\u4F20\u7EDF\u8272\u5F69\u56FE\u9274_\u9E3F\u6D0B",l:"79.619",a:"10.992",b:"52.996",parent:"\u6800\u5B50\u9EC4"},{color:"\u6800\u5B50\u9EC4",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"72.449",a:"17.523",b:"72.905",parent:"\u6800\u5B50\u9EC4"},{color:"\u6800\u5B50\u9EC4",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"83.539",a:"5.048",b:"57.451",parent:"\u6800\u5B50\u9EC4"},{color:"\u6800\u5B50\u9EC4",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"80.941",a:"8.962",b:"69.767",parent:"\u6800\u5B50\u9EC4"},{color:"\u6800\u5B50\u9EC4",from:"\u8272\u8C31_perchouli",l:"75.538",a:"9.227",b:"76.839",parent:"\u6800\u5B50\u9EC4"},{color:"\u4E2D\u7EFF",from:"\u67D3\u8272\u6837\u672C\u786B\u5316\u7C7B_\u4F55\u8FDB\u4E30",l:"36",a:"-10",b:"-2",parent:"\u4E2D\u7EFF"},{color:"\u4E2D\u7EFF",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"38",a:"23",b:"-9",parent:"\u4E2D\u7EFF"},{color:"\u4E2D\u7EFF",from:"\u67D3\u8272\u6837\u672C\u58EB\u6797\u7C7B_\u4F55\u8FDB\u4E30",l:"50",a:"-41",b:"-6",parent:"\u4E2D\u7EFF"},{color:"\u4E2D\u7EFF",from:"\u56FD\u6807",l:"45.5",a:"-28.3",b:"23.9",parent:"\u4E2D\u7EFF"},{color:"\u6731",from:"\u4E2D\u56FD\u7F8E\u8272_\u4E2D\u56FD\u56FD\u5BB6\u5730\u7406",l:"49.314",a:"64.299",b:"41.904",parent:"\u6731"},{color:"\u6731",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"40",a:"56",b:"24",parent:"\u6731"},{color:"\u6731",from:"\u53E4\u8272\u4E4B\u7F8E_\u9752\u7B80",l:"54.624",a:"53.563",b:"45.093",parent:"\u6731"},{color:"\u6731",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"59.19",a:"40.14",b:"12.21",parent:"\u6731"},{color:"\u6731",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"45.032",a:"64.859",b:"25.699",parent:"\u6731"},{color:"\u6731",from:"\u4E7E\u9686\u8272\u8C31_\u5218\u5251",l:"42",a:"44",b:"31",parent:"\u6731"},{color:"\u6731",from:"\u56FD\u6807",l:"44.2",a:"54.8",b:"35.8",parent:"\u6731"},{color:"\u7816\u8910",from:"\u67D3\u8272\u6837\u672C\u7EB3\u592B\u59A5\u7C7B_\u4F55\u8FDB\u4E30",l:"41",a:"17",b:"17",parent:"\u7816\u8910"},{color:"\u7816\u8910",from:"\u67D3\u4F5C\u6C5F\u5357\u6625\u6C34\u8272_\u91D1\u6210\u71BA",l:"37.36",a:"1.46",b:"2.93",parent:"\u7816\u8910"},{color:"\u7816\u8910",from:"\u6545\u5BAB\u91CC\u7684\u8272\u5F69\u7F8E\u5B66_\u90ED\u6D69",l:"37.763",a:"13.508",b:"20.127",parent:"\u7816\u8910"},{color:"\u7816\u8910",from:"\u8272\u8C31_perchouli",l:"21.112",a:"28.051",b:"18.446",parent:"\u7816\u8910"},{color:"\u7816\u8910",from:"\u56FD\u6807",l:"36.6",a:"11.7",b:"19.3",parent:"\u7816\u8910"},{color:"\u7956\u6BCD\u7EFF",from:"\u94A7\u74F7\u8272\u5F69\u7684\u7279\u5F81\u4E0E\u5206\u7C7B\u4F53\u7CFB\u7814\u7A76_\u738B\u5E86\u658C",l:"50.88176566",a:"-45.32748535",b:"60.66851349",parent:"\u7956\u6BCD\u7EFF"},{color:"\u7956\u6BCD\u7EFF",from:"\u7EDE\u4E1D\u67D3\u8272\u57FA\u672C\u8272\u8C31_\u4F55\u8FDB\u4E30",l:"55",a:"-38",b:"3",parent:"\u7956\u6BCD\u7EFF"},{color:"\u7956\u6BCD\u7EFF",from:"\u4E2D\u56FD\u989C\u8272_\u9EC4\u4EC1\u8FBE",l:"40.197",a:"-23.485",b:"3.453",parent:"\u7956\u6BCD\u7EFF"},{color:"\u7956\u6BCD\u7EFF",from:"\u56FD\u6807",l:"51.3",a:"-46.8",b:"12.1",parent:"\u7956\u6BCD\u7EFF"}],z4={type:"change"},_2={type:"start"},B4={type:"end"};class jo extends F1{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new L,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:z1.ROTATE,MIDDLE:z1.DOLLY,RIGHT:z1.PAN},this.touches={ONE:B1.ROTATE,TWO:B1.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(A){A.addEventListener("keydown",Ie),this._domElementKeyEvents=A},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",Ie),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(z4),n.update(),r=i.NONE},this.update=function(){const A=new L,Y=new N1().setFromUnitVectors(e.up,new L(0,1,0)),z=Y.clone().invert(),de=new L,ve=new N1,ye=2*Math.PI;return function(){const be=n.object.position;A.copy(be).sub(n.target),A.applyQuaternion(Y),a.setFromVector3(A),n.autoRotate&&r===i.NONE&&M(R()),n.enableDamping?(a.theta+=c.theta*n.dampingFactor,a.phi+=c.phi*n.dampingFactor):(a.theta+=c.theta,a.phi+=c.phi);let Re=n.minAzimuthAngle,Oe=n.maxAzimuthAngle;return isFinite(Re)&&isFinite(Oe)&&(Re<-Math.PI?Re+=ye:Re>Math.PI&&(Re-=ye),Oe<-Math.PI?Oe+=ye:Oe>Math.PI&&(Oe-=ye),Re<=Oe?a.theta=Math.max(Re,Math.min(Oe,a.theta)):a.theta=a.theta>(Re+Oe)/2?Math.max(Re,a.theta):Math.min(Oe,a.theta)),a.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,a.phi)),a.makeSafe(),a.radius*=l,a.radius=Math.max(n.minDistance,Math.min(n.maxDistance,a.radius)),n.enableDamping===!0?n.target.addScaledVector(u,n.dampingFactor):n.target.add(u),A.setFromSpherical(a),A.applyQuaternion(z),be.copy(n.target).add(A),n.object.lookAt(n.target),n.enableDamping===!0?(c.theta*=1-n.dampingFactor,c.phi*=1-n.dampingFactor,u.multiplyScalar(1-n.dampingFactor)):(c.set(0,0,0),u.set(0,0,0)),l=1,f||de.distanceToSquared(n.object.position)>s||8*(1-ve.dot(n.object.quaternion))>s?(n.dispatchEvent(z4),de.copy(n.object.position),ve.copy(n.object.quaternion),f=!1,!0):!1}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",b),n.domElement.removeEventListener("pointerdown",K),n.domElement.removeEventListener("pointercancel",le),n.domElement.removeEventListener("wheel",Se),n.domElement.removeEventListener("pointermove",_e),n.domElement.removeEventListener("pointerup",le),n._domElementKeyEvents!==null&&(n._domElementKeyEvents.removeEventListener("keydown",Ie),n._domElementKeyEvents=null)};const n=this,i={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=i.NONE;const s=1e-6,a=new P4,c=new P4;let l=1;const u=new L;let f=!1;const h=new he,p=new he,g=new he,_=new he,m=new he,d=new he,w=new he,x=new he,v=new he,y=[],C={};function R(){return 2*Math.PI/60/60*n.autoRotateSpeed}function D(){return Math.pow(.95,n.zoomSpeed)}function M(A){c.theta-=A}function T(A){c.phi-=A}const W=function(){const A=new L;return function(z,de){A.setFromMatrixColumn(de,0),A.multiplyScalar(-z),u.add(A)}}(),Z=function(){const A=new L;return function(z,de){n.screenSpacePanning===!0?A.setFromMatrixColumn(de,1):(A.setFromMatrixColumn(de,0),A.crossVectors(n.object.up,A)),A.multiplyScalar(z),u.add(A)}}(),I=function(){const A=new L;return function(z,de){const ve=n.domElement;if(n.object.isPerspectiveCamera){const ye=n.object.position;A.copy(ye).sub(n.target);let me=A.length();me*=Math.tan(n.object.fov/2*Math.PI/180),W(2*z*me/ve.clientHeight,n.object.matrix),Z(2*de*me/ve.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(W(z*(n.object.right-n.object.left)/n.object.zoom/ve.clientWidth,n.object.matrix),Z(de*(n.object.top-n.object.bottom)/n.object.zoom/ve.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function N(A){n.object.isPerspectiveCamera?l/=A:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*A)),n.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function H(A){n.object.isPerspectiveCamera?l*=A:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/A)),n.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function J(A){h.set(A.clientX,A.clientY)}function ee(A){w.set(A.clientX,A.clientY)}function j(A){_.set(A.clientX,A.clientY)}function oe(A){p.set(A.clientX,A.clientY),g.subVectors(p,h).multiplyScalar(n.rotateSpeed);const Y=n.domElement;M(2*Math.PI*g.x/Y.clientHeight),T(2*Math.PI*g.y/Y.clientHeight),h.copy(p),n.update()}function te(A){x.set(A.clientX,A.clientY),v.subVectors(x,w),v.y>0?N(D()):v.y<0&&H(D()),w.copy(x),n.update()}function Me(A){m.set(A.clientX,A.clientY),d.subVectors(m,_).multiplyScalar(n.panSpeed),I(d.x,d.y),_.copy(m),n.update()}function ae(A){A.deltaY<0?H(D()):A.deltaY>0&&N(D()),n.update()}function V(A){let Y=!1;switch(A.code){case n.keys.UP:A.ctrlKey||A.metaKey||A.shiftKey?T(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(0,n.keyPanSpeed),Y=!0;break;case n.keys.BOTTOM:A.ctrlKey||A.metaKey||A.shiftKey?T(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(0,-n.keyPanSpeed),Y=!0;break;case n.keys.LEFT:A.ctrlKey||A.metaKey||A.shiftKey?M(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(n.keyPanSpeed,0),Y=!0;break;case n.keys.RIGHT:A.ctrlKey||A.metaKey||A.shiftKey?M(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):I(-n.keyPanSpeed,0),Y=!0;break}Y&&(A.preventDefault(),n.update())}function $(){if(y.length===1)h.set(y[0].pageX,y[0].pageY);else{const A=.5*(y[0].pageX+y[1].pageX),Y=.5*(y[0].pageY+y[1].pageY);h.set(A,Y)}}function fe(){if(y.length===1)_.set(y[0].pageX,y[0].pageY);else{const A=.5*(y[0].pageX+y[1].pageX),Y=.5*(y[0].pageY+y[1].pageY);_.set(A,Y)}}function pe(){const A=y[0].pageX-y[1].pageX,Y=y[0].pageY-y[1].pageY,z=Math.sqrt(A*A+Y*Y);w.set(0,z)}function F(){n.enableZoom&&pe(),n.enablePan&&fe()}function Le(){n.enableZoom&&pe(),n.enableRotate&&$()}function Ce(A){if(y.length==1)p.set(A.pageX,A.pageY);else{const z=ce(A),de=.5*(A.pageX+z.x),ve=.5*(A.pageY+z.y);p.set(de,ve)}g.subVectors(p,h).multiplyScalar(n.rotateSpeed);const Y=n.domElement;M(2*Math.PI*g.x/Y.clientHeight),T(2*Math.PI*g.y/Y.clientHeight),h.copy(p)}function se(A){if(y.length===1)m.set(A.pageX,A.pageY);else{const Y=ce(A),z=.5*(A.pageX+Y.x),de=.5*(A.pageY+Y.y);m.set(z,de)}d.subVectors(m,_).multiplyScalar(n.panSpeed),I(d.x,d.y),_.copy(m)}function xe(A){const Y=ce(A),z=A.pageX-Y.x,de=A.pageY-Y.y,ve=Math.sqrt(z*z+de*de);x.set(0,ve),v.set(0,Math.pow(x.y/w.y,n.zoomSpeed)),N(v.y),w.copy(x)}function Q(A){n.enableZoom&&xe(A),n.enablePan&&se(A)}function q(A){n.enableZoom&&xe(A),n.enableRotate&&Ce(A)}function K(A){n.enabled!==!1&&(y.length===0&&(n.domElement.setPointerCapture(A.pointerId),n.domElement.addEventListener("pointermove",_e),n.domElement.addEventListener("pointerup",le)),B(A),A.pointerType==="touch"?Ve(A):Te(A))}function _e(A){n.enabled!==!1&&(A.pointerType==="touch"?E(A):Ae(A))}function le(A){ne(A),y.length===0&&(n.domElement.releasePointerCapture(A.pointerId),n.domElement.removeEventListener("pointermove",_e),n.domElement.removeEventListener("pointerup",le)),n.dispatchEvent(B4),r=i.NONE}function Te(A){let Y;switch(A.button){case 0:Y=n.mouseButtons.LEFT;break;case 1:Y=n.mouseButtons.MIDDLE;break;case 2:Y=n.mouseButtons.RIGHT;break;default:Y=-1}switch(Y){case z1.DOLLY:if(n.enableZoom===!1)return;ee(A),r=i.DOLLY;break;case z1.ROTATE:if(A.ctrlKey||A.metaKey||A.shiftKey){if(n.enablePan===!1)return;j(A),r=i.PAN}else{if(n.enableRotate===!1)return;J(A),r=i.ROTATE}break;case z1.PAN:if(A.ctrlKey||A.metaKey||A.shiftKey){if(n.enableRotate===!1)return;J(A),r=i.ROTATE}else{if(n.enablePan===!1)return;j(A),r=i.PAN}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(_2)}function Ae(A){switch(r){case i.ROTATE:if(n.enableRotate===!1)return;oe(A);break;case i.DOLLY:if(n.enableZoom===!1)return;te(A);break;case i.PAN:if(n.enablePan===!1)return;Me(A);break}}function Se(A){n.enabled===!1||n.enableZoom===!1||r!==i.NONE||(A.preventDefault(),n.dispatchEvent(_2),ae(A),n.dispatchEvent(B4))}function Ie(A){n.enabled===!1||n.enablePan===!1||V(A)}function Ve(A){switch(ie(A),y.length){case 1:switch(n.touches.ONE){case B1.ROTATE:if(n.enableRotate===!1)return;$(),r=i.TOUCH_ROTATE;break;case B1.PAN:if(n.enablePan===!1)return;fe(),r=i.TOUCH_PAN;break;default:r=i.NONE}break;case 2:switch(n.touches.TWO){case B1.DOLLY_PAN:if(n.enableZoom===!1&&n.enablePan===!1)return;F(),r=i.TOUCH_DOLLY_PAN;break;case B1.DOLLY_ROTATE:if(n.enableZoom===!1&&n.enableRotate===!1)return;Le(),r=i.TOUCH_DOLLY_ROTATE;break;default:r=i.NONE}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(_2)}function E(A){switch(ie(A),r){case i.TOUCH_ROTATE:if(n.enableRotate===!1)return;Ce(A),n.update();break;case i.TOUCH_PAN:if(n.enablePan===!1)return;se(A),n.update();break;case i.TOUCH_DOLLY_PAN:if(n.enableZoom===!1&&n.enablePan===!1)return;Q(A),n.update();break;case i.TOUCH_DOLLY_ROTATE:if(n.enableZoom===!1&&n.enableRotate===!1)return;q(A),n.update();break;default:r=i.NONE}}function b(A){n.enabled!==!1&&A.preventDefault()}function B(A){y.push(A)}function ne(A){delete C[A.pointerId];for(let Y=0;Y<y.length;Y++)if(y[Y].pointerId==A.pointerId){y.splice(Y,1);return}}function ie(A){let Y=C[A.pointerId];Y===void 0&&(Y=new he,C[A.pointerId]=Y),Y.set(A.pageX,A.pageY)}function ce(A){const Y=A.pointerId===y[0].pointerId?y[1]:y[0];return C[Y.pointerId]}n.domElement.addEventListener("contextmenu",b),n.domElement.addEventListener("pointerdown",K),n.domElement.addEventListener("pointercancel",le),n.domElement.addEventListener("wheel",Se,{passive:!1}),this.update()}}function H4(o,e,t){return Math.max(Math.min(o,t),e)}function ot(o,e,t,n,i,r){const s=(o-e)/(t-e)*(i-n)+n;return r?n<i?H4(s,n,i):H4(s,i,n):s}var Zo={grad:.9,turn:360,rad:360/(2*Math.PI)},s1=function(o){return typeof o=="string"?o.length>0:typeof o=="number"},at=function(o,e,t){return e===void 0&&(e=0),t===void 0&&(t=Math.pow(10,e)),Math.round(t*o)/t+0},It=function(o,e,t){return e===void 0&&(e=0),t===void 0&&(t=1),o>t?t:o>e?o:e},P5=function(o){return(o=isFinite(o)?o%360:0)>0?o:o+360},V4=function(o){return{r:It(o.r,0,255),g:It(o.g,0,255),b:It(o.b,0,255),a:It(o.a)}},v2=function(o){return{r:at(o.r),g:at(o.g),b:at(o.b),a:at(o.a,3)}},$o=/^#([0-9a-f]{3,8})$/i,v3=function(o){var e=o.toString(16);return e.length<2?"0"+e:e},R5=function(o){var e=o.r,t=o.g,n=o.b,i=o.a,r=Math.max(e,t,n),s=r-Math.min(e,t,n),a=s?r===e?(t-n)/s:r===t?2+(n-e)/s:4+(e-t)/s:0;return{h:60*(a<0?a+6:a),s:r?s/r*100:0,v:r/255*100,a:i}},D5=function(o){var e=o.h,t=o.s,n=o.v,i=o.a;e=e/360*6,t/=100,n/=100;var r=Math.floor(e),s=n*(1-t),a=n*(1-(e-r)*t),c=n*(1-(1-e+r)*t),l=r%6;return{r:255*[n,a,s,s,c,n][l],g:255*[c,n,n,a,s,s][l],b:255*[s,s,c,n,n,a][l],a:i}},G4=function(o){return{h:P5(o.h),s:It(o.s,0,100),l:It(o.l,0,100),a:It(o.a)}},k4=function(o){return{h:at(o.h),s:at(o.s),l:at(o.l),a:at(o.a,3)}},W4=function(o){return D5((t=(e=o).s,{h:e.h,s:(t*=((n=e.l)<50?n:100-n)/100)>0?2*t/(n+t)*100:0,v:n+t,a:e.a}));var e,t,n},C0=function(o){return{h:(e=R5(o)).h,s:(i=(200-(t=e.s))*(n=e.v)/100)>0&&i<200?t*n/100/(i<=100?i:200-i)*100:0,l:i/2,a:e.a};var e,t,n,i},Jo=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,Ko=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,Qo=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,ea=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,F2={string:[[function(o){var e=$o.exec(o);return e?(o=e[1]).length<=4?{r:parseInt(o[0]+o[0],16),g:parseInt(o[1]+o[1],16),b:parseInt(o[2]+o[2],16),a:o.length===4?at(parseInt(o[3]+o[3],16)/255,2):1}:o.length===6||o.length===8?{r:parseInt(o.substr(0,2),16),g:parseInt(o.substr(2,2),16),b:parseInt(o.substr(4,2),16),a:o.length===8?at(parseInt(o.substr(6,2),16)/255,2):1}:null:null},"hex"],[function(o){var e=Qo.exec(o)||ea.exec(o);return e?e[2]!==e[4]||e[4]!==e[6]?null:V4({r:Number(e[1])/(e[2]?100/255:1),g:Number(e[3])/(e[4]?100/255:1),b:Number(e[5])/(e[6]?100/255:1),a:e[7]===void 0?1:Number(e[7])/(e[8]?100:1)}):null},"rgb"],[function(o){var e=Jo.exec(o)||Ko.exec(o);if(!e)return null;var t,n,i=G4({h:(t=e[1],n=e[2],n===void 0&&(n="deg"),Number(t)*(Zo[n]||1)),s:Number(e[3]),l:Number(e[4]),a:e[5]===void 0?1:Number(e[5])/(e[6]?100:1)});return W4(i)},"hsl"]],object:[[function(o){var e=o.r,t=o.g,n=o.b,i=o.a,r=i===void 0?1:i;return s1(e)&&s1(t)&&s1(n)?V4({r:Number(e),g:Number(t),b:Number(n),a:Number(r)}):null},"rgb"],[function(o){var e=o.h,t=o.s,n=o.l,i=o.a,r=i===void 0?1:i;if(!s1(e)||!s1(t)||!s1(n))return null;var s=G4({h:Number(e),s:Number(t),l:Number(n),a:Number(r)});return W4(s)},"hsl"],[function(o){var e=o.h,t=o.s,n=o.v,i=o.a,r=i===void 0?1:i;if(!s1(e)||!s1(t)||!s1(n))return null;var s=function(a){return{h:P5(a.h),s:It(a.s,0,100),v:It(a.v,0,100),a:It(a.a)}}({h:Number(e),s:Number(t),v:Number(n),a:Number(r)});return D5(s)},"hsv"]]},q4=function(o,e){for(var t=0;t<e.length;t++){var n=e[t][0](o);if(n)return[n,e[t][1]]}return[null,void 0]},ta=function(o){return typeof o=="string"?q4(o.trim(),F2.string):typeof o=="object"&&o!==null?q4(o,F2.object):[null,void 0]},x2=function(o,e){var t=C0(o);return{h:t.h,s:It(t.s+100*e,0,100),l:t.l,a:t.a}},b2=function(o){return(299*o.r+587*o.g+114*o.b)/1e3/255},X4=function(o,e){var t=C0(o);return{h:t.h,s:t.s,l:It(t.l+100*e,0,100),a:t.a}},z2=function(){function o(e){this.parsed=ta(e)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return o.prototype.isValid=function(){return this.parsed!==null},o.prototype.brightness=function(){return at(b2(this.rgba),2)},o.prototype.isDark=function(){return b2(this.rgba)<.5},o.prototype.isLight=function(){return b2(this.rgba)>=.5},o.prototype.toHex=function(){return e=v2(this.rgba),t=e.r,n=e.g,i=e.b,s=(r=e.a)<1?v3(at(255*r)):"","#"+v3(t)+v3(n)+v3(i)+s;var e,t,n,i,r,s},o.prototype.toRgb=function(){return v2(this.rgba)},o.prototype.toRgbString=function(){return e=v2(this.rgba),t=e.r,n=e.g,i=e.b,(r=e.a)<1?"rgba("+t+", "+n+", "+i+", "+r+")":"rgb("+t+", "+n+", "+i+")";var e,t,n,i,r},o.prototype.toHsl=function(){return k4(C0(this.rgba))},o.prototype.toHslString=function(){return e=k4(C0(this.rgba)),t=e.h,n=e.s,i=e.l,(r=e.a)<1?"hsla("+t+", "+n+"%, "+i+"%, "+r+")":"hsl("+t+", "+n+"%, "+i+"%)";var e,t,n,i,r},o.prototype.toHsv=function(){return e=R5(this.rgba),{h:at(e.h),s:at(e.s),v:at(e.v),a:at(e.a,3)};var e},o.prototype.invert=function(){return _t({r:255-(e=this.rgba).r,g:255-e.g,b:255-e.b,a:e.a});var e},o.prototype.saturate=function(e){return e===void 0&&(e=.1),_t(x2(this.rgba,e))},o.prototype.desaturate=function(e){return e===void 0&&(e=.1),_t(x2(this.rgba,-e))},o.prototype.grayscale=function(){return _t(x2(this.rgba,-1))},o.prototype.lighten=function(e){return e===void 0&&(e=.1),_t(X4(this.rgba,e))},o.prototype.darken=function(e){return e===void 0&&(e=.1),_t(X4(this.rgba,-e))},o.prototype.rotate=function(e){return e===void 0&&(e=15),this.hue(this.hue()+e)},o.prototype.alpha=function(e){return typeof e=="number"?_t({r:(t=this.rgba).r,g:t.g,b:t.b,a:e}):at(this.rgba.a,3);var t},o.prototype.hue=function(e){var t=C0(this.rgba);return typeof e=="number"?_t({h:e,s:t.s,l:t.l,a:t.a}):at(t.h)},o.prototype.isEqual=function(e){return this.toHex()===_t(e).toHex()},o}(),_t=function(o){return o instanceof z2?o:new z2(o)},Y4=[],na=function(o){o.forEach(function(e){Y4.indexOf(e)<0&&(e(z2,F2),Y4.push(e))})},M2=function(o){return typeof o=="string"?o.length>0:typeof o=="number"},S0=function(o,e,t){return e===void 0&&(e=0),t===void 0&&(t=Math.pow(10,e)),Math.round(t*o)/t+0},Vt=function(o,e,t){return e===void 0&&(e=0),t===void 0&&(t=1),o>t?t:o>e?o:e},y2=function(o){var e=o/255;return e<.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)},S2=function(o){return 255*(o>.0031308?1.055*Math.pow(o,1/2.4)-.055:12.92*o)},$2=96.422,J2=100,K2=82.521,ia=function(o){var e,t,n={x:.9555766*(e=o).x+-.0230393*e.y+.0631636*e.z,y:-.0282895*e.x+1.0099416*e.y+.0210077*e.z,z:.0122982*e.x+-.020483*e.y+1.3299098*e.z};return t={r:S2(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:S2(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:S2(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:o.a},{r:Vt(t.r,0,255),g:Vt(t.g,0,255),b:Vt(t.b,0,255),a:Vt(t.a)}},ra=function(o){var e=y2(o.r),t=y2(o.g),n=y2(o.b);return function(i){return{x:Vt(i.x,0,$2),y:Vt(i.y,0,J2),z:Vt(i.z,0,K2),a:Vt(i.a)}}(function(i){return{x:1.0478112*i.x+.0228866*i.y+-.050127*i.z,y:.0295424*i.x+.9904844*i.y+-.0170491*i.z,z:-.0092345*i.x+.0150436*i.y+.7521316*i.z,a:i.a}}({x:100*(.4124564*e+.3575761*t+.1804375*n),y:100*(.2126729*e+.7151522*t+.072175*n),z:100*(.0193339*e+.119192*t+.9503041*n),a:o.a}))},L0=216/24389,u0=24389/27,oa=function(o){var e=o.l,t=o.a,n=o.b,i=o.alpha,r=i===void 0?1:i;if(!M2(e)||!M2(t)||!M2(n))return null;var s=function(a){return{l:Vt(a.l,0,400),a:a.a,b:a.b,alpha:Vt(a.alpha)}}({l:Number(e),a:Number(t),b:Number(n),alpha:Number(r)});return aa(s)},aa=function(o){var e=(o.l+16)/116,t=o.a/500+e,n=e-o.b/200;return ia({x:(Math.pow(t,3)>L0?Math.pow(t,3):(116*t-16)/u0)*$2,y:(o.l>8?Math.pow((o.l+16)/116,3):o.l/u0)*J2,z:(Math.pow(n,3)>L0?Math.pow(n,3):(116*n-16)/u0)*K2,a:o.alpha})};function sa(o,e){o.prototype.toLab=function(){return n=ra(this.rgba),r=n.y/J2,s=n.z/K2,i=(i=n.x/$2)>L0?Math.cbrt(i):(u0*i+16)/116,t={l:116*(r=r>L0?Math.cbrt(r):(u0*r+16)/116)-16,a:500*(i-r),b:200*(r-(s=s>L0?Math.cbrt(s):(u0*s+16)/116)),alpha:n.a},{l:S0(t.l,2),a:S0(t.a,2),b:S0(t.b,2),alpha:S0(t.alpha,3)};var t,n,i,r,s},o.prototype.delta=function(t){t===void 0&&(t="#FFF");var n=t instanceof o?t:new o(t),i=function(r,s){var a=r.l,c=r.a,l=r.b,u=s.l,f=s.a,h=s.b,p=180/Math.PI,g=Math.PI/180,_=Math.pow(Math.pow(c,2)+Math.pow(l,2),.5),m=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),d=(a+u)/2,w=Math.pow((_+m)/2,7),x=.5*(1-Math.pow(w/(w+Math.pow(25,7)),.5)),v=c*(1+x),y=f*(1+x),C=Math.pow(Math.pow(v,2)+Math.pow(l,2),.5),R=Math.pow(Math.pow(y,2)+Math.pow(h,2),.5),D=(C+R)/2,M=v===0&&l===0?0:Math.atan2(l,v)*p,T=y===0&&h===0?0:Math.atan2(h,y)*p;M<0&&(M+=360),T<0&&(T+=360);var W=T-M,Z=Math.abs(T-M);Z>180&&T<=M?W+=360:Z>180&&T>M&&(W-=360);var I=M+T;Z<=180?I/=2:I=(M+T<360?I+360:I-360)/2;var N=1-.17*Math.cos(g*(I-30))+.24*Math.cos(2*g*I)+.32*Math.cos(g*(3*I+6))-.2*Math.cos(g*(4*I-63)),H=u-a,J=R-C,ee=2*Math.sin(g*W/2)*Math.pow(C*R,.5),j=1+.015*Math.pow(d-50,2)/Math.pow(20+Math.pow(d-50,2),.5),oe=1+.045*D,te=1+.015*D*N,Me=30*Math.exp(-1*Math.pow((I-275)/25,2)),ae=-2*Math.pow(w/(w+Math.pow(25,7)),.5)*Math.sin(2*g*Me);return Math.pow(Math.pow(H/1/j,2)+Math.pow(J/1/oe,2)+Math.pow(ee/1/te,2)+ae*J*ee/(1*oe*1*te),.5)}(this.toLab(),n.toLab())/100;return Vt(S0(i,3))},e.object.push([oa,"lab"])}const z0=100,la=new Float32Array([57.75263983,-18.20221084,-19.39044518,79.22377368,-65.91287604,16.79042546,39,-26,10,39.4,-30.3,4.3,80.55469963,-18.23504372,-16.08503288,43.08153053,-5.98093072,9.976561111,72.61208962,-13.4906545,18.16299199,61,-10,22,57.08,-7.13,-20.54,50.48161552,-4.896272696,-1.648988554,72.47021952,-27.92207492,-5.337689952,69.66463761,-15.87582996,3.08454883,47.50474489,.07921435,-45.49889787,45,-16,-43,68.2901769,-7.496763627,-23.29406095,61.68122822,-29.795989,39.13823402,71.56874342,-21.15637632,4.432895772,43.15821257,-6.069993457,14.85534781,65,-13,-19,60.13523208,4.306042644,21.97144785,74.07263347,-28.84811179,24.46280942,57.32704855,10.46717709,4.655855822,61.18540603,-70.62084485,7.148444155,41,-11,5,64.7874629,-67.12906701,11.4348366,68,-30,32,51.48743954,4.992282328,21.94357217,63.13114402,-24.99887564,13.34363651,54.38094092,-11.22463922,-18.549547,65,-1,-4,42,-5,-31,43.94457369,-4.354096317,-28.53419588,44.70141103,-9.231786129,-47.54244749,36.77473165,-18.69394606,-27.74248319,55,-38,3,70.13434239,-24.68742288,20.63868904,47.33875057,-43.56478114,27.43186614,54.18474043,-7.60877817,.127819295,61.650308,-39.31565449,33.66993992,45.72879276,-1.093317151,-40.43431891,56,-37,19,43.93333846,-12.26397994,4.282805595,63.4,-13.8,18.9,56.1511058,7.68276726,-10.78905492,50.65961987,-19.05958227,-3.975800612,57,11,18,64.68307211,-23.94841046,7.839563673,65.47531393,4.101282083,-11.68598221,57.34288209,6.285416492,17.18954188,61.68114658,-28.77056628,7.116452127,63.1191151,-26.49096286,-19.87758127,42.6,-18.5,-27.3,73,-22,11,68.69355328,-5.292810574,18.23014631,65.32367155,5.77538771,-41.50964511,56.64485346,-13.69674463,34.96465732,41.21683946,-13.6798668,-12.91937135,49.7616444,6.582976544,-42.78322348,65,-21,-14,46.57536321,-17.68875564,22.51814603,41.89120688,-26.89647391,1.288594916,61.51479085,-44.92446608,5.556893733,77.49146811,-29.30565919,7.249308928,33.29949582,-23.88453299,-5.215350583,33.1,-29.4,11.3,61.35577997,10.68630691,-5.598045064,60.9,-5.9,-7.9,62.5,7,-33.2,74.56194755,-25.4997007,33.78227023,58,-38,-5,74.56285817,-20.87219718,17.16674308,61.66164778,-51.75001546,45.36551962,66.76472379,-62.08173262,12.65190563,58.96321541,6.911959911,12.11793389,58.26216054,2.378637527,9.152916216,79.72088667,-68.21814708,11.74824482,46.34858541,-9.524807724,-46.63166426,61.44,-7.07,-18.82,47.30131738,-1.72609394,-6.622881118,53.58749804,-59.28194762,3.593811961,41.93172104,-6.965339624,4.819320813,53.27228718,-7.460741729,1.942591267,62,-3,15,73.5091556,-20.56346355,1.476780486,51.52098898,-.37609669,-43.55239646,49.61233438,4.26868861,.244909038,57.15447835,-18.46453226,-36.66880997,45,-28,-32,60.4,-14.1,-12.4,71.78,-17.97,-6.41,71.55205865,-97.40312053,41.97063635,61.02163511,-35.91644834,-7.50787353,60.22027705,-6.532987417,-21.75109167,56.13529215,-77.50237791,21.27364342,62.42721825,-54.32352123,18.87072868,55,-22,-18,54.30056638,9.211380141,23.00658729,53,2,0,54.00611541,-31.56793664,28.57244584,74.32685723,-20.25569055,21.28588389,57.00957796,-69.14035728,43.45540405,41.08321722,-22.54577435,1.784907358,56.16101872,-20.96541928,16.63242723,61.68117208,-7.231519053,-3.99463923,62.34,-14.95,29.25,55.28700922,-12.57069975,4.507458308,71.58316435,-51.09692881,45.4172776,43,-34,-1,64.20381489,.434740477,-24.02216433,54.64237355,11.96723875,11.62903565,55.3001264,1.534901327,20.99626507,71.83207143,-44.5554174,39.76299935,68.04403878,-60.38322153,14.59353165,63.22646497,.587610366,-1.513490711,51.22318624,7.595082359,18.96144895,54.45442434,-10.38241944,-8.007522972,52.87247754,-14.07232657,5.192149054,67.14330499,-49.88093916,10.8875263,53.67473068,-5.216176061,-8.142076095,76.90949332,-58.79902324,35.33875631,88.30107721,-70.04478848,-10.08858361,44.2764485,-8.841550635,-40.37273232,57.67401098,-43.35092473,-25.9373714,72.4337298,-7.851907942,-5.315073587,76.52430446,-28.52068633,13.50776171,50,-6,4,56.5,-20.8,-33.4,53.58511708,-9.124894744,-13.06062081,74.17165044,-104.2041927,54.40661349,59,-12,13,66,-1,10,56,-8,-6,63.7405388,-7.100537526,-3.947525963,65.2265669,-2.155485141,-10.41538079,54.2204915,-15.18406976,1.588005036,40.68906959,-30.99433452,-23.05942291,53.51343175,-13.34652339,-48.70335894,64,-10,3,66.6,-16.8,-30.6,57,-39,11,47.47,1.16,1.24,52.99609272,-1.452005314,27.33638653,61,-10,-30,66,-41.6,5.5,63,-1,-6,53.95013308,-23.15386487,-4.293634689,56.21515635,-88.63877645,53.86942516,64.03266573,-27.14237172,-13.40081099,68,-8,-10,64,-5,-17,62.56,.88,1.31,46.98003721,-15.55197154,2.565480049,73.19570829,-24.24104105,-14.41405768,56,-32,32,52.18936068,-27.73735315,-37.72000541,67.95601159,-3.995957848,-8.290447963,42,-11,5,66,-37,29,87.72682117,-78.90710461,12.53637511,48.61206878,-.423249671,1.252331039,61.91925826,12.3758952,-13.06401579,63,-27,31,60.4,3.1,10.6,49.80209774,-1.091200381,26.64131462,53.78804819,.243046891,-.586956708,80.55745437,-29.09366961,19.65417333,55.2097273,-15.27049354,11.94725451,44.15701902,-1.175046206,-33.74056901,53.35528349,-15.89272778,-17.91546179,41.1615937,-32.14213214,.814108644,39.1450185,-11.50383388,-40.76316881,56.45713097,-21.36864948,10.02715824,68.317784,-116.9509921,76.78952577,67.48704819,-24.75474369,20.5833587,57.88306412,-.267937155,18.58660986,91.29256549,-47.70752546,-8.051848919,45.83229627,-15.84402558,-43.29540603,50.03550521,-3.699197817,3.44213416,84.86087291,-26.80516006,13.64938122,51.57718005,1.904969588,11.05943503,63.82898828,-35.31709505,-.593949674,40,-43,0,56.54859697,-14.91333233,-24.19388135,77.15701011,-68.0389185,10.7394497,89.02927844,-62.51462529,-18.43881807,54,10,23,39.215047,-51.98169743,19.82931197,63.71642998,-19.09915309,15.22797935,71.50408079,-24.12304146,21.74001512,42.19423942,-6.698248709,-48.04487796,59,-4,-1,27.41528013,-37.53899,18.11371166,68,-19,-25,88.75173558,-72.37635664,29.55764768,59.43010038,-6.68288916,26.47677438,61.47380032,-18.23627124,-28.09401248,73.80070427,-22.22261398,32.19613973,71.53859727,-15.05622262,-17.66680114,70,-27,-18,61.6597596,-9.463301494,.53181972,55.08086766,-32.31107435,-35.39312103,51,-5,-29,50.67255726,-8.967277092,-10.23333388,51,5,3,45.02369041,-10.3978919,3.327610473,56,-8,2,64.38554823,-45.24500037,19.88354646,52.57767645,-3.754787615,-7.205543801,42.02309209,-62.63855662,18.77676132,43,-31,3,62.26552521,1.916945816,-11.9649457,47,-2,-29,66,-18.5,-21.5,61.68116073,-3.896445188,-9.338153774,61.92259358,-17.55822076,3.012139583,65.28036851,16.38276242,-56.50848416,61,13.5,-30.5,66,-30,13,71.1,-14.9,-23,70.9,-21.9,29.9,49,-1,0,61,-30,-13,61.84378814,-19.00410344,-5.55761807,32.5036352,-44.85094669,24.61713058,68.33951274,-8.393942977,-3.041376005,56,-23,-9,71.64618896,-9.785961063,-19.64370719,65,-26,-14,56,0,-26,70.56191443,-8.963975149,18.64017249,54.15998883,-2.896944515,18.55287266,82.20915263,-19.72892927,1.468673154,53.89138592,-35.2512587,14.51002246,49.14074775,-21.03522485,-40.89104385,59,6,6,53.5530178,6.104809883,-42.5551007,67.43151304,-38.88645408,-4.325110241,62.30515944,-82.5246725,45.21587565,55.23358262,1.167401315,-6.115401756,50,-41,-6,46.05073493,-8.414399651,-4.080426835,70.88816715,-7.568900985,3.847009888,62.36836729,-5.913590532,10.45028081,51.29605929,-4.870723318,-1.651916893,46.08293151,-13.95688956,-44.68359116,45.99088038,-7.479249502,3.045779025,54.69296949,-39.60609392,-28.94628442,56.05,-.85,24.24,27,-111,-7,71.22834525,-45.25004222,-22.66992455,72.65499922,-8.335626504,-26.342745,54.23,-5.94,5.5,56.67036058,10.23556351,16.20440434,56,-43,8,74,-25,-7,71.55488377,-12.28512297,-4.062826515,63.26750284,-11.74953708,-14.56042207,63,-11,6,83.02269344,-45.05979533,-14.18483051,82.84722749,-26.72982945,5.26375875,75.54970342,-29.24331756,7.224022908,69,-29,-13,52.32688666,-6.619088899,-2.898908997,64.59234177,-4.749987952,14.44863916,75.78838053,-19.2794462,-2.398271838,54.58372582,5.99229521,-41.48440569,70.35057986,-11.04939442,-18.31621159,50.69323898,.232268774,-.560927623,66.24395762,-2.690419988,-23.70135405,54.01472317,1.968568745,11.33125578,62.82000133,11.08032214,-60.56293499,52,-2,-4,75.52125052,-14.74935255,-.056009204,65.55063992,-78.24966437,36.65878953,64.20562658,4.886783709,-32.92346448,70,-20,-20,71.57626389,.563422787,-23.94214621,70.66,-6.76,-13.43,55.8,7.7,-10.1,60.21282458,-63.20792683,-8.260467749,59.33858134,-7.375173359,29.4624274,78,-24,28,55.32238125,10.87551923,2.773951963,49.23438611,-11.31716795,-28.64904162,47,-42,9,41,-17,-25,60.65096075,-81.88302954,50.52340007,62.72758054,-49.58978743,-26.59701391,41,-9,-3,60.5,-19.8,4.1,70,-24,-22,38,-41,-7,51.57705746,-28.31319209,3.177094252,46,-35,-21,46,.2,-22.4,45.48871458,-25.28456699,19.82933216,58.11,-9.79,-12.57,63,-35,3,71.59688002,-4.744771513,-8.677246875,60,7,-18,70.25735297,-24.1285854,-3.600872799,73.99383257,-13.3189403,-30.88472438,54.04337196,13.09810222,-36.37036356,54.6,-54.8,25.2,47,-12,18,61.68121736,-5.832155352,6.814358314,63.06397041,-15.23100803,18.27491236,51.57711027,-7.370921902,.104968463,51.57709638,-7.070824121,-3.659039474,64.79,-12.25,-2.04,70.49469429,-18.36352526,11.39800072,45.31681632,-9.185912584,-43.52324253,46,-5,-30,66.00908784,-49.16401945,-26.49672488,51,-7,-37,50.49793081,-17.17908593,-42.22832954,45.02607288,-10.04262484,3.156933198,68.64073408,-4.421381617,-30.62534165,50.577811,-7.171917962,1.832378167,46.33678783,-1.262864901,-25.90369433,46.46694791,.045435184,-28.98161241,71,-7,-6,76.10496083,-5.091590171,-25.04303247,53.21495669,-39.90646501,-26.54291072,44,-8,0,68.68160534,-15.27630647,21.7400025,49.11870458,-11.29773778,-12.79918987,69.22,-14.49,7.85,50,-5,-4,55.11479314,-7.373097845,1.89656192,74.00805438,-20.33928369,-11.54556974,53.39391177,-10.02056063,11.12879446,52,-12,30,80.7,-18.1,-4.2,61.6006017,-9.836816059,-30.03424236,53.9380289,2.979859794,5.65919721,51.57715134,-3.897005469,8.37180074,70.76269623,-9.371485814,14.21061905,86.88823754,-89.33688933,30.97020185,51.34371223,3.944409038,6.787322099,42.45688528,-11.93573066,13.77177667,57.62560917,-79.06641064,16.31733969,51.3,-46.8,12.1,71.59684031,-2.37278145,-19.12985762,63.25197335,-4.442330978,2.711943771,54.15452202,-12.7066512,9.371809996,72,-7,2,77.67149648,-24.1357791,8.458185052,47,-8,-8,51.57712805,-6.447421304,4.085913574,57.77128982,-34.4398303,-31.45616027,49.9046782,-32.52044139,23.30033918,77.9023207,-16.58867497,-8.088238869,55,-1,-4,66.14816004,-21.32454815,-11.20656774,65.63083952,-20.26794486,-56.02076581,55.98624946,-36.12427478,25.04437937,56.70015564,-68.0639744,2.111093724,48.76886432,-10.63418788,-9.459653843,61.67356084,-32.34484326,-16.57043898,45.0219634,-13.91343528,5.064869324,55.44261705,9.340038999,6.453886023,52,-10,-23,70,-6,-6,56.6824952,10.34026694,-.707003502,63.90307229,.612714382,18.92441008,33.63326125,-35.16620242,23.97951272,54.08218036,-7.174044427,-3.791219994,79.91182917,-28.47385857,-13.84207708,67.09686849,-3.158570392,-4.963962753,55.07931332,8.35934627,19.53607237,66.86476938,-3.522442063,3.525614125,51.76309165,-.948246525,1.002805093,65.32279815,-.260708768,-30.34705668,76.34655255,-69.63122535,25.26727617,55.14386126,-31.46457443,-12.5256816,45.53995828,-35.31006365,21.57615118,42.66996616,-9.482423525,-36.23333616,50,-12,6,68.07640351,-10.57692869,-8.998925526,36.52516959,-54.36714989,15.19645466,64.23591606,-3.723594151,-9.506771485,77.42391328,-101.8085499,27.08947656,61.67588909,-45.49256094,-4.633001871,38.40190564,-30.74376509,-5.882101364,60.2429581,-1.67233653,-36.80990844,85.59443573,-105.3246662,52.96787472,78.51499603,-124.1289327,67.65610822,51.57708362,-5.14628609,-8.190715296,66.49326738,-36.75509037,-10.3319483,45.68157013,-4.33779261,-26.97186956,70.8,-29.2,8,54.68851836,-28.13405517,14.26953297,62.69630744,-73.72177168,21.96877906,50.96462056,4.137325036,6.205642819,42,-21,-18,50.23561764,-84.21337048,54.4825218,41,-23,6,46,-11,24,57,-21,-34,46,-13,-40,49.63907788,-40.1710677,-.53880983,56.69777228,1.426169078,25.76731853,51.78452915,-73.89101811,24.5176104,66.95736108,-32.03417012,-25.50213592,64.23665987,2.484280428,-11.54857678,39,-15,-1,85.79243519,-102.7397481,49.08273315,41.17305166,-21.56004289,16.68474086,71.57210026,-39.1499902,34.0917714,46,-22,14,58.34191823,-11.02233759,-9.226703259,56,5,12.7,61.62264019,-12.85172553,-3.973384802,31.90260945,-25.38891807,-12.48447736,59.21989426,-7.385450102,-11.44759005,74.03006303,-20.62329357,-7.565615991,84.08175299,-123.3483812,50.80868025,45.68893548,-8.629483721,-46.51757056,47.01130229,-12.3051649,-17.32744435,50.43962269,-11.9573378,2.097317224,72.84322572,-20.35061741,2.173703399,69.04859535,-35.24403982,11.86002346,44.59639125,-27.77156623,.13930555,51.56008662,1.007772938,-17.86137299,60.71326443,-60.99815891,13.74083891,56,-9,-24,46.63343833,-10.20153344,-46.76175609,45.45359856,-68.79985536,16.85937371,65.51895476,-1.371374472,7.429832738,61.68101328,-7.35947102,-35.30271526,58.99987574,-6.257522633,.971691765,51.05658522,-18.38605832,-39.30612415,48.59313081,-24.99259673,20.11350669,61.39731327,-5.39116023,-2.591847461,61.68119041,7.03170416,-11.29593615,74.04457368,-23.89130436,2.086162151,53,-5,9,51,-12,-32,76.3,-9.5,-26.5,74,-30,-13,81.34787029,-18.25515106,.833228603,73,-21,-13,62.84804382,-11.43112981,-4.552237656,46.13939833,-8.461926784,-46.37561925,52.4568526,-7.163314765,-3.7478828,53,-8,-24,56.09157079,6.024043661,-42.43121391,72,-16,-5,55.1,-4.6,28.1,48,-2,-7,53.47332746,-58.62965874,14.86008176,48.07082685,-69.6093991,23.08298299,88.09348461,-71.46556586,-11.78583248,52,-13,14,48.69422332,-10.41826268,-13.37602537,53.17048687,-38.74628317,13.85027388,54.07795847,9.337793109,6.552525968,45.01088192,-6.339896308,-43.41472596,58,-31,-22,78,-17,-12,59.70100475,-52.56531317,39.82016883,75.18304156,-20.59042309,16.96255447,55.5,-23.7,26,46.54071269,-6.98929493,-3.521909172,74.84445289,-41.71280422,5.177712606,67.17715107,-10.24424624,-5.453991854,81.91978656,-29.62231773,5.381601779,49.42512222,-33.09846608,.438840537,51,-1,-6,57.81194447,-8.201786459,-.269609167,66,-9,18,41.1205401,-12.83755371,-3.846532813,83.39698221,-135.8451286,82.70268266,49,-31,-14,46.46671131,-13.51367497,-12.91374426,36.17158729,-41.56285348,16.15097252,52.30935852,-42.19134787,-7.138435176,54.33413896,-27.02669395,-34.82659679,71,-23,2,64.81253511,-22.04683254,-27.20144843,64,1,2,50.78863482,8.971496756,-22.40601537,55.30861751,-14.15879654,7.047846616,40.46855451,-28.67593689,-26.62332832,59.17672506,-22.64587706,24.12612922,61.65861751,-11.5950034,8.45739783,40,-13,17,61.59460516,-13.14076463,3.739270028,76.52822625,-17.83377247,7.52702388,67,-9,-18,50.60375757,-44.14946092,-19.78341615,44,-30,27,62.42521463,7.379815206,-20.52160216,61,-15.3,-10.3,52.65505389,10.4950927,4.975090268,43,-7,-14,76.51098723,-62.24937895,-11.85536165,46.31839534,-38.96833382,-15.34246554,55.4299554,-20.07154394,-10.19919282,62.7023093,-35.77388394,.521889871,47,-21,-17,56.3,-13.3,-37.7,69.59719755,-2.960382187,3.626616039,51.88611981,-43.63037339,20.9319234,48.82588652,-1.186820071,-14.3941092,69.7686633,-19.18602494,1.476112866,74.0443386,-8.286051853,-22.47964019,74.10889403,-61.55292307,-13.06567568,56,12,11,55.40071041,-41.52364194,10.21783016,65.5,-24.4,36.3,37.8388719,-37.53217049,-7.785228849,66.52191114,-14.729075,-33.7982694,73,-8,-18,57.39992376,-4.806351299,3.435586078,58.24504576,-13.94750698,-2.077119964,55.32269376,3.844340383,-11.7512662,82.38427634,-96.04427151,55.59932314,53.84780825,-36.12602594,3.499540084,56,-13,30,50.64679831,-3.966524486,-37.79824068,65.6,-39.1,-2,51.57716873,-1.035635268,10.72470204,60.91928316,-7.569574896,-17.68994922,64.19335481,-.379229789,-31.0086512,63.12459226,-47.51425623,10.19149673,75.9,-25.2,-12.5,58.70782199,-69.92900535,3.963846405,61.68118597,-7.786445519,-.011086859,92.3313486,-46.22876398,34.96007835,45.91426438,-53.03363185,2.749701396,74.99878683,-66.99592395,22.63615156,71.91850206,-11.49343543,-11.85318912,48.53541667,-30.76756572,-16.83615494,50.19194015,-19.78513237,-28.95053792,63.69174035,-29.63199359,24.7840439,58,-32,-11,56.0930543,-11.32888079,-25.42733671,62.03199755,-81.89812226,47.75815747,58.97774141,-17.51504057,-33.13277654,77.53816965,-22.25931976,3.712030171,56.70374958,-7.192546407,-3.861241748,54.18353117,1.970160255,11.32585995,85.64926858,-102.198829,31.9356976,47.73637944,-13.53582486,2.436520966,56.33168032,-22.60425416,-9.335897508,34,-22,-29,53.32551553,4.069284428,-22.61680615,71.1,-22.6,-15.4,63.56340485,-48.01563828,-29.27561671,57.03541158,10.67331497,-5.090657604,55.5,-6.4,-6.2,72.31831489,-15.25677766,20.06185161,58.03,-.84,16.2,69.45147623,-57.5036912,15.54166078,39.65,-27.62,10.5,65.8293773,-80.20738638,38.92177015,52.29558913,-75.90869194,22.37594701,55.73870578,6.816742055,10.97409083,45.26603087,-27.71581062,-20.79911344,62,-7,-27,73.73045127,-11.33869141,.711053216,54.15573121,1.587578255,18.27771209,65.33049361,-18.83607383,15.03646351,72.66525736,-18.15938005,-19.17588994,56.24680408,-23.36293117,-7.911429378,53,8,12,56.75101523,-21.48738297,-49.26384335,45,-20,-2,84.20910496,-101.1930289,39.81045351,44.77078056,-63.58465303,18.97931991,51,-1,-35,58,2,9,30.98246263,-31.84451587,-4.615803633,76.4,-36.8,5.5,71.5969489,-21.20454417,27.37835093,58.07440632,-18.83611333,-5.421130805,64.13698797,-11.77399956,-20.48855476,63.75729991,-22.23990789,3.413410857,38.76757674,-69.59600389,40.61555161,76.52677155,-25.53126959,21.56127115,69.90948481,-4.689626112,.591306546,60,0,-4,73.31997274,-28.42505705,22.65989401,51.5771861,4.217998634,10.37360986,85.07238163,-106.5273138,18.28376078,57.63121686,-31.24631745,39.28323283,55.66044196,10.88703177,2.758325617,81.34788326,-28.70298556,13.76075547,71.46898764,-22.53189156,-23.02551708,82.71103977,-45.87698667,-21.5895525,55.27389833,-17.57465548,-2.409372747,50.2837447,-1.919760129,-15.20723228,71.53955565,-33.2154138,4.043301197,60.00398821,-4.665989236,14.25125751,59.40427579,-95.95528783,68.75887719,63.78699223,-14.98807807,16.21588499,86.75589647,-89.01192473,19.46418864,49,-6,0,54.10901605,-29.96286161,24.46710918,63.26744849,-34.93072834,-4.706294648,53.18317615,-7.653920297,-.620788039,45.5,-28.3,23.9,81.81845962,-19.4154598,.251355618,53.13508607,2.990958023,5.693745072,68.89364762,-54.60993274,-.455460778,55,-35,-20,63.29,-1.57,-10.93,44.7,-34.8,-3.7,41.97812003,-6.694868703,-24.1267113,61.6812588,2.049388343,11.10549153,64.64196654,-32.96699066,15.06376178,69.42996013,-63.34141873,45.47037759,65.16233986,-38.10625837,17.80580312,54.68742362,-5.195758879,-8.170102591,74.34373812,-37.69411721,24.30746507,65.94500643,-16.01617001,27.74415673,57.5597427,-39.9052715,4.719720358,65,-31,-1,74.96120648,-3.796421385,-21.05748722,60.26236135,-14.92504294,-31.05076363,45.11461029,-7.023603459,1.833969286,56.5,-6.4,-8.4,55.8,-33.7,28.2,60,-13,20,61,-31,-4,39.92797031,-15.16793785,-38.23674743,56.78828766,-68.54655664,18.22735081,46,-17,-15,61.66964242,3.959871231,-15.20304672,46.1147922,-.502038647,21.96698522,54.40482992,-8.067382268,-59.01715757,75.9,-27.8,13.5,54.05324745,-.538176052,8.994243705,72.26108956,-43.64766801,6.272875551,51.10246728,-21.37437928,-40.06769454,61.65130356,-.30660378,-32.34170401,54.58465807,-20.70266458,7.801785661,79.04410166,-26.91315859,32.84948387,63.44641966,-62.05619295,-4.449844017,57.23404287,-61.20534396,14.16646063,67.14654626,-18.49451907,-20.34179977,67,-8,-13,43.93,-7.87,-11.44,71.59689088,-7.13465584,-4.135963907,54.58333883,-88.12834271,64.38069893,59.57865474,-38.61290351,-32.2147712,42.19248389,-62.82609947,28.54338878,43.98652244,-7.196851502,.230193766,75,-28,4,48,-24,14,62.0349175,-11.08159572,6.253376734,51.55758239,4.61436633,-24.53258619,56.5,-28.8,14.8,56.41021081,-8.257450556,-8.60862777,39.0567951,-37.48530438,-8.56524363,53.37654843,-21.06957766,16.6207703,54.18345023,3.778207436,-11.82775868,51.89390824,-11.17436303,6.910817954,69.63809841,-33.79020823,-23.486416,45.16382874,-17.63654426,11.04588131,53.42052479,-4.12681934,-9.184786902,60.73527467,9.298075517,-35.40518832,76.4,-108.9,-25.2,43.87367836,-23.43493925,13.78955968,39.32247642,-20.55255955,13.87406123,42.41515123,-28.38160988,19.77313088,70.66108135,-48.61675675,-13.9646508,77.22630109,-29.03452966,9.46447219,52.20015406,-25.3889951,27.30845665,44.44041996,-20.67551353,15.68618164,71.16174428,-41.52189468,30.08878039,50.10717599,-8.884252709,-16.13647205,53.2,5.3,-11.5,55.13513644,11.66220385,-1.10105595,56.80160307,-32.07060543,15.52798454,66.70879326,-7.582542169,-.199070603,40.94811591,-40.92702087,-14.21047913,55,-2,-29,61.56010914,-9.113797198,2.488943689,45.0424092,-7.021705104,1.834020785,66.48124507,-9.68929647,-4.046322183,39.55379209,-34.94121559,25.93900447,57,-2,-9,53.9496578,-9.156498881,-39.92660181,35,-29,-20,59,-11,21,64.06300228,-34.25392902,8.085363332,66.07702304,-85.63709707,27.02845384,44.00867469,-16.86996926,8.625377483,57,-17,-34,89.52258614,-65.73197247,26.51566183,71.59692279,-16.03820631,12.70526172]).map(o=>o/z0),ca=new Float32Array([57.75263983,-18.20221084,-19.39044518,37.97861598,59.93148631,12.45645225,45.38321611,51.45230415,35.57393367,79.22377368,-65.91287604,16.79042546,39.4,-30.3,4.3,43.08153053,-5.98093072,9.976561111,72.47021952,-27.92207492,-5.337689952,55.23182828,77.03949343,64.38815773,47.50474489,.07921435,-45.49889787,41.13223606,51.89483999,-3.151831381,41.21730023,62.97303858,27.92101579,61.68122822,-29.795989,39.13823402,71.56874342,-21.15637632,4.432895772,60.13523208,4.306042644,21.97144785,71.59710241,45.30970566,-1.670896871,57.32704855,10.46717709,4.655855822,62.05,58.84,71.32,60.74468108,78.28893511,66.29602891,44.70141103,-9.231786129,-47.54244749,52.57985055,54.46419384,23.48126666,70.13434239,-24.68742288,20.63868904,61.32284497,80.25869701,69.37108791,54.18474043,-7.60877817,.127819295,61.650308,-39.31565449,33.66993992,56,-37,19,52.72787663,42.51468342,3.595144259,49.43652814,63.56954699,36.70071608,63.4,-13.8,18.9,51.71137212,44.24322662,-13.35699939,51.52431464,60.21591087,-2.215602302,59.304645,83.18410569,25.86088525,57.34288209,6.285416492,17.18954188,63.1191151,-26.49096286,-19.87758127,73,-22,11,62.0554551,69.83951524,65.74262088,68.69355328,-5.292810574,18.23014631,62.68196898,86.59665012,61.74354895,65.32367155,5.77538771,-41.50964511,56.64485346,-13.69674463,34.96465732,41.21683946,-13.6798668,-12.91937135,49.7616444,6.582976544,-42.78322348,49.15862247,66.5511829,2.510655593,65,-21,-14,61.51479085,-44.92446608,5.556893733,44.08681422,65.12163445,52.18336978,33.1,-29.4,11.3,56,40,-13,60.9,-5.9,-7.9,61.06783573,76.89006239,36.09409415,20.93873702,39.78843555,25.25687815,27.83995574,34.9366402,15.53083658,76.1141537,35.16608261,26.08064378,66.63218445,26.60791408,20.15469084,61.66164778,-51.75001546,45.36551962,59.39664298,90.08512626,.792986298,60,39,-8,40.8774422,30.05557359,8.901344547,47.30131738,-1.72609394,-6.622881118,41.93172104,-6.965339624,4.819320813,73.5091556,-20.56346355,1.476780486,39.14648212,19.71000112,24.41922428,46.69281263,65.55949863,45.13072628,71.78,-17.97,-6.41,61.02163511,-35.91644834,-7.50787353,60.22027705,-6.532987417,-21.75109167,62.36006415,26.21621201,25.429546,53,2,0,53.41988942,49.65939237,11.76742514,68.85943983,49.07526828,-.763207629,54.64237355,11.96723875,11.62903565,52.87247754,-14.07232657,5.192149054,67.14330499,-49.88093916,10.8875263,44.2,48.9,21.5,64.13489939,40.13634907,22.87672004,44.2764485,-8.841550635,-40.37273232,52.60233277,16.91543201,13.58207283,65.29922417,58.35439821,25.1765886,59,-12,13,39.45337517,55.63631097,37.06051487,65.2265669,-2.155485141,-10.41538079,62.58902273,86.32660838,68.89966129,40.68906959,-30.99433452,-23.05942291,39.9440343,36.6715205,-2.797909069,62.14339313,44.65473495,20.92063272,61.6440738,24.29943558,3.354453714,61,-10,-30,61.64000334,57.82772868,15.67103369,68.94391194,65.42966056,67.39191476,38.65495377,39.0562135,-9.038222409,55.11721913,37.38846656,5.780839112,62.54006922,36.88014802,7.91132262,87.72682117,-78.90710461,12.53637511,66.79195261,51.70239608,37.63516669,63,-27,31,55.2097273,-15.27049354,11.94725451,53.35528349,-15.89272778,-17.91546179,41.1615937,-32.14213214,.814108644,39.1450185,-11.50383388,-40.76316881,68.317784,-116.9509921,76.78952577,91.29256549,-47.70752546,-8.051848919,58.97375821,83.32384325,44.36248332,51.57718005,1.904969588,11.05943503,53.00511295,80.54934522,46.16104423,55,58,40,39.215047,-51.98169743,19.82931197,63.71642998,-19.09915309,15.22797935,42.19423942,-6.698248709,-48.04487796,27.41528013,-37.53899,18.11371166,40,56,24,51,-5,-29,53.67347217,60.13470877,4.430366169,52.57767645,-3.754787615,-7.205543801,62.1330558,75.32665416,71.39873799,74.50893868,45.82739661,14.39532632,66,-18.5,-21.5,34.50533394,42.47447857,26.67427471,61,-30,-13,65,-26,-14,71.64618896,-9.785961063,-19.64370719,46.4931821,23.89096041,23.46447012,50,-41,-6,43,51,31,45.99088038,-7.479249502,3.045779025,54.69296949,-39.60609392,-28.94628442,56.05,-.85,24.24,56.58033679,83.7555399,34.48708338,48,57,20,48.52807114,60.57033362,49.80041515,56,-43,8,46.35174934,35.14424494,15.86991916,63,-11,6,61,38,-9,54.01472317,1.968568745,11.33125578,62.82000133,11.08032214,-60.56293499,52,-2,-4,62.25805185,87.01624485,75.5217884,70,-20,-20,62.03634099,74.0003098,55.40554475,46,41,-3,59.33858134,-7.375173359,29.4624274,78,-24,28,68.29262523,67.87614155,64.08694116,37.8,42.8,26.5,41,-17,-25,60.65096075,-81.88302954,50.52340007,43.11003902,63.08926019,22.9116134,62,47,21,46,-35,-21,45.48871458,-25.28456699,19.82933216,33.29655508,49.52854799,29.44782566,45.2,52,19.2,62.79927731,73.85253907,14.7316058,50,38,-10,43.80946586,34.7125489,-7.901135266,35.88757029,55.73140947,36.46720727,54.04337196,13.09810222,-36.37036356,54.6,-54.8,25.2,46.22627078,48.05764245,-3.095273096,65.10524893,77.23752207,77.79244599,50.49793081,-17.17908593,-42.22832954,46.33678783,-1.262864901,-25.90369433,79.79287446,31.26748462,29.77407354,55,58,-3,55.41472775,54.47100284,34.45810111,53.39391177,-10.02056063,11.12879446,44.9,41.5,8.7,43.70954295,38.57919642,31.1200458,80.7,-18.1,-4.2,51.91766595,43.00488908,35.94478398,51.57715134,-3.897005469,8.37180074,45.89916462,72.16870819,35.38147262,70.76269623,-9.371485814,14.21061905,51.3,-46.8,12.1,71.59684031,-2.37278145,-19.12985762,51.57712805,-6.447421304,4.085913574,77.9023207,-16.58867497,-8.088238869,59.4,30.4,32.3,30.42729464,29.281377,16.98968278,61.67356084,-32.34484326,-16.57043898,48.38608123,71.56023421,43.82336086,70,-6,-6,56.6824952,10.34026694,-.707003502,70.36293082,35.86731365,-12.39723507,51.76309165,-.948246525,1.002805093,38.22629947,53.79264423,-4.031235544,75.1734187,40.69452225,23.30154605,45.53995828,-35.31006365,21.57615118,55.80911205,83.40891639,67.1050664,42.66996616,-9.482423525,-36.23333616,72.58295014,37.19060119,-7.036610535,42,54,26,43.63310409,42.17184942,15.62573906,85.59443573,-105.3246662,52.96787472,78.51499603,-124.1289327,67.65610822,66.49326738,-36.75509037,-10.3319483,52.34534936,28.84954974,9.118570669,62.69630744,-73.72177168,21.96877906,51.57731607,38.11517543,8.556448472,45.11138708,71.27429254,-82.76144291,64.23665987,2.484280428,-11.54857678,85.79243519,-102.7397481,49.08273315,71.57210026,-39.1499902,34.0917714,46,-22,14,57.18102476,51.64330861,62.54124129,56,5,12.7,75.03989368,41.55624333,4.129166541,45.68893548,-8.629483721,-46.51757056,56,-9,-24,65.51895476,-1.371374472,7.429832738,33.05273947,50.77417918,26.22370602,74.04457368,-23.89130436,2.086162151,53,-5,9,76.3,-9.5,-26.5,45.9763444,29.32717788,38.01951431,32.47628505,44.27084628,46.01219601,53,-8,-24,47,52,5,44.9930705,54.55644999,20.0036175,48.07082685,-69.6093991,23.08298299,61.33220699,74.11447094,48.00652705,88.09348461,-71.46556586,-11.78583248,52,-13,14,65.29499944,53.5450444,34.52226211,74.84445289,-41.71280422,5.177712606,67.17715107,-10.24424624,-5.453991854,71.82,33,6.09,66.819042,71.53804748,77.48236411,62.3,40.5,34.9,46.46671131,-13.51367497,-12.91374426,52.30935852,-42.19134787,-7.138435176,53.84120277,54.7025446,34.38015452,33.41918815,33.41768887,14.95512569,55.30861751,-14.15879654,7.047846616,30.95968689,37.64212152,39.96995849,40.46855451,-28.67593689,-26.62332832,52.12431723,51.56613153,38.27648653,67,-9,-18,51.19369252,48.98245252,57.23090534,62.42521463,7.379815206,-20.52160216,61,-15.3,-10.3,55.4299554,-20.07154394,-10.19919282,56.3,-13.3,-37.7,69.59719755,-2.960382187,3.626616039,51.88611981,-43.63037339,20.9319234,48.82588652,-1.186820071,-14.3941092,74.0443386,-8.286051853,-22.47964019,73.63082872,45.88667297,22.45062922,37,53,6,56,-13,30,43.89341394,23.01220898,9.85288378,50.64679831,-3.966524486,-37.79824068,41.10844118,56.88875107,30.43562641,58,35,43,45.91426438,-53.03363185,2.749701396,26.77402548,39.22870266,10.89252778,63.69174035,-29.63199359,24.7840439,58,-32,-11,56.0930543,-11.32888079,-25.42733671,58.14524061,63.76236594,-6.736690246,58.97774141,-17.51504057,-33.13277654,51.54529911,18.38340971,24.62332224,56.70374958,-7.192546407,-3.861241748,85.64926858,-102.198829,31.9356976,65.28550869,60.097181,3.832129139,47.73637944,-13.53582486,2.436520966,69.45147623,-57.5036912,15.54166078,32.86746787,56.46975575,46.79679426,39.65,-27.62,10.5,65.8293773,-80.20738638,38.92177015,55.73870578,6.816742055,10.97409083,45.26603087,-27.71581062,-20.79911344,63.87515706,68.69353068,31.78193999,73.73045127,-11.33869141,.711053216,26.94474801,48.49130061,-12.14357657,45.93860178,21.28882506,19.7839773,56.24680408,-23.36293117,-7.911429378,23.49454433,44.56617653,9.933239781,78.12727413,34.64752268,24.43560943,54.99242874,48.4010215,19.5981041,58.59327568,46.93871879,54.51435373,30.98246263,-31.84451587,-4.615803633,64.01083165,68.15579511,50.8793593,63.75729991,-22.23990789,3.413410857,38.76757674,-69.59600389,40.61555161,51.4,29,13.5,59.46907982,58.89160108,2.068469489,69.90948481,-4.689626112,.591306546,73.31997274,-28.42505705,22.65989401,59.03775301,18.34836543,30.49111954,49.22096529,35.10372864,17.33493735,47,23,20,53.86266573,46.76906336,34.84737305,57.63121686,-31.24631745,39.28323283,61.86487516,66.88279088,71.99858599,31.95666805,37.02689013,38.27879703,46.7879551,29.6174944,29.24041944,60.50212672,79.62432206,20.02618955,41.16846475,30.79501468,23.14849493,35,47,22,45.5,-28.3,23.9,59.12467159,64.34774981,.334647113,64.53646046,59.57112419,15.81005405,62.67976179,46.85344393,44.1430547,69,42,4,63.29,-1.57,-10.93,50.02693364,15.27916396,28.41625616,64.64196654,-32.96699066,15.06376178,69.42996013,-63.34141873,45.47037759,65.16233986,-38.10625837,17.80580312,65.99477328,57.84676953,58.41607278,45.46458652,59.4001396,3.295763722,45.11461029,-7.023603459,1.833969286,56.5,-6.4,-8.4,50,56,27,54.40482992,-8.067382268,-59.01715757,58.85750993,58.33890982,68.17950925,50.53407525,16.5462936,15.37848204,72.26108956,-43.64766801,6.272875551,51.72342761,56.77063947,3.198664524,57.23404287,-61.20534396,14.16646063,43.93,-7.87,-11.44,59.57865474,-38.61290351,-32.2147712,43.98652244,-7.196851502,.230193766,64.97974973,75.26002017,-4.444870178,62.0349175,-11.08159572,6.253376734,53.37654843,-21.06957766,16.6207703,69.63809841,-33.79020823,-23.486416,53.42052479,-4.12681934,-9.184786902,62.52633001,86.14416416,74.80408729,67,44,20,49.64147861,36.97098643,-6.594034486,51.4,48.3,43.2,55.13513644,11.66220385,-1.10105595,56.80160307,-32.07060543,15.52798454,45.0424092,-7.021705104,1.834020785,66.07702304,-85.63709707,27.02845384,44.00867469,-16.86996926,8.625377483,71.59692279,-16.03820631,12.70526172,71.59710172,36.82409743,8.01808902,21.74053962,37.50918165,22.60955923,39,-26,10,68.36622479,53.37618158,45.28388159,80.55469963,-18.23504372,-16.08503288,55.24363345,45.2944907,4.764521553,20.23930236,42.07545226,30.87295993,66.64418217,44.91379932,17.71310948,45,-16,-43,43.81843435,33.2025163,40.1313272,68,-30,32,47.12036621,58.82663075,30.73585853,51.48743954,4.992282328,21.94357217,63.13114402,-24.99887564,13.34363651,46,57,31,56.48499616,53.93452241,55.53413355,36.77473165,-18.69394606,-27.74248319,47.33875057,-43.56478114,27.43186614,67.52110472,62.35802858,74.92689306,68.91401959,60.1268179,62.10925319,43.93333846,-12.26397994,4.282805595,53.63315267,77.58943837,32.6618631,78.22003044,36.65026836,4.501891995,71.59713991,33.02909294,25.8432358,64.68307211,-23.94841046,7.839563673,58.56418961,25.26233537,27.97959956,46.57536321,-17.68875564,22.51814603,77.49146811,-29.30565919,7.249308928,41.00305643,37.07417753,28.63431602,58,-38,-5,48.01,57.5,46.43,73.09484564,73.6391129,-16.71321155,58.96321541,6.911959911,12.11793389,58.26216054,2.378637527,9.152916216,49.22561355,20.02207033,26.65039502,61.44,-7.07,-18.82,62,-3,15,49.61233438,4.26868861,.244909038,64.75422374,50.60979346,-4.83188294,50.34,30.15,9.64,57.15447835,-18.46453226,-36.66880997,68.599177,56.9718273,37.85881273,56.05672379,51.42729502,25.19102192,62.42721825,-54.32352123,18.87072868,44.94026835,36.90638895,38.04699533,62.34,-14.95,29.25,55.28700922,-12.57069975,4.507458308,71.83207143,-44.5554174,39.76299935,43,-34,-1,57.70805093,59.51609456,17.51537913,46.16536978,39.36346885,27.78929859,34.3,28.2,29.4,37,46,-21,50,-6,4,56.5,-20.8,-33.4,44.2,54.8,35.8,53.51343175,-13.34652339,-48.70335894,75.6244341,41.06356036,6.225973355,52.99609272,-1.452005314,27.33638653,63.66935805,70.01851516,52.81176392,47.49366707,29.80127343,5.391854218,63,-1,-6,53.95013308,-23.15386487,-4.293634689,35.77730667,24.96676311,18.88848296,62.56,.88,1.31,64.40972844,68.90575656,50.83091161,29.54387514,28.95339094,26.21601158,56.32930003,52.52722045,17.28203992,42,-11,5,39.67646664,51.10452868,52.65212812,61.91925826,12.3758952,-13.06401579,57.43039893,85.20961792,70.64865444,67.48704819,-24.75474369,20.5833587,50.03550521,-3.699197817,3.44213416,58.44719814,81.07032732,62.92131907,63.82898828,-35.31709505,-.593949674,40,-43,0,56.54859697,-14.91333233,-24.19388135,56.42214702,85.2565336,28.52533145,64,47,16,54,10,23,55.34473255,44.26455581,-13.12572013,56.0947568,76.34795725,-4.501632891,76.03991014,36.31970689,.767469896,59,-4,-1,68,-19,-25,61.47380032,-18.23627124,-28.09401248,71.53859727,-15.05622262,-17.66680114,50.49033309,47.29289141,4.703637249,61.6597596,-9.463301494,.53181972,45.02369041,-10.3978919,3.327610473,56,-8,2,58.38227521,75.74340095,9.216043346,42.02309209,-62.63855662,18.77676132,61,49,37,62.02719644,62.8309418,59.32339079,62.26552521,1.916945816,-11.9649457,61.92259358,-17.55822076,3.012139583,65.28036851,16.38276242,-56.50848416,66.14050204,53.095283,6.312918214,61,13.5,-30.5,71.1,-14.9,-23,35.78336972,45.25846231,37.44378817,70.56191443,-8.963975149,18.64017249,54.15998883,-2.896944515,18.55287266,49.14074775,-21.03522485,-40.89104385,53.5530178,6.104809883,-42.5551007,66.71720721,52.73258288,5.40625454,72.87444694,27.14007192,21.17105374,62.36836729,-5.913590532,10.45028081,64.77937434,62.91729174,66.34316254,27,-111,-7,37.61041595,38.18511671,29.49761017,71.22834525,-45.25004222,-22.66992455,72.65499922,-8.335626504,-26.342745,46.93562073,46.85985272,27.63227122,54.23,-5.94,5.5,46.27308686,47.42235117,-9.841129464,74,-25,-7,56.03931069,39.677439,9.114472642,63.26750284,-11.74953708,-14.56042207,57,17,18,52.32688666,-6.619088899,-2.898908997,64.59234177,-4.749987952,14.44863916,51.54314144,41.93818057,-7.970715009,70.35057986,-11.04939442,-18.31621159,54.04966454,41.22941472,-8.246273883,40.02739415,49.46497099,7.050192037,75.52125052,-14.74935255,-.056009204,53,42,-1,55.8,7.7,-10.1,60.21282458,-63.20792683,-8.260467749,62.72758054,-49.58978743,-26.59701391,62,22,19,70,-24,-22,38,-41,-7,46,.2,-22.4,58.11,-9.79,-12.57,63,-35,3,60,7,-18,46.31421477,69.87487083,53.34078126,47,-12,18,43,55,23,70.49469429,-18.36352526,11.39800072,45.31681632,-9.185912584,-43.52324253,46,-5,-30,50.27225772,41.80858666,19.78969415,50.577811,-7.171917962,1.832378167,46.98192572,57.53201428,42.98944834,76.10496083,-5.091590171,-25.04303247,65.91698363,49.79755706,-5.96822564,53.21495669,-39.90646501,-26.54291072,44,-8,0,77.00166041,36.63781173,13.50217978,49.11870458,-11.29773778,-12.79918987,50,-5,-4,55.11479314,-7.373097845,1.89656192,74.00805438,-20.33928369,-11.54556974,86.88823754,-89.33688933,30.97020185,51.34371223,3.944409038,6.787322099,81.34813274,36.3543706,19.71118763,66.76870989,58.08794833,53.19040198,42.45688528,-11.93573066,13.77177667,57.89592077,81.6158943,66.5720832,61.64122375,49.77444247,5.768513251,59.30195741,79.86013877,56.06805694,63.25197335,-4.442330978,2.711943771,57.77128982,-34.4398303,-31.45616027,50.62448372,51.59473193,23.0482996,66.14816004,-21.32454815,-11.20656774,55.98624946,-36.12427478,25.04437937,52.05,28.94,32.45,45.0219634,-13.91343528,5.064869324,49.13437383,49.87249775,49.16078064,63.90307229,.612714382,18.92441008,54.08218036,-7.174044427,-3.791219994,55.07931332,8.35934627,19.53607237,66.86476938,-3.522442063,3.525614125,49,26,28,64.01999988,60.6484465,16.07998243,63.67462673,49.41319879,-10.69762515,42.57416539,33.37204433,10.82479699,62.03412919,76.0665595,28.54783904,50,-12,6,68.07640351,-10.57692869,-8.998925526,64.60084251,49.35331817,12.39886457,74.96641522,42.24306478,22.07906219,24.08323776,38.16961282,20.3105263,45.68157013,-4.33779261,-26.97186956,48,17,17,60,54,2,56.69777228,1.426169078,25.76731853,77.19190992,38.59147219,11.50330656,74.05461375,29.46806016,21.88260536,45.07474318,61.5979264,42.50535189,43.88472857,49.4860357,29.01521231,39,-15,-1,41.17305166,-21.56004289,16.68474086,76.51835035,29.96034808,32.26211704,56.4,16.1,14.2,62.69452412,55.2666064,67.38630287,47.01130229,-12.3051649,-17.32744435,50.43962269,-11.9573378,2.097317224,60.80452891,77.11925319,65.44680118,69.04859535,-35.24403982,11.86002346,59.19,40.14,12.21,30.73294835,50.25950286,32.4807413,51,-12,-32,55.71900279,59.06456442,24.54723428,72,-16,-5,51.54835686,38.29957659,50.28736903,48.29863797,11.96769799,27.22889662,48.69,28.08,27.62,55.1,-4.6,28.1,48,-2,-7,53.47332746,-58.62965874,14.86008176,58,-31,-22,50.69275503,64.37043589,63.079368,59.70100475,-52.56531317,39.82016883,68.64588013,53.14206475,13.7650764,75.18304156,-20.59042309,16.96255447,72,30,3,46.54071269,-6.98929493,-3.521909172,33.85117767,41.46406941,1.635465363,51,-1,-6,67,23,28,57.81194447,-8.201786459,-.269609167,71,-23,2,60,46,1,67.6433214,39.88286474,34.25320243,61.59460516,-13.14076463,3.739270028,76.52822625,-17.83377247,7.52702388,50.60375757,-44.14946092,-19.78341615,30.93683862,43.36546659,44.29222781,76.51098723,-62.24937895,-11.85536165,38.09435322,40.12650064,13.15876339,76.26570055,40.94295717,4.347933363,62.7023093,-35.77388394,.521889871,53.05748252,60.15122448,14.20573713,51.07661823,32.09126178,33.99224893,63.06766318,75.90379954,7.783494108,37.8388719,-37.53217049,-7.785228849,38.86723558,29.99609597,43.8850741,57.39992376,-4.806351299,3.435586078,70,36,37,58.24504576,-13.94750698,-2.077119964,72.3558449,49.79606178,6.440125628,60.91928316,-7.569574896,-17.68994922,38,44,2,58.42769996,58.04206315,4.776980703,71.91850206,-11.49343543,-11.85318912,70.66848556,94.53395729,-47.42171293,70.61727714,37.13953971,-7.044442592,48.68463989,80.30772665,-48.93265626,33.67421483,59.0598017,-22.90273824,64.1299406,33.86681649,-8.872671294,47,27,27,43.56753146,48.64388335,-3.655970478,45.86812829,55.07690353,38.26684438,41.45953823,66.95622273,42.87386131,72.31831489,-15.25677766,20.06185161,58.03,-.84,16.2,24.90397955,40.83031873,7.288090782,37.91463086,58.17933725,-16.03984543,41.21711285,39.57019847,2.986244887,74,39,25,53,8,12,56.75101523,-21.48738297,-49.26384335,67.36638545,73.48160053,44.01641774,61.97961253,75.88925728,30.34444412,76.4,-36.8,5.5,58.07440632,-18.83611333,-5.421130805,85.07238163,-106.5273138,18.28376078,81.34788326,-28.70298556,13.76075547,51.53078109,53.87518087,-2.041433178,44.18418811,51.07745064,-20.54626394,50.2837447,-1.919760129,-15.20723228,75.19025289,38.52569345,37.63015142,62.00293367,41.40532865,-17.53341936,74.09596901,47.000922,11.43828272,45.59649203,30.76476238,36.22761255,81.81845962,-19.4154598,.251355618,53.13508607,2.990958023,5.693745072,55,-35,-20,43.68166082,44.81849887,-33.25387497,56.13798793,24.43278007,.425863899,41.97812003,-6.694868703,-24.1267113,75,36,35,61.6812588,2.049388343,11.10549153,64.59972945,50.94280274,-8.906329787,61.68137125,19.9315651,27.47170875,74.34373812,-37.69411721,24.30746507,38.00397145,59.22149787,28.23094133,42,44,31,65.94500643,-16.01617001,27.74415673,65,-31,-1,67,44,21,66.93939967,36.08724954,8.633346284,49.94181324,66.49536908,22.86275651,37.48,49.14,26.2,70.5,32.8,16,56.78828766,-68.54655664,18.22735081,46,-17,-15,64,49,-6,75.9,-27.8,13.5,54.05324745,-.538176052,8.994243705,64.05278203,55.74616174,35.79593874,51.10246728,-21.37437928,-40.06769454,31.79281839,54.02800207,33.22452201,79.04410166,-26.91315859,32.84948387,71.40555336,61.75863169,-3.847346507,61.68151311,50.68631505,32.2229387,53.32,22.93,6.16,67,-8,-13,75,-28,4,71.59707527,44.77461186,-7.753099651,48,-24,14,60.25610561,71.94831342,62.32758115,51.53613064,24.6247233,.756788037,42.54160394,44.63568689,23.30265013,56.5,-28.8,14.8,54.18345023,3.778207436,-11.82775868,76.4,-108.9,-25.2,22.56146378,34.71286697,23.67119302,43.87367836,-23.43493925,13.78955968,70.66108135,-48.61675675,-13.9646508,59.3,19.87,31.7,58.63465462,30.54218053,12.39337565,40.94811591,-40.92702087,-14.21047913,49.11122777,58.22702419,3.027923688,57,-17,-34,44.32906044,46.00888729,-33.977576,54.12438906,53.18274192,42.28929596,46,40,-8,35.4,38,18.8,72.61208962,-13.4906545,18.16299199,57.08,-7.13,-20.54,39.90169253,42.93766633,34.74405639,47.66618935,53.99504279,3.369367695,27.95922645,49.07621252,37.27286293,54.38094092,-11.22463922,-18.549547,42,-5,-31,63.74976219,56.6917329,13.57993358,61,39,44,69.34725175,31.90803972,5.192372631,57.5876019,84.64102288,42.24840082,68.82667692,69.86832179,38.33699194,35.2,43.1,5.7,41.17798414,27.2238887,28.88037903,16.87216008,38.17187173,24.72593128,43.95651243,47.77988083,-32.09325939,56.1511058,7.68276726,-10.78905492,57,11,18,42.6,-18.5,-27.3,41.89120688,-26.89647391,1.288594916,61.35577997,10.68630691,-5.598045064,44,55,30,74.56194755,-25.4997007,33.78227023,34.59324028,40.38710823,48.12252935,48,52,-11,74.56285817,-20.87219718,17.16674308,66.76472379,-62.08173262,12.65190563,61.86984633,88.9855282,65.94623384,53.27228718,-7.460741729,1.942591267,38.32055205,61.5897878,21.57094899,60.4,-14.1,-12.4,71.55205865,-97.40312053,41.97063635,55,-22,-18,81.31346077,32.00036509,16.07187346,54.30056638,9.211380141,23.00658729,56.16101872,-20.96541928,16.63242723,61.68117208,-7.231519053,-3.99463923,71.58316435,-51.09692881,45.4172776,68.04403878,-60.38322153,14.59353165,63.22646497,.587610366,-1.513490711,51.22318624,7.595082359,18.96144895,54.45442434,-10.38241944,-8.007522972,55.89735693,83.77372346,52.18868312,45.07759446,48.64267803,10.42647381,30.72067935,50.72092974,28.88752935,88.30107721,-70.04478848,-10.08858361,72.4337298,-7.851907942,-5.315073587,76.52430446,-28.52068633,13.50776171,57.40812159,35.52239755,50.54927644,40.37334634,63.62704498,-3.308982604,50.33430705,55.36108032,23.22483818,59.8250453,83.15833338,22.83082627,66,-1,10,58.61464101,86.70131051,67.66846018,56.6717171,25.00184531,38.78404277,54.2204915,-15.18406976,1.588005036,66.6,-16.8,-30.6,47.47,1.16,1.24,36.7,36.7,1.8,64,-5,-17,56,-32,32,52.18936068,-27.73735315,-37.72000541,67.95601159,-3.995957848,-8.290447963,53.56403869,33.71402352,2.173675805,66,-37,29,49.80209774,-1.091200381,26.64131462,60.4,3.1,10.6,53.78804819,.243046891,-.586956708,41.46007849,63.73718081,39.17104894,44.15701902,-1.175046206,-33.74056901,63.17128171,49.55619892,-5.541354267,41.8,40.5,32,45.83229627,-15.84402558,-43.29540603,89.02927844,-62.51462529,-18.43881807,48.1363788,41.41599456,45.40132644,58.82530674,60.25263892,56.88902223,88.75173558,-72.37635664,29.55764768,38,40.1,22.6,61.1321631,78.0273845,66.2790373,65.05744543,53.20029478,54.89706419,55.08086766,-32.31107435,-35.39312103,51,5,3,43,-31,3,70.42102419,48.04532463,45.69482259,68,28,19,47,-2,-29,61.68116073,-3.896445188,-9.338153774,53.92750678,49.59128172,20.11690722,39.43533413,81.62861397,-99.40055063,51.30817304,73.75023325,55.5815316,49,-1,0,61.84378814,-19.00410344,-5.55761807,32.5036352,-44.85094669,24.61713058,56,-23,-9,46.69662227,31.18756134,19.04398107,56,0,-26,82.20915263,-19.72892927,1.468673154,53.89138592,-35.2512587,14.51002246,46.05073493,-8.414399651,-4.080426835,70.88816715,-7.568900985,3.847009888,51.29605929,-4.870723318,-1.651916893,37.84294828,32.3702714,11.29605226,42.06119909,63.32696659,22.75339291,71.55488377,-12.28512297,-4.062826515,51.57741738,55.90789295,14.25117331,83.02269344,-45.05979533,-14.18483051,82.84722749,-26.72982945,5.26375875,75.54970342,-29.24331756,7.224022908,75.78838053,-19.2794462,-2.398271838,54.58372582,5.99229521,-41.48440569,66.24395762,-2.690419988,-23.70135405,65.55063992,-78.24966437,36.65878953,61.68129537,28.56913005,-6.287552826,63.15846063,78.68274715,7.334500919,41.2169516,46.90013556,-34.70787651,66,45,42,47,-42,9,41,-9,-3,60.5,-19.8,4.1,70.25735297,-24.1285854,-3.600872799,22.9301559,42.95796206,21.946282,71.57412344,32.36102432,36.34594402,73.99383257,-13.3189403,-30.88472438,32,40,16,64.79,-12.25,-2.04,58.1,53.1,55.9,68.64073408,-4.421381617,-30.62534165,52.58529468,68.14754224,47.32937331,46.46694791,.045435184,-28.98161241,37.50502411,27.61618328,40.48059763,65.61128409,59.09807278,28.672999,57.62560917,-79.06641064,16.31733969,33.98406471,49.11321343,25.3098729,77.67149648,-24.1357791,8.458185052,47,-8,-8,48.76886432,-10.63418788,-9.459653843,33.86700331,54.77541379,-14.42501585,52,-10,-23,33.63326125,-35.16620242,23.97951272,79.91182917,-28.47385857,-13.84207708,38,41,12,69.47124284,49.3581856,49.11013862,64.23591606,-3.723594151,-9.506771485,56.53068885,51.28661709,31.98816931,35.31572391,57.95605192,-13.45163976,77.42391328,-101.8085499,27.08947656,36.71540859,62.13497845,-19.96280549,28.14671616,50.95485466,37.54547309,38.40190564,-30.74376509,-5.882101364,46.77916808,69.53937019,51.81863164,51.57708362,-5.14628609,-8.190715296,54.68851836,-28.13405517,14.26953297,62.83672723,50.58714097,49.76093519,62.14219187,87.41731749,75.43028014,63.34972859,71.09574956,27.93565887,33.39559933,35.15159466,4.388485506,63.45557255,83.70192978,65.17482946,41,-23,6,46,-13,-40,51.78452915,-73.89101811,24.5176104,63.61015229,43.90539673,39.91690229,66.95736108,-32.03417012,-25.50213592,54.06657942,39.92430893,-15.82539008,54.04255333,36.92810845,30.54761258,61.62264019,-12.85172553,-3.973384802,67.61052668,55.66479375,6.925807088,59.21989426,-7.385450102,-11.44759005,84.08175299,-123.3483812,50.80868025,56.09172812,53.52935198,20.13164125,76.17241008,42.10695676,47.20972543,46.46610141,29.90430565,5.38619712,60.71326443,-60.99815891,13.74083891,45.45359856,-68.79985536,16.85937371,72.9821351,46.78639324,47.47055524,58.99987574,-6.257522633,.971691765,35.1477539,27.13630335,17.8003293,61.39731327,-5.39116023,-2.591847461,63.76562628,56.42489617,17.90020346,61.68119041,7.03170416,-11.29593615,67.19126541,54.26645729,60.08978261,46.13939833,-8.461926784,-46.37561925,68.71267792,59.07443874,9.132670298,52.4568526,-7.163314765,-3.7478828,56.09157079,6.024043661,-42.43121391,67.15415453,67.43545789,76.98032463,48.69422332,-10.41826268,-13.37602537,53.17048687,-38.74628317,13.85027388,51.5115253,51.792829,5.521279965,45.01088192,-6.339896308,-43.41472596,54.25429298,56.85799527,20.63654374,55.5,-23.7,26,81.91978656,-29.62231773,5.381601779,49.42512222,-33.09846608,.438840537,55.68903889,25.34520808,23.76873893,66,-9,18,83.39698221,-135.8451286,82.70268266,56.49223399,59.7188927,-6.918602683,36.17158729,-41.56285348,16.15097252,64.81253511,-22.04683254,-27.20144843,48.90496644,68.20140283,39.31544406,50.78863482,8.971496756,-22.40601537,63,36,1,59.17672506,-22.64587706,24.12612922,58,52,16,61.65861751,-11.5950034,8.45739783,48.65915802,54.7174443,21.5055544,44,-30,27,52.3,52.1,31.5,43,-7,-14,40.46080817,65.5535257,54.59401237,78.35920581,30.83826418,20.1376614,53.08193082,40.46004513,-3.687304887,39.39527922,51.73904421,32.83801039,74.10889403,-61.55292307,-13.06567568,55.40071041,-41.52364194,10.21783016,65.5,-24.4,36.3,62.08764,40.88547487,49.6742931,51,24,28,64.43,54.22,53.91,54.41405685,21.924874,31.50320907,73,-8,-18,64.48,54.19,51,67.77042047,104.6134404,-52.12559086,54.4240305,90.44399659,-62.8867518,53.84780825,-36.12602594,3.499540084,65.6,-39.1,-2,64.19335481,-.379229789,-31.0086512,75.9,-25.2,-12.5,61.68118597,-7.786445519,-.011086859,64.25356064,83.62605104,42.9198618,50.19194015,-19.78513237,-28.95053792,69.09561046,63.34527918,32.60782044,65.29634,48.89943811,19.96184415,34,-22,-29,53.32551553,4.069284428,-22.61680615,45.85322425,69.70340123,37.17684355,71.1,-22.6,-15.4,63.56340485,-48.01563828,-29.27561671,55.5,-6.4,-6.2,43,45,23,49.25226224,44.45654322,16.96422955,58.58,16.06,15.82,58.9,41.1,-.7,53.10130754,38.30890936,3.464393631,27.54159801,33.79735398,27.28263655,56.52907405,53.86601655,-9.886061,72.71034131,42.87668961,47.04630893,62.74209424,73.22428013,14.0213134,65.33049361,-18.83607383,15.03646351,72.66525736,-18.15938005,-19.17588994,55.49293113,64.75741984,49.79371586,84.20910496,-101.1930289,39.81045351,49.0866066,72.55296939,37.73853709,44.77078056,-63.58465303,18.97931991,51,-1,-35,57,54,60,55.21146139,72.1756376,9.359795575,76.52677155,-25.53126959,21.56127115,54.6709994,80.0185184,51.4344142,41.16785074,24.86531729,11.25357237,51.5771861,4.217998634,10.37360986,55.66044196,10.88703177,2.758325617,51.56490043,51.62310765,-22.21196952,59.40427579,-95.95528783,68.75887719,86.75589647,-89.01192473,19.46418864,61.47229379,78.391981,74.29067299,54.10901605,-29.96286161,24.46710918,64.09564186,47.68835346,28.94099996,63.26744849,-34.93072834,-4.706294648,53.18317615,-7.653920297,-.620788039,68.89364762,-54.60993274,-.455460778,44.7,-34.8,-3.7,61.07086232,79.14220909,67.92271013,71.38200718,54.94292598,7.310442967,68.92866264,54.22767312,55.57550337,46.50740638,20.30616623,28.32262371,57.5597427,-39.9052715,4.719720358,48.08419017,62.46550259,14.03069318,55.8,-33.7,28.2,60,-13,20,27.2664364,33.16383458,29.10129394,44.45530899,49.79460632,27.32247422,61,-31,-4,39.92797031,-15.16793785,-38.23674743,34.42723249,49.32024536,41.44508012,46.12975665,46.33444026,21.0456135,61.4437045,75.74252116,68.98942073,60.26352293,45.99007665,-5.324706141,63.44641966,-62.05619295,-4.449844017,60,24,28,50,56,22,53.75962497,73.76091424,63.13946929,51.57728969,16.89860797,32.23020981,42.19248389,-62.82609947,28.54338878,66.65575523,45.15782047,-8.011298479,56.41021081,-8.257450556,-8.60862777,39.0567951,-37.48530438,-8.56524363,51.89390824,-11.17436303,6.910817954,58.68036561,46.96217532,61.25905176,66.01377385,69.33126761,74.83470725,42.41515123,-28.38160988,19.77313088,52.20015406,-25.3889951,27.30845665,60.77319665,77.72193199,42.39854508,50.10717599,-8.884252709,-16.13647205,53.2,5.3,-11.5,71.5636286,32.04869076,10.40746518,46,44,-24,57,56,49,55,-2,-29,53.71192512,59.85501836,-2.988331113,70.12424022,37.16861762,3.265115761,39.55379209,-34.94121559,25.93900447,54.10354989,26.64399656,27.70342209,61.68154766,60.69671961,26.72013666,75,31,35,61,-10,22,50.48161552,-4.896272696,-1.648988554,59,16,19,53.67987668,58.45151738,24.18634449,69.66463761,-15.87582996,3.08454883,68.2901769,-7.496763627,-23.29406095,43.45673627,16.59723951,25.88186465,43.15821257,-6.069993457,14.85534781,65,-13,-19,74.07263347,-28.84811179,24.46280942,43.94783853,70.02503959,35.93082024,61.18540603,-70.62084485,7.148444155,41,-11,5,64.7874629,-67.12906701,11.4348366,65,-1,-4,59.17823869,79.48714082,65.04880432,58.42595765,79.86772782,23.24476287,43.94457369,-4.354096317,-28.53419588,58.3,43,24.6,55,-38,3,64.0796225,50.58793571,12.75954922,45.72879276,-1.093317151,-40.43431891,51.58786247,76.57632796,49.8513645,43.0814406,60.91313512,29.12076293,52.67356632,75.1438902,62.04182296,54,57,16,50.65961987,-19.05958227,-3.975800612,65.47531393,4.101282083,-11.68598221,61.68114658,-28.77056628,7.116452127,51.54345514,47.04518128,-18.27073224,69.88513626,55.58360439,22.85616902,33.29949582,-23.88453299,-5.215350583,56.07252811,34.0476413,25.04868112,61.61666359,90.41491792,59.17105943,62.5,7,-33.2,65.93901448,74.55646641,76.15546682,32.01929469,32.35005169,34.44998463,71.59714823,45.1398701,11.27756318,51.57734923,33.82739319,27.47476667,79.72088667,-68.21814708,11.74824482,46.34858541,-9.524807724,-46.63166426,53.58749804,-59.28194762,3.593811961,51.52098898,-.37609669,-43.55239646,62.00112027,45.05588983,44.23042866,70.41464088,42.70003691,48.55468837,45,-28,-32,60.6896336,68.24995779,49.89841747,56.13529215,-77.50237791,21.27364342,42.96617915,59.41092363,26.86339483,54.00611541,-31.56793664,28.57244584,74.32685723,-20.25569055,21.28588389,57.00957796,-69.14035728,43.45540405,41.08321722,-22.54577435,1.784907358,38,25,14,64.20381489,.434740477,-24.02216433,55.3001264,1.534901327,20.99626507,51.53267515,34.15072343,2.61527757,53.67473068,-5.216176061,-8.142076095,76.90949332,-58.79902324,35.33875631,57.67401098,-43.35092473,-25.9373714,43.00312291,64.32753333,50.97277014,58.20867016,49.59526854,60.41743829,61.68135565,44.30937017,-7.950727326,51.53325312,33.1800893,11.88736257,53.58511708,-9.124894744,-13.06062081,63,23,28,74.17165044,-104.2041927,54.40661349,56,-8,-6,63.7405388,-7.100537526,-3.947525963,48.88987268,67.78213379,54.18614181,67.65623959,105.0134064,-52.31130696,67.64735709,51.09773671,53.53964885,31.46184471,37.17732679,11.11386737,64,-10,3,57,-39,11,38,51,21,66,-41.6,5.5,61.69969503,89.67138921,64.55878391,68,-8,-10,56.21515635,-88.63877645,53.86942516,64.03266573,-27.14237172,-13.40081099,37.3,46.9,17.9,46.98003721,-15.55197154,2.565480049,73.19570829,-24.24104105,-14.41405768,58,55,28,48.61206878,-.423249671,1.252331039,80.55745437,-29.09366961,19.65417333,41.5708078,43.57844622,42.10232946,39.72191485,26.56668729,32.90971917,56.45713097,-21.36864948,10.02715824,50.92114166,72.25302087,64.49936541,57.88306412,-.267937155,18.58660986,84.86087291,-26.80516006,13.64938122,77.15701011,-68.0389185,10.7394497,67.62519792,47.10597264,44.10321642,35,41.1,17.6,71.50408079,-24.12304146,21.74001512,46.78807674,20.66895499,21.77770698,59.43010038,-6.68288916,26.47677438,73.80070427,-22.22261398,32.19613973,70,-27,-18,50.67255726,-8.967277092,-10.23333388,64.38554823,-45.24500037,19.88354646,66,-30,13,46.58338066,43.07305185,15.61187696,37.42082419,42.37703232,12.16108714,70.9,-21.9,29.9,60.18439551,85.02752004,13.94692941,68.33951274,-8.393942977,-3.041376005,26.34242247,43.67285486,30.27080097,55.02392337,53.05473431,-4.316776346,59,6,6,67.43151304,-38.88645408,-4.325110241,62.30515944,-82.5246725,45.21587565,21.85454597,35.21043013,17.91355552,55.23358262,1.167401315,-6.115401756,61.68125529,33.4116145,-19.35457974,55.42066962,88.92084446,-44.31319208,23.73249546,42.21088092,18.27635337,59.89550413,77.60684564,58.94403309,46.08293151,-13.95688956,-44.68359116,56.67036058,10.23556351,16.20440434,53.78261626,69.20713241,62.63487702,69,-29,-13,50.69323898,.232268774,-.560927623,53.83133358,82.7080566,16.36222288,50.1,42.8,-16.8,30.90707034,47.77875225,-19.15916971,64.20562658,4.886783709,-32.92346448,71.57626389,.563422787,-23.94214621,70.66,-6.76,-13.43,55,43,36,41.88444214,67.45135306,43.19090652,55.32238125,10.87551923,2.773951963,44.94578234,65.50115794,46.90774866,49.22659738,74.22162022,55.73823223,30.58201862,54.08380882,44.18483298,49.23438611,-11.31716795,-28.64904162,59.84540916,84.35718167,12.79520548,51.57705746,-28.31319209,3.177094252,54.4,47.6,18.8,66.08328249,58.20766502,53.44702046,71.59688002,-4.744771513,-8.677246875,59,36,-4,77.80250546,31.74606144,16.41965064,63.06397041,-15.23100803,18.27491236,61.68121736,-5.832155352,6.814358314,50.97687247,36.66247232,12.27168202,51.57711027,-7.370921902,.104968463,51.57709638,-7.070824121,-3.659039474,66.00908784,-49.16401945,-26.49672488,51,-7,-37,45.02607288,-10.04262484,3.156933198,56.94654953,51.40199214,51.97241594,52.29289037,73.51161172,57.69689738,71,-7,-6,50.56265518,29.19989616,-6.413584347,56.44724267,73.21399839,-56.72762777,68.68160534,-15.27630647,21.7400025,61.42750084,89.89679444,74.86747135,69.22,-14.49,7.85,64.13459967,41.56827884,9.589241039,40.90312079,45.61372927,7.674368189,39.16728291,36.28375511,34.10050313,52,-12,30,61.6006017,-9.836816059,-30.03424236,53.9380289,2.979859794,5.65919721,36.64035897,43.85962454,35.86305831,48.63737544,56.94335173,32.85279037,55.4,22,21.1,61.68144851,44.4838469,17.86146302,54.15452202,-12.7066512,9.371809996,72,-7,2,46.01558254,61.86231028,33.9307985,47,44,30,49.9046782,-32.52044139,23.30033918,55,-1,-4,65,20,27,65.63083952,-20.26794486,-56.02076581,56.70015564,-68.0639744,2.111093724,39.25791463,28.98800414,33.67503986,39.47841981,33.16193711,11.66665026,55.44261705,9.340038999,6.453886023,60.60201928,80.81365296,39.08869287,52,61,28,67.09686849,-3.158570392,-4.963962753,65.32279815,-.260708768,-30.34705668,76.34655255,-69.63122535,25.26727617,55.14386126,-31.46457443,-12.5256816,48.3390492,74.31193079,1.15776106,60,54,7,36.52516959,-54.36714989,15.19645466,61.67588909,-45.49256094,-4.633001871,45.19567693,57.02198665,40.01289698,60.2429581,-1.67233653,-36.80990844,22.97779286,45.20499823,23.63103838,36.08727378,38.50778053,24.52541519,49,57,11,70.8,-29.2,8,44.75,30.74,11.4,61.17313311,35.53429456,3.34380693,50.96462056,4.137325036,6.205642819,60.8817913,45.75008766,3.566776163,42,-21,-18,50.23561764,-84.21337048,54.4825218,46,-11,24,62.0379955,74.69184803,70.29758352,57,-21,-34,44,60,4,49.63907788,-40.1710677,-.53880983,48,62,42,51,24,39,17.4989276,38.05427515,20.45112719,58.34191823,-11.02233759,-9.226703259,31.90260945,-25.38891807,-12.48447736,52,21,30,74.03006303,-20.62329357,-7.565615991,65.3876919,38.18666264,48.13984826,72.84322572,-20.35061741,2.173703399,58.76953755,86.67898631,60.89383757,44.59639125,-27.77156623,.13930555,51.56008662,1.007772938,-17.86137299,46.63343833,-10.20153344,-46.76175609,53.2459479,31.26546222,32.51000807,61.68101328,-7.35947102,-35.30271526,51.05658522,-18.38605832,-39.30612415,48.59313081,-24.99259673,20.11350669,74,-30,-13,81.34787029,-18.25515106,.833228603,73,-21,-13,47,39,39,55.23298939,51.08409075,21.43230938,62.84804382,-11.43112981,-4.552237656,49,41,-3,54.07795847,9.337793109,6.552525968,78,-17,-12,51.65996485,80.58645714,9.202734108,28.02656059,35.57630822,30.8338057,74,33,25,71.55899501,47.20049815,28.738336,41.1205401,-12.83755371,-3.846532813,30.03898648,27.57470323,33.8887624,49,-31,-14,51.53820391,25.0390597,-2.395189677,54.33413896,-27.02669395,-34.82659679,48.16581088,67.4151332,45.40338087,64,1,2,50.4303546,76.09994042,40.2224842,40,-13,17,44.02204209,36.47014878,46.14680485,60.12703016,46.43941085,39.82403401,52.65505389,10.4950927,4.975090268,46.31839534,-38.96833382,-15.34246554,42.05659093,62.60971747,41.85074181,37.07109009,42.60316659,10.9196778,47,-21,-17,42.71088573,64.65906135,45.18082715,69.7686633,-19.18602494,1.476112866,56,12,11,66.52191114,-14.729075,-33.7982694,23.67607661,34.52066373,18.89169319,40.66436041,56.83579286,42.49218371,41.8562295,33.57461392,33.86264477,76.56578303,38.4373417,4.226251679,55.32269376,3.844340383,-11.7512662,82.38427634,-96.04427151,55.59932314,55.44,29.48,21.97,51.57716873,-1.035635268,10.72470204,63.12459226,-47.51425623,10.19149673,76,38,5,58.70782199,-69.92900535,3.963846405,62,42,-4,29.06527794,48.9835898,42.2497305,92.3313486,-46.22876398,34.96007835,74.99878683,-66.99592395,22.63615156,48.53541667,-30.76756572,-16.83615494,49.16914047,41.4169353,5.546840726,62.03199755,-81.89812226,47.75815747,55.6036226,57.70957642,44.34565281,77.53816965,-22.25931976,3.712030171,54.18353117,1.970160255,11.32585995,65.73338526,40.98404393,33.56566673,56.33168032,-22.60425416,-9.335897508,40,40,19,79.30200889,30.38130185,19.26043313,57.03541158,10.67331497,-5.090657604,50.50431255,25.97028114,21.97208192,67.47537225,105.6474093,-52.60554872,60,52,30,42.13163982,40.94712576,50.31009243,52.29558913,-75.90869194,22.37594701,61.97810491,76.21236206,34.10167364,53.83299891,30.55556922,32.69076385,62,-7,-27,62.98733421,53.2077736,43.87053781,52.31368982,59.22354822,27.58080399,54.15573121,1.587578255,18.27771209,23.44206252,43.08337646,28.64687972,54.11579226,35.27697719,-26.85231861,45,-20,-2,63.4299626,56.09493984,66.03627272,66.39608984,40.24416041,-3.495501422,58,2,9,71.5969489,-21.20454417,27.37835093,37.74813309,40.8813489,41.03689674,64.13698797,-11.77399956,-20.48855476,54.77367279,62.50575502,65.09442997,50,38,34,60,0,-4,50,58,12,55.41706272,51.51491074,51.86875138,39.87351517,59.04337674,15.30934004,71.46898764,-22.53189156,-23.02551708,82.71103977,-45.87698667,-21.5895525,55.27389833,-17.57465548,-2.409372747,58.67,39.98,12.69,71.53955565,-33.2154138,4.043301197,60.00398821,-4.665989236,14.25125751,63.78699223,-14.98807807,16.21588499,49,-6,0,75.5144032,32.36265275,6.578543613,55.02505812,75.42038457,3.376451381,46.03228813,49.02122184,31.08532426,70,44,-2,41.69194525,54.67333768,25.6661643,54.68742362,-5.195758879,-8.170102591,46.8,41.5,22.6,46.73122598,65.67663438,42.88594644,74.96120648,-3.796421385,-21.05748722,60.26236135,-14.92504294,-31.05076363,49.36740388,70.1298668,-4.263933673,50,56,36,41.15459944,43.44971524,9.420704828,65.63460301,39.47077932,22.34062845,46.1147922,-.502038647,21.96698522,61.66964242,3.959871231,-15.20304672,38.10030715,38.97659017,37.64731313,68.21554223,55.01433372,65.31232205,46.68736864,37.72811116,49.88253103,61.68146705,35.71691145,42.41498853,50.31222758,44.51682573,25.82290337,60.11723217,44.75312025,32.93193394,61.65130356,-.30660378,-32.34170401,44.40499084,22.67831941,34.76022761,54.58465807,-20.70266458,7.801785661,57.64030124,37.15118312,3.05141664,82,42,10,41.49653862,45.3461211,-13.67318296,67.14654626,-18.49451907,-20.34179977,74.04365536,39.90681497,22.6828303,71.59689088,-7.13465584,-4.135963907,54.58333883,-88.12834271,64.38069893,67,45,17,51.55758239,4.61436633,-24.53258619,61.9708047,73.06745612,67.4873183,45.16382874,-17.63654426,11.04588131,60.73527467,9.298075517,-35.40518832,22.90235857,35.98772375,25.68667081,61.64768102,43.40409859,39.56599876,39.32247642,-20.55255955,13.87406123,77.22630109,-29.03452966,9.46447219,44.44041996,-20.67551353,15.68618164,71.16174428,-41.52189468,30.08878039,54,54,7,66.70879326,-7.582542169,-.199070603,61.56010914,-9.113797198,2.488943689,66.48124507,-9.68929647,-4.046322183,57,-2,-9,40,55,-4,53.9496578,-9.156498881,-39.92660181,35,-29,-20,43.13686913,57.95847133,-17.50191718,59,-11,21,64.06300228,-34.25392902,8.085363332,34.93085944,32.12518048,24.24897137,67.67894701,60.07001586,9.338167289,39.65840884,48.26587244,-26.40942423,89.52258614,-65.73197247,26.51566183,45.67970266,41.83662251,3.505659394]).map(o=>o/z0),ua=new Float32Array([57.75263983,-18.20221084,-19.39044518,37.97861598,59.93148631,12.45645225,45.38321611,51.45230415,35.57393367,79.22377368,-65.91287604,16.79042546,39.4,-30.3,4.3,43.08153053,-5.98093072,9.976561111,72.47021952,-27.92207492,-5.337689952,55.23182828,77.03949343,64.38815773,47.50474489,.07921435,-45.49889787,41.13223606,51.89483999,-3.151831381,63.35129256,18.20351786,61.8460098,41.21730023,62.97303858,27.92101579,61.68122822,-29.795989,39.13823402,71.56874342,-21.15637632,4.432895772,93.81826884,-7.605259939,66.78877047,60.13523208,4.306042644,21.97144785,71.59710241,45.30970566,-1.670896871,57.32704855,10.46717709,4.655855822,62.05,58.84,71.32,77.8696842,-24.04317569,74.73377397,60.74468108,78.28893511,66.29602891,44.70141103,-9.231786129,-47.54244749,52.57985055,54.46419384,23.48126666,67,9,25,66,-10,43,70.13434239,-24.68742288,20.63868904,61.32284497,80.25869701,69.37108791,54.18474043,-7.60877817,.127819295,61.650308,-39.31565449,33.66993992,85.95955666,9.346849451,94.28121202,56,-37,19,52.72787663,42.51468342,3.595144259,49.43652814,63.56954699,36.70071608,63.4,-13.8,18.9,81.95325265,.844850307,35.56923276,71.03351008,57.41043323,81.90183495,51.71137212,44.24322662,-13.35699939,51.52431464,60.21591087,-2.215602302,59.304645,83.18410569,25.86088525,57.34288209,6.285416492,17.18954188,63.1191151,-26.49096286,-19.87758127,73,-22,11,62.0554551,69.83951524,65.74262088,68.69355328,-5.292810574,18.23014631,62.68196898,86.59665012,61.74354895,65.32367155,5.77538771,-41.50964511,56.64485346,-13.69674463,34.96465732,41.21683946,-13.6798668,-12.91937135,49.7616444,6.582976544,-42.78322348,49.15862247,66.5511829,2.510655593,65,-21,-14,61.51479085,-44.92446608,5.556893733,44.08681422,65.12163445,52.18336978,33.1,-29.4,11.3,56,40,-13,60.9,-5.9,-7.9,61.06783573,76.89006239,36.09409415,81.08487719,21.48160754,89.7831953,20.93873702,39.78843555,25.25687815,27.83995574,34.9366402,15.53083658,76.1141537,35.16608261,26.08064378,59.296068,18.60318377,61.37445451,41.39700024,-.289481644,45.62868333,66.63218445,26.60791408,20.15469084,61.66164778,-51.75001546,45.36551962,59.39664298,90.08512626,.792986298,83.16341959,29.49383131,31.93912511,79.73429465,19.27662203,28.4438506,60,39,-8,88.26278419,2.183136039,62.14005979,40.8774422,30.05557359,8.901344547,47.30131738,-1.72609394,-6.622881118,41.93172104,-6.965339624,4.819320813,73.5091556,-20.56346355,1.476780486,93.01295915,-24.82552145,89.8131972,39.14648212,19.71000112,24.41922428,46.69281263,65.55949863,45.13072628,71.78,-17.97,-6.41,61.02163511,-35.91644834,-7.50787353,60.22027705,-6.532987417,-21.75109167,81.34806086,-4.890971763,55.26541103,87.73498088,7.188486536,51.97988314,62.36006415,26.21621201,25.429546,81.31098876,13.08331327,85.07072641,53,2,0,53.41988942,49.65939237,11.76742514,87.64901893,-30.02850668,73.4808003,68.85943983,49.07526828,-.763207629,54.64237355,11.96723875,11.62903565,52.87247754,-14.07232657,5.192149054,67.14330499,-49.88093916,10.8875263,44.2,48.9,21.5,64.13489939,40.13634907,22.87672004,44.2764485,-8.841550635,-40.37273232,52.60233277,16.91543201,13.58207283,83.56708144,12.95612101,90.77447068,65.29922417,58.35439821,25.1765886,70.78541157,53.7264045,76.04368402,59,-12,13,39.45337517,55.63631097,37.06051487,55.98372503,29.01694903,46.24494918,65.2265669,-2.155485141,-10.41538079,62.58902273,86.32660838,68.89966129,40.68906959,-30.99433452,-23.05942291,39.9440343,36.6715205,-2.797909069,62.14339313,44.65473495,20.92063272,68.97605241,2.216411644,28.27932876,61.6440738,24.29943558,3.354453714,61,-10,-30,81.35,12.9,43.11,61.64000334,57.82772868,15.67103369,68.94391194,65.42966056,67.39191476,38.65495377,39.0562135,-9.038222409,55.11721913,37.38846656,5.780839112,59.35171825,10.71282528,54.2985442,63.8,17.6,66,62.54006922,36.88014802,7.91132262,87.72682117,-78.90710461,12.53637511,66.79195261,51.70239608,37.63516669,63,-27,31,80.92878784,6.969887217,42.10827,55.2097273,-15.27049354,11.94725451,53.35528349,-15.89272778,-17.91546179,66,19,27,41.1615937,-32.14213214,.814108644,39.1450185,-11.50383388,-40.76316881,68.317784,-116.9509921,76.78952577,91.29256549,-47.70752546,-8.051848919,71,35,61,58.97375821,83.32384325,44.36248332,51.57718005,1.904969588,11.05943503,53.00511295,80.54934522,46.16104423,55,58,40,96.27539253,-9.342249778,47.83798779,65.42277255,-18.51150664,42.23084393,39.215047,-51.98169743,19.82931197,63.71642998,-19.09915309,15.22797935,42.19423942,-6.698248709,-48.04487796,27.41528013,-37.53899,18.11371166,40,56,24,51,-5,-29,53.67347217,60.13470877,4.430366169,52.57767645,-3.754787615,-7.205543801,79.69612186,4.956130937,67.84757733,54.5490556,-.302396599,34.03423952,62.1330558,75.32665416,71.39873799,74.50893868,45.82739661,14.39532632,66,-18.5,-21.5,34.50533394,42.47447857,26.67427471,61,-30,-13,65,-26,-14,71.64618896,-9.785961063,-19.64370719,46.4931821,23.89096041,23.46447012,71.83020333,24.45635299,46.78128655,82.28677789,20.48187683,91.94108377,50,-41,-6,43,51,31,74.05089284,27.27473879,76.73301489,45.99088038,-7.479249502,3.045779025,54.69296949,-39.60609392,-28.94628442,56.05,-.85,24.24,56.58033679,83.7555399,34.48708338,48,57,20,48.52807114,60.57033362,49.80041515,56,-43,8,46.35174934,35.14424494,15.86991916,63,-11,6,68,42,70,81.14107025,26.70723038,74.94683209,61,38,-9,54.01472317,1.968568745,11.33125578,62.82000133,11.08032214,-60.56293499,84,6,37,52,-2,-4,62.25805185,87.01624485,75.5217884,88.70212767,.113592425,82.7840627,70,-20,-20,86.60823637,-97.40231096,93.95329063,62.03634099,74.0003098,55.40554475,46,41,-3,71.1535696,12.90233867,57.67686157,59.33858134,-7.375173359,29.4624274,78,-24,28,87.71765655,-.372825429,84.76815222,68.29262523,67.87614155,64.08694116,37.8,42.8,26.5,41,-17,-25,60.65096075,-81.88302954,50.52340007,67.0517408,-2.077232621,75.3360236,71.59721311,33.87362256,61.5061658,43.11003902,63.08926019,22.9116134,62,47,21,46,-35,-21,45.48871458,-25.28456699,19.82933216,33.29655508,49.52854799,29.44782566,45.2,52,19.2,67.63432353,7.947116319,54.7366499,62.79927731,73.85253907,14.7316058,50,38,-10,43.80946586,34.7125489,-7.901135266,35.88757029,55.73140947,36.46720727,55,12.5,40.4,54.04337196,13.09810222,-36.37036356,54.6,-54.8,25.2,46.22627078,48.05764245,-3.095273096,65.10524893,77.23752207,77.79244599,64,18,27,50.49793081,-17.17908593,-42.22832954,46.33678783,-1.262864901,-25.90369433,79.79287446,31.26748462,29.77407354,78,10,39,73.33292788,-4.12166695,48.9222613,55,58,-3,55.41472775,54.47100284,34.45810111,53.39391177,-10.02056063,11.12879446,44.9,41.5,8.7,43.70954295,38.57919642,31.1200458,80.7,-18.1,-4.2,51.91766595,43.00488908,35.94478398,51.57715134,-3.897005469,8.37180074,45.89916462,72.16870819,35.38147262,70.76269623,-9.371485814,14.21061905,68.85339522,36.46180143,62.65873833,51.3,-46.8,12.1,71.59684031,-2.37278145,-19.12985762,51.57712805,-6.447421304,4.085913574,77.9023207,-16.58867497,-8.088238869,59.4,30.4,32.3,81,-22.8,48.7,30.42729464,29.281377,16.98968278,61.67356084,-32.34484326,-16.57043898,48.38608123,71.56023421,43.82336086,70,-6,-6,56.6824952,10.34026694,-.707003502,70.36293082,35.86731365,-12.39723507,51.76309165,-.948246525,1.002805093,38.22629947,53.79264423,-4.031235544,86.17913604,-92.98686161,84.28365983,75.1734187,40.69452225,23.30154605,77,-27,45,45.53995828,-35.31006365,21.57615118,55.80911205,83.40891639,67.1050664,85.6534746,6.34412898,59.22840564,77.15731846,34.62556307,87.62739933,42.66996616,-9.482423525,-36.23333616,82.3973882,-30.18779081,68.74821297,72.58295014,37.19060119,-7.036610535,42,54,26,65.84349637,6.203049965,36.43257714,43.63310409,42.17184942,15.62573906,85.59443573,-105.3246662,52.96787472,78.51499603,-124.1289327,67.65610822,66.49326738,-36.75509037,-10.3319483,65,19,71,52.34534936,28.84954974,9.118570669,62.69630744,-73.72177168,21.96877906,51.57731607,38.11517543,8.556448472,78.55451771,33.14371009,88.0712507,87.48598082,3.383947507,37.45278665,84.49295777,3.137042397,91.36336762,72.05412256,8.275172058,33.23564333,73.28021815,18.55131847,51.00534899,45.11138708,71.27429254,-82.76144291,64.23665987,2.484280428,-11.54857678,85.79243519,-102.7397481,49.08273315,56.4352709,42.29490863,63.91358017,71.57210026,-39.1499902,34.0917714,46,-22,14,57.18102476,51.64330861,62.54124129,56,5,12.7,75.03989368,41.55624333,4.129166541,55.37201783,20.08244722,40.84540376,45.68893548,-8.629483721,-46.51757056,71.82487494,54.75210239,83.28897163,70.44795431,5.00094654,34.02731977,56,-9,-24,65.51895476,-1.371374472,7.429832738,33.05273947,50.77417918,26.22370602,74.11615904,-96.71679948,79.58084685,63,5,42,74.04457368,-23.89130436,2.086162151,53,-5,9,76.3,-9.5,-26.5,45.9763444,29.32717788,38.01951431,32.47628505,44.27084628,46.01219601,53,-8,-24,79.57303383,4.117896482,75.80551266,47,52,5,44.9930705,54.55644999,20.0036175,80,12,61,48.07082685,-69.6093991,23.08298299,61.33220699,74.11447094,48.00652705,88.09348461,-71.46556586,-11.78583248,52,-13,14,83,16,29,88.44167429,5.037674442,78.55158139,49,-21,49,81.34809637,7.515922223,50.83787001,65.29499944,53.5450444,34.52226211,74.84445289,-41.71280422,5.177712606,67.17715107,-10.24424624,-5.453991854,71.82,33,6.09,66.819042,71.53804748,77.48236411,66.4,6.1,27.7,62.3,40.5,34.9,46.46671131,-13.51367497,-12.91374426,52.30935852,-42.19134787,-7.138435176,65.91809374,15.33257334,46.20820098,53.84120277,54.7025446,34.38015452,33.41918815,33.41768887,14.95512569,66.67952473,1.386507464,55.25114766,88,5,50,82.80027646,5.500925095,31.16422108,84.11054706,-126.3631211,90.9878728,55.30861751,-14.15879654,7.047846616,30.95968689,37.64212152,39.96995849,70,25,55,40.46855451,-28.67593689,-26.62332832,52.12431723,51.56613153,38.27648653,96.44263592,-24.68739131,86.47078602,67,-9,-18,51.19369252,48.98245252,57.23090534,62.42521463,7.379815206,-20.52160216,61,-15.3,-10.3,80.12548824,12.12966899,82.07012733,55.4299554,-20.07154394,-10.19919282,56.3,-13.3,-37.7,69.59719755,-2.960382187,3.626616039,51.88611981,-43.63037339,20.9319234,48.82588652,-1.186820071,-14.3941092,74.0443386,-8.286051853,-22.47964019,75.55014293,19.78337413,26.71163455,77.58722852,32.4446686,86.37068663,73.63082872,45.88667297,22.45062922,37,53,6,56,-13,30,43.89341394,23.01220898,9.85288378,50.64679831,-3.966524486,-37.79824068,63.26564855,14.10648464,45.56518719,41.10844118,56.88875107,30.43562641,58,35,43,45.91426438,-53.03363185,2.749701396,26.77402548,39.22870266,10.89252778,88.74259114,1.816725632,97.66916703,63.69174035,-29.63199359,24.7840439,85.02520321,-.379776674,76.68216189,84.28107525,17.88040092,40.77838366,58,-32,-11,56.0930543,-11.32888079,-25.42733671,58.14524061,63.76236594,-6.736690246,58.97774141,-17.51504057,-33.13277654,67.66,7.95,36.3,51.54529911,18.38340971,24.62332224,81.4141227,21.32168089,90.96445563,56.70374958,-7.192546407,-3.861241748,85.64926858,-102.198829,31.9356976,65.28550869,60.097181,3.832129139,47.73637944,-13.53582486,2.436520966,61.86675158,7.413618803,35.67732669,73.6049017,49.82050686,74.72233047,69.45147623,-57.5036912,15.54166078,32.86746787,56.46975575,46.79679426,39.65,-27.62,10.5,65.8293773,-80.20738638,38.92177015,55.73870578,6.816742055,10.97409083,45.26603087,-27.71581062,-20.79911344,63.87515706,68.69353068,31.78193999,73.73045127,-11.33869141,.711053216,26.94474801,48.49130061,-12.14357657,45.93860178,21.28882506,19.7839773,56.24680408,-23.36293117,-7.911429378,55.63286852,8.351533757,28.01732016,77.48210551,27.45972796,73.32528709,23.49454433,44.56617653,9.933239781,78.12727413,34.64752268,24.43560943,54.99242874,48.4010215,19.5981041,58.59327568,46.93871879,54.51435373,30.98246263,-31.84451587,-4.615803633,64.01083165,68.15579511,50.8793593,63.75729991,-22.23990789,3.413410857,38.76757674,-69.59600389,40.61555161,51.4,29,13.5,59.46907982,58.89160108,2.068469489,88.2749752,2.542433029,94.94450295,69.90948481,-4.689626112,.591306546,73.31997274,-28.42505705,22.65989401,59.03775301,18.34836543,30.49111954,49.22096529,35.10372864,17.33493735,47,23,20,53.86266573,46.76906336,34.84737305,57.63121686,-31.24631745,39.28323283,61.86487516,66.88279088,71.99858599,31.95666805,37.02689013,38.27879703,46.7879551,29.6174944,29.24041944,76.61862712,14.96708447,38.30349438,60.50212672,79.62432206,20.02618955,41.16846475,30.79501468,23.14849493,35,47,22,89.06797504,-4.860125089,52.90616242,45.5,-28.3,23.9,59.12467159,64.34774981,.334647113,64.53646046,59.57112419,15.81005405,83.86537899,9.734651807,28.84507287,62.67976179,46.85344393,44.1430547,69,42,4,63.29,-1.57,-10.93,60.80716391,14.24838035,35.47388494,71,19,50,80.24737786,6.177663387,89.8361561,50.02693364,15.27916396,28.41625616,64.64196654,-32.96699066,15.06376178,69.42996013,-63.34141873,45.47037759,65.16233986,-38.10625837,17.80580312,65.99477328,57.84676953,58.41607278,86.29688999,-3.729264236,41.15384883,87.35417567,-90.03031816,94.2626699,45.46458652,59.4001396,3.295763722,45.11461029,-7.023603459,1.833969286,56.5,-6.4,-8.4,50,56,27,77.15166732,18.62332645,36.20369066,89.70246521,1.984043565,70.27715189,83.12861951,15.76341486,78.34017563,54.40482992,-8.067382268,-59.01715757,58.85750993,58.33890982,68.17950925,83,10,45,50.53407525,16.5462936,15.37848204,64.23649475,8.160549537,27.4294906,72.26108956,-43.64766801,6.272875551,51.72342761,56.77063947,3.198664524,68.9,19.2,52.1,83.85807669,14.72428355,56.62135419,86,0,33,57.23404287,-61.20534396,14.16646063,43.93,-7.87,-11.44,56.91,18.52,37.43,91.05366463,-7.010262145,79.09664939,59.57865474,-38.61290351,-32.2147712,43.98652244,-7.196851502,.230193766,64.97974973,75.26002017,-4.444870178,58.93939858,-8.110303629,39.43622221,71.7,27.8,76.1,62.0349175,-11.08159572,6.253376734,53.37654843,-21.06957766,16.6207703,69.63809841,-33.79020823,-23.486416,53.42052479,-4.12681934,-9.184786902,87.3138045,-.351852375,34.38429621,75.20161903,7.287620458,81.67250936,73.61056564,-113.401396,81.08933579,62.52633001,86.14416416,74.80408729,67,44,20,81.34803656,-3.435603965,40.35966459,49.64147861,36.97098643,-6.594034486,51.4,48.3,43.2,55.13513644,11.66220385,-1.10105595,56.80160307,-32.07060543,15.52798454,66.41413535,16.391079,56.18119245,45.0424092,-7.021705104,1.834020785,70.42602593,53.71988999,77.97251878,66.07702304,-85.63709707,27.02845384,44.00867469,-16.86996926,8.625377483,71.59692279,-16.03820631,12.70526172,77.85404453,16.2778455,87.22047577,71.59710172,36.82409743,8.01808902,74.03865492,38.49696568,48.03366579,21.74053962,37.50918165,22.60955923,39,-26,10,66.29528927,20.72117373,53.7339033,68.36622479,53.37618158,45.28388159,89.31624092,-13.26644924,73.10923968,80.55469963,-18.23504372,-16.08503288,80.1,17.8,60.1,93.46391037,-42.24658203,83.85284112,55.24363345,45.2944907,4.764521553,20.23930236,42.07545226,30.87295993,50.08249189,8.704607934,33.64969888,83.04743607,13.64986603,90.84437973,66.64418217,44.91379932,17.71310948,45,-16,-43,43.81843435,33.2025163,40.1313272,68,-30,32,47.12036621,58.82663075,30.73585853,51.48743954,4.992282328,21.94357217,63.13114402,-24.99887564,13.34363651,46,57,31,56.48499616,53.93452241,55.53413355,74.53557947,2.719088466,82.33239107,36.77473165,-18.69394606,-27.74248319,47.33875057,-43.56478114,27.43186614,67.52110472,62.35802858,74.92689306,68.91401959,60.1268179,62.10925319,78.76492462,34.67605934,68.4600667,43.93333846,-12.26397994,4.282805595,53.63315267,77.58943837,32.6618631,78.22003044,36.65026836,4.501891995,54.13409539,-8.154860956,50.35456882,71.59713991,33.02909294,25.8432358,89.84384209,-1.61431524,59.95213154,64.68307211,-23.94841046,7.839563673,58.56418961,25.26233537,27.97959956,46.57536321,-17.68875564,22.51814603,77.49146811,-29.30565919,7.249308928,88.23743454,3.801922152,58.90794981,41.00305643,37.07417753,28.63431602,87.28762391,4.679525976,85.36430819,58,-38,-5,48.01,57.5,46.43,47.96360684,24.40996433,60.21767665,73.09484564,73.6391129,-16.71321155,58.96321541,6.911959911,12.11793389,58.26216054,2.378637527,9.152916216,49.22561355,20.02207033,26.65039502,61.44,-7.07,-18.82,62,-3,15,49.61233438,4.26868861,.244909038,64.75422374,50.60979346,-4.83188294,50.34,30.15,9.64,57.15447835,-18.46453226,-36.66880997,68.599177,56.9718273,37.85881273,66.9981567,36.83173788,57.66845305,56.05672379,51.42729502,25.19102192,62.42721825,-54.32352123,18.87072868,44.94026835,36.90638895,38.04699533,64.6,14.4,57.4,81.7466403,20.00145024,84.77185627,62.34,-14.95,29.25,55.28700922,-12.57069975,4.507458308,71.83207143,-44.5554174,39.76299935,43,-34,-1,79.89549273,3.561758563,88.37627321,57.70805093,59.51609456,17.51537913,46.16536978,39.36346885,27.78929859,34.3,28.2,29.4,80.9636998,27.0247196,40.62762501,82.10887346,13.4468611,69.95649719,37,46,-21,49.14717495,10.2432188,29.08495438,50,-6,4,56.5,-20.8,-33.4,44.2,54.8,35.8,53.51343175,-13.34652339,-48.70335894,95.42422135,-16.69540938,95.24500042,75.6244341,41.06356036,6.225973355,52.99609272,-1.452005314,27.33638653,63.66935805,70.01851516,52.81176392,63.05131531,22.14200771,42.96596445,47.49366707,29.80127343,5.391854218,86.28533753,8.453202825,65.71897516,63,-1,-6,60.5,9.6,39.4,53.95013308,-23.15386487,-4.293634689,35.77730667,24.96676311,18.88848296,62.56,.88,1.31,64.40972844,68.90575656,50.83091161,29.54387514,28.95339094,26.21601158,56.32930003,52.52722045,17.28203992,42,-11,5,39.67646664,51.10452868,52.65212812,61.91925826,12.3758952,-13.06401579,57.43039893,85.20961792,70.64865444,86.58677526,-89.20786848,88.13479687,79,1,73,72.72405188,52.40208485,76.88168916,67.48704819,-24.75474369,20.5833587,50.03550521,-3.699197817,3.44213416,81.20089346,3.688836702,38.48558415,58.44719814,81.07032732,62.92131907,63.82898828,-35.31709505,-.593949674,40,-43,0,56.54859697,-14.91333233,-24.19388135,56.42214702,85.2565336,28.52533145,64,47,16,74.54769818,22.31707273,32.66929102,54,10,23,55.34473255,44.26455581,-13.12572013,81.32957293,12.24463427,40.96379206,56.0947568,76.34795725,-4.501632891,76.03991014,36.31970689,.767469896,66.9961815,34.21279318,60.52016441,59,-4,-1,68,-19,-25,61.47380032,-18.23627124,-28.09401248,71.53859727,-15.05622262,-17.66680114,50.49033309,47.29289141,4.703637249,61.6597596,-9.463301494,.53181972,45.02369041,-10.3978919,3.327610473,56,-8,2,58.38227521,75.74340095,9.216043346,42.02309209,-62.63855662,18.77676132,61,49,37,62.02719644,62.8309418,59.32339079,62.26552521,1.916945816,-11.9649457,79.5590268,-26.62796093,41.02762612,61.92259358,-17.55822076,3.012139583,65.28036851,16.38276242,-56.50848416,66.14050204,53.095283,6.312918214,61,13.5,-30.5,71.1,-14.9,-23,35.78336972,45.25846231,37.44378817,74.83023416,27.14447034,78.98850158,81.33434851,-18.16940048,42.01295182,70.56191443,-8.963975149,18.64017249,54.15998883,-2.896944515,18.55287266,73.58394702,-27.2367791,36.27058801,49.14074775,-21.03522485,-40.89104385,53.5530178,6.104809883,-42.5551007,66.71720721,52.73258288,5.40625454,72.87444694,27.14007192,21.17105374,62.36836729,-5.913590532,10.45028081,64.77937434,62.91729174,66.34316254,77.229505,15.28872384,87.20301789,80.96991104,1.77070582,89.16931678,27,-111,-7,37.61041595,38.18511671,29.49761017,71.22834525,-45.25004222,-22.66992455,72.65499922,-8.335626504,-26.342745,46.93562073,46.85985272,27.63227122,54.23,-5.94,5.5,46.27308686,47.42235117,-9.841129464,74,-25,-7,56.03931069,39.677439,9.114472642,63.26750284,-11.74953708,-14.56042207,57,17,18,73.51696682,49.41472996,82.25953674,52.32688666,-6.619088899,-2.898908997,86.96967209,4.574538698,94.26149506,89.130173,4.277401816,40.40361633,64.59234177,-4.749987952,14.44863916,51.54314144,41.93818057,-7.970715009,70.35057986,-11.04939442,-18.31621159,54.04966454,41.22941472,-8.246273883,40.02739415,49.46497099,7.050192037,75.52125052,-14.74935255,-.056009204,53,42,-1,55.8,7.7,-10.1,77.78387216,30.8905217,76.85173795,74.09167271,-1.814036235,83.27792722,60.21282458,-63.20792683,-8.260467749,63.70140212,1.343322676,44.82560251,61.005973,32.5976352,69.91695319,62.84672616,11.4890182,71.94984418,62.72758054,-49.58978743,-26.59701391,60.65990979,19.63192092,35.31725303,62,22,19,70,-24,-22,38,-41,-7,46,.2,-22.4,58.11,-9.79,-12.57,63,-35,3,65.33889433,30.38620562,61.39166783,60,7,-18,46.31421477,69.87487083,53.34078126,47,-12,18,82.01202523,17.48309005,91.76177162,43,55,23,70.49469429,-18.36352526,11.39800072,45.31681632,-9.185912584,-43.52324253,46,-5,-30,50.27225772,41.80858666,19.78969415,50.577811,-7.171917962,1.832378167,46.98192572,57.53201428,42.98944834,64.02799026,9.667856801,63.02717071,83.30275329,-137.73554,90.43657187,76.10496083,-5.091590171,-25.04303247,65.91698363,49.79755706,-5.96822564,53.21495669,-39.90646501,-26.54291072,44,-8,0,77.00166041,36.63781173,13.50217978,76,13,42,49.11870458,-11.29773778,-12.79918987,50,-5,-4,55.11479314,-7.373097845,1.89656192,74.00805438,-20.33928369,-11.54556974,79.91768864,2.204066449,83.15673103,86.88823754,-89.33688933,30.97020185,51.34371223,3.944409038,6.787322099,81.34813274,36.3543706,19.71118763,66.76870989,58.08794833,53.19040198,42.45688528,-11.93573066,13.77177667,57.89592077,81.6158943,66.5720832,61.64122375,49.77444247,5.768513251,59.30195741,79.86013877,56.06805694,63.25197335,-4.442330978,2.711943771,57.77128982,-34.4398303,-31.45616027,50.62448372,51.59473193,23.0482996,66.14816004,-21.32454815,-11.20656774,55.98624946,-36.12427478,25.04437937,52.05,28.94,32.45,45.0219634,-13.91343528,5.064869324,49.13437383,49.87249775,49.16078064,63.90307229,.612714382,18.92441008,54.08218036,-7.174044427,-3.791219994,55.07931332,8.35934627,19.53607237,66.86476938,-3.522442063,3.525614125,49,26,28,64.01999988,60.6484465,16.07998243,63.67462673,49.41319879,-10.69762515,65.7,-8.7,51.9,42.57416539,33.37204433,10.82479699,62.03412919,76.0665595,28.54783904,50,-12,6,68.07640351,-10.57692869,-8.998925526,87.72517806,-.400304252,69.41218156,64.60084251,49.35331817,12.39886457,74.96641522,42.24306478,22.07906219,67.21856408,33.92018061,59.53375239,45.9857687,1.803840638,34.18948952,24.08323776,38.16961282,20.3105263,45.68157013,-4.33779261,-26.97186956,84.47125619,-4.868371738,48.69982592,80.6,12.5,34,48,17,17,60,54,2,69.23406529,29.79392436,47.95145697,60.3668845,8.077269971,29.82236827,56.69777228,1.426169078,25.76731853,75.80918118,-1.769362501,48.53493756,77.19190992,38.59147219,11.50330656,74.05461375,29.46806016,21.88260536,45.07474318,61.5979264,42.50535189,43.88472857,49.4860357,29.01521231,39,-15,-1,41.17305166,-21.56004289,16.68474086,76.51835035,29.96034808,32.26211704,56.4,16.1,14.2,62.69452412,55.2666064,67.38630287,47.01130229,-12.3051649,-17.32744435,71.59708987,19.81473299,26.84113233,50.43962269,-11.9573378,2.097317224,60.80452891,77.11925319,65.44680118,69.04859535,-35.24403982,11.86002346,59.19,40.14,12.21,86,-3,54,30.73294835,50.25950286,32.4807413,56.18803313,1.745283489,40.84557828,81.33513087,23.83344854,58.22792999,51,-12,-32,47.12151109,9.454628314,54.09803996,55.71900279,59.06456442,24.54723428,72,-16,-5,51.54835686,38.29957659,50.28736903,48.29863797,11.96769799,27.22889662,48.69,28.08,27.62,55.1,-4.6,28.1,48,-2,-7,71.55267158,14.09995759,67.53692867,53.47332746,-58.62965874,14.86008176,74.44955799,24.87447929,67.24832456,58,-31,-22,66,17,44,50.69275503,64.37043589,63.079368,59.70100475,-52.56531317,39.82016883,68.64588013,53.14206475,13.7650764,75.18304156,-20.59042309,16.96255447,72,30,3,46.54071269,-6.98929493,-3.521909172,33.85117767,41.46406941,1.635465363,51,-1,-6,51.54119638,2.278500269,49.89051666,67,23,28,57.81194447,-8.201786459,-.269609167,86.22441055,5.476817933,64.78202394,71,-23,2,60,46,1,61.6566488,1.596613768,48.65944777,87.35010189,8.051742095,50.63071635,72.22036669,16.58993533,39.038978,86.42844074,-15.62242695,41.91276909,74.97533446,28.64642311,79.87311926,67.6433214,39.88286474,34.25320243,83.4994017,17.89818868,90.71739242,61.59460516,-13.14076463,3.739270028,76.52822625,-17.83377247,7.52702388,50.60375757,-44.14946092,-19.78341615,30.93683862,43.36546659,44.29222781,76.51098723,-62.24937895,-11.85536165,38.09435322,40.12650064,13.15876339,76.26570055,40.94295717,4.347933363,62.7023093,-35.77388394,.521889871,53.05748252,60.15122448,14.20573713,51.07661823,32.09126178,33.99224893,65.24908842,-70.56974641,72.7819552,63.06766318,75.90379954,7.783494108,75,7,28,37.8388719,-37.53217049,-7.785228849,76.49105756,8.905422477,66.57059757,38.86723558,29.99609597,43.8850741,75.54566818,24.99619907,38.58466806,50.88176566,-45.32748535,60.66851349,57.39992376,-4.806351299,3.435586078,70,36,37,58.24504576,-13.94750698,-2.077119964,72.3558449,49.79606178,6.440125628,83.75614396,-131.2103036,90.92052682,60.91928316,-7.569574896,-17.68994922,38,44,2,58.42769996,58.04206315,4.776980703,71.91850206,-11.49343543,-11.85318912,70.66848556,94.53395729,-47.42171293,81.69317082,-1.292551861,49.32707154,70.61727714,37.13953971,-7.044442592,48.68463989,80.30772665,-48.93265626,33.67421483,59.0598017,-22.90273824,64.1299406,33.86681649,-8.872671294,47,27,27,75.08554116,4.325065873,32.5020559,43.56753146,48.64388335,-3.655970478,45.86812829,55.07690353,38.26684438,41.45953823,66.95622273,42.87386131,72.31831489,-15.25677766,20.06185161,58.03,-.84,16.2,24.90397955,40.83031873,7.288090782,81.34807966,-5.860624262,69.88777243,37.91463086,58.17933725,-16.03984543,41.21711285,39.57019847,2.986244887,74,39,25,53,8,12,56.75101523,-21.48738297,-49.26384335,67.36638545,73.48160053,44.01641774,61.97961253,75.88925728,30.34444412,76.4,-36.8,5.5,58.07440632,-18.83611333,-5.421130805,82,12,39,85.07238163,-106.5273138,18.28376078,60.17141751,-9.890408857,41.71604908,81.34788326,-28.70298556,13.76075547,51.53078109,53.87518087,-2.041433178,44.18418811,51.07745064,-20.54626394,50.2837447,-1.919760129,-15.20723228,75.19025289,38.52569345,37.63015142,62.00293367,41.40532865,-17.53341936,74.09596901,47.000922,11.43828272,45.59649203,30.76476238,36.22761255,70.17746908,35.41384524,44.61547015,81.81845962,-19.4154598,.251355618,53.13508607,2.990958023,5.693745072,55,-35,-20,65.93418683,14.08345978,42.65004923,43.68166082,44.81849887,-33.25387497,56.13798793,24.43278007,.425863899,41.97812003,-6.694868703,-24.1267113,75,36,35,61.6812588,2.049388343,11.10549153,64.59972945,50.94280274,-8.906329787,61.68137125,19.9315651,27.47170875,87,-4,66,72.38258206,23.05915293,62.08383904,74.34373812,-37.69411721,24.30746507,84.92480304,17.11593936,69.53056386,38.00397145,59.22149787,28.23094133,42,44,31,65.94500643,-16.01617001,27.74415673,65,-31,-1,78.69663691,15.72166368,41.86127432,67,44,21,66.93939967,36.08724954,8.633346284,49.94181324,66.49536908,22.86275651,37.48,49.14,26.2,70.5,32.8,16,73.5,-19.4,71.8,74.87369688,34.38263099,53.3509252,56.78828766,-68.54655664,18.22735081,46,-17,-15,64,49,-6,83.82859372,-6.637501825,80.78357917,75.9,-27.8,13.5,54.05324745,-.538176052,8.994243705,64.05278203,55.74616174,35.79593874,78.63477982,-25.48079851,36.28042346,51.10246728,-21.37437928,-40.06769454,80.48121658,11.89189654,31.78636416,31.79281839,54.02800207,33.22452201,79.04410166,-26.91315859,32.84948387,71.40555336,61.75863169,-3.847346507,61.68151311,50.68631505,32.2229387,64.14139573,-40.79767351,58.48845744,53.32,22.93,6.16,80,3,44,67,-8,-13,75,-28,4,71.59707527,44.77461186,-7.753099651,48,-24,14,60.25610561,71.94831342,62.32758115,51.53613064,24.6247233,.756788037,42.54160394,44.63568689,23.30265013,56.5,-28.8,14.8,54.18345023,3.778207436,-11.82775868,76.4,-108.9,-25.2,22.56146378,34.71286697,23.67119302,43.87367836,-23.43493925,13.78955968,70.66108135,-48.61675675,-13.9646508,52.21404383,-9.115804434,52.36985545,59.3,19.87,31.7,58.63465462,30.54218053,12.39337565,53.04342417,-9.74115606,35.65646753,71.5970972,7.977240227,51.23051253,40.94811591,-40.92702087,-14.21047913,69.1,41.3,52.4,44.12366045,14.55207499,48.56483843,80,-5,58,49.11122777,58.22702419,3.027923688,57,-17,-34,44.32906044,46.00888729,-33.977576,54.12438906,53.18274192,42.28929596,46,40,-8,35.4,38,18.8,94.88928882,4.902141391,32.06415627,72.61208962,-13.4906545,18.16299199,57.08,-7.13,-20.54,61.89905283,25.13118985,39.58059723,77.5,9.5,49.9,39.90169253,42.93766633,34.74405639,47.66618935,53.99504279,3.369367695,27.95922645,49.07621252,37.27286293,54.38094092,-11.22463922,-18.549547,42,-5,-31,64.14985627,31.22056362,57.42026822,75.97755419,17.00461456,71.28798751,63.74976219,56.6917329,13.57993358,78.63954589,20.67549672,88.69761125,61,39,44,69.34725175,31.90803972,5.192372631,57.5876019,84.64102288,42.24840082,85.55959297,11.45482699,94.14874553,68.82667692,69.86832179,38.33699194,35.2,43.1,5.7,41.17798414,27.2238887,28.88037903,16.87216008,38.17187173,24.72593128,43.95651243,47.77988083,-32.09325939,86.29357812,-5.202269462,55.96706939,56.1511058,7.68276726,-10.78905492,74.54122088,3.095758589,38.71435326,57,11,18,77.38652256,16.34413885,73.88750864,42.6,-18.5,-27.3,41.89120688,-26.89647391,1.288594916,61.35577997,10.68630691,-5.598045064,44,55,30,74.56194755,-25.4997007,33.78227023,34.59324028,40.38710823,48.12252935,55.29290424,1.578266056,33.83191573,48,52,-11,80.09469466,28.18222063,34.79364987,74.56285817,-20.87219718,17.16674308,66.76472379,-62.08173262,12.65190563,61.86984633,88.9855282,65.94623384,66,28,42,75,19,37,48.93106821,2.902382049,55.8957897,53.27228718,-7.460741729,1.942591267,38.32055205,61.5897878,21.57094899,70.41428476,57.42887469,70.34918176,61.86764169,-69.94667296,64.32159505,60.4,-14.1,-12.4,71.55205865,-97.40312053,41.97063635,55,-22,-18,81.31346077,32.00036509,16.07187346,54.30056638,9.211380141,23.00658729,74,-6,40,56.16101872,-20.96541928,16.63242723,61.68117208,-7.231519053,-3.99463923,87.9,5.3,37.5,71.58316435,-51.09692881,45.4172776,43.73632022,-16.98915718,55.32888683,68.04403878,-60.38322153,14.59353165,63.22646497,.587610366,-1.513490711,53.5098481,9.472388193,30.09679231,64.8,25.1,59.5,51.22318624,7.595082359,18.96144895,54.45442434,-10.38241944,-8.007522972,55.89735693,83.77372346,52.18868312,45.07759446,48.64267803,10.42647381,30.72067935,50.72092974,28.88752935,88.30107721,-70.04478848,-10.08858361,72.4337298,-7.851907942,-5.315073587,76.52430446,-28.52068633,13.50776171,57.40812159,35.52239755,50.54927644,72,35.4,54.8,40.37334634,63.62704498,-3.308982604,50.33430705,55.36108032,23.22483818,59.8250453,83.15833338,22.83082627,66,-1,10,58.61464101,86.70131051,67.66846018,56.6717171,25.00184531,38.78404277,54.2204915,-15.18406976,1.588005036,60.42043623,-17.32226102,50.8087061,66.6,-16.8,-30.6,70.3,18.9,52.4,47.47,1.16,1.24,76.73234333,3.16710075,67.19330785,36.7,36.7,1.8,64,-5,-17,56,-32,32,52.18936068,-27.73735315,-37.72000541,67.95601159,-3.995957848,-8.290447963,53.56403869,33.71402352,2.173675805,72.87898387,-3.009775885,81.38200646,66,-37,29,49.80209774,-1.091200381,26.64131462,60.4,3.1,10.6,53.78804819,.243046891,-.586956708,41.46007849,63.73718081,39.17104894,44.15701902,-1.175046206,-33.74056901,73,16,85,63.17128171,49.55619892,-5.541354267,92,-9,62,82.21972797,16.09191128,91.006517,52,5,50,41.8,40.5,32,85.58918472,.823145092,70.60948476,45.83229627,-15.84402558,-43.29540603,81.32276633,22.34589151,32.54551212,89.02927844,-62.51462529,-18.43881807,48.1363788,41.41599456,45.40132644,58.82530674,60.25263892,56.88902223,88.75173558,-72.37635664,29.55764768,38,40.1,22.6,61.1321631,78.0273845,66.2790373,65.05744543,53.20029478,54.89706419,55.08086766,-32.31107435,-35.39312103,51,5,3,43,-31,3,70.42102419,48.04532463,45.69482259,83.90561318,3.696480512,91.27721995,68,28,19,47,-2,-29,61.68116073,-3.896445188,-9.338153774,53.92750678,49.59128172,20.11690722,66.11044911,-2.269017665,27.66112595,39.43533413,81.62861397,-99.40055063,51.30817304,73.75023325,55.5815316,49,-1,0,61.84378814,-19.00410344,-5.55761807,32.5036352,-44.85094669,24.61713058,56,-23,-9,46.69662227,31.18756134,19.04398107,56,0,-26,82.20915263,-19.72892927,1.468673154,53.89138592,-35.2512587,14.51002246,63.58981646,23.50312966,54.80610761,46.05073493,-8.414399651,-4.080426835,70.88816715,-7.568900985,3.847009888,87.58030239,-87.62122363,88.40767426,89.2,-3.7,49,51.29605929,-4.870723318,-1.651916893,96.01698023,-26.78599028,80.17207658,45.04257777,10.3129868,37.17613384,65.81369838,-16.53071148,45.15119212,37.84294828,32.3702714,11.29605226,89.82111633,-1.776603282,60.9885057,63.22293757,-37.97344743,63.66466146,42.06119909,63.32696659,22.75339291,71.55488377,-12.28512297,-4.062826515,79.01745397,2.444913722,31.86268136,71.05220254,27.20960182,76.38700566,51.57741738,55.90789295,14.25117331,83.02269344,-45.05979533,-14.18483051,82.84722749,-26.72982945,5.26375875,75.53014384,13.9439874,32.64200595,75.54970342,-29.24331756,7.224022908,77.72942377,-.563350145,67.36003778,75.78838053,-19.2794462,-2.398271838,54.58372582,5.99229521,-41.48440569,49.45182402,29.14677564,49.70961686,66.24395762,-2.690419988,-23.70135405,65.55063992,-78.24966437,36.65878953,61.68129537,28.56913005,-6.287552826,63.15846063,78.68274715,7.334500919,61.14288252,29.77769311,53.4061371,41.2169516,46.90013556,-34.70787651,66,45,42,85.4638214,11.71466185,94.38364405,47,-42,9,41,-9,-3,60.5,-19.8,4.1,81.34812429,8.99126889,64.49265043,70.25735297,-24.1285854,-3.600872799,22.9301559,42.95796206,21.946282,71.57412344,32.36102432,36.34594402,73.99383257,-13.3189403,-30.88472438,32,40,16,75.21773375,-31.78159007,44.0224049,64.79,-12.25,-2.04,58.1,53.1,55.9,68.64073408,-4.421381617,-30.62534165,52.58529468,68.14754224,47.32937331,46.46694791,.045435184,-28.98161241,37.50502411,27.61618328,40.48059763,61.57263879,40.24235733,58.58415566,65.61128409,59.09807278,28.672999,89,1,43,82.32881247,10.18265987,79.06977159,66.86346316,-71.9946089,67.39172825,57.62560917,-79.06641064,16.31733969,74.6,9.5,50.9,33.98406471,49.11321343,25.3098729,75.4963152,9.366732446,56.67397717,77.67149648,-24.1357791,8.458185052,47,-8,-8,86.99902493,6.204486577,95.31505217,48.76886432,-10.63418788,-9.459653843,33.86700331,54.77541379,-14.42501585,85.14569118,-112.8988333,82.96545751,84.85020037,-4.361462983,43.09413577,52,-10,-23,33.63326125,-35.16620242,23.97951272,79.91182917,-28.47385857,-13.84207708,87,4,34,38,41,12,86.66555715,-96.58056606,88.86494302,78.63702961,-.290839045,87.63392521,85.88870369,-15.57286436,52.78677525,69.47124284,49.3581856,49.11013862,64.23591606,-3.723594151,-9.506771485,56.53068885,51.28661709,31.98816931,35.31572391,57.95605192,-13.45163976,77.42391328,-101.8085499,27.08947656,36.71540859,62.13497845,-19.96280549,28.14671616,50.95485466,37.54547309,38.40190564,-30.74376509,-5.882101364,78.25710315,8.3642768,79.02140972,66.2574332,-4.255961504,39.93250722,46.77916808,69.53937019,51.81863164,51.57708362,-5.14628609,-8.190715296,86,-2,55,54.68851836,-28.13405517,14.26953297,62.83672723,50.58714097,49.76093519,62.14219187,87.41731749,75.43028014,63.34972859,71.09574956,27.93565887,85.50405667,8.963185217,93.11145185,33.39559933,35.15159466,4.388485506,63.45557255,83.70192978,65.17482946,41,-23,6,85.7545137,-3.322863921,71.26279049,46,-13,-40,51.78452915,-73.89101811,24.5176104,63.61015229,43.90539673,39.91690229,71.58166833,-34.61783444,47.19695952,66.95736108,-32.03417012,-25.50213592,71.41676438,16.19262063,77.77465766,54.06657942,39.92430893,-15.82539008,54.04255333,36.92810845,30.54761258,61.62264019,-12.85172553,-3.973384802,67.61052668,55.66479375,6.925807088,59.21989426,-7.385450102,-11.44759005,71,-16,42,84.08175299,-123.3483812,50.80868025,71.59706053,-4.322826901,55.30496885,81.34816268,23.18472437,55.1385863,77.47500636,33.76248351,61.9943099,56.09172812,53.52935198,20.13164125,76.17241008,42.10695676,47.20972543,46.46610141,29.90430565,5.38619712,60.71326443,-60.99815891,13.74083891,45.45359856,-68.79985536,16.85937371,72.9821351,46.78639324,47.47055524,58.99987574,-6.257522633,.971691765,35.1477539,27.13630335,17.8003293,61.39731327,-5.39116023,-2.591847461,63.76562628,56.42489617,17.90020346,61.68119041,7.03170416,-11.29593615,67.19126541,54.26645729,60.08978261,54.90538172,1.469019571,33.54201757,46.13939833,-8.461926784,-46.37561925,68.71267792,59.07443874,9.132670298,52.4568526,-7.163314765,-3.7478828,61.7482248,15.93603279,42.92314177,56.09157079,6.024043661,-42.43121391,67.15415453,67.43545789,76.98032463,91.08190696,5.810484712,38.38816172,48.69422332,-10.41826268,-13.37602537,53.17048687,-38.74628317,13.85027388,51.5115253,51.792829,5.521279965,45.01088192,-6.339896308,-43.41472596,64.59324171,45.92720292,69.61988972,54.25429298,56.85799527,20.63654374,55.5,-23.7,26,82,-3,65,81.91978656,-29.62231773,5.381601779,87.29445952,5.641463328,62.48707838,49.42512222,-33.09846608,.438840537,55.68903889,25.34520808,23.76873893,66,-9,18,83.39698221,-135.8451286,82.70268266,56.49223399,59.7188927,-6.918602683,36.17158729,-41.56285348,16.15097252,64.81253511,-22.04683254,-27.20144843,48.90496644,68.20140283,39.31544406,61.68129743,1.308941686,25.5177755,50.78863482,8.971496756,-22.40601537,54.24080104,-3.944078185,60.01611057,63,36,1,59.17672506,-22.64587706,24.12612922,58,52,16,61.65861751,-11.5950034,8.45739783,48.65915802,54.7174443,21.5055544,44,-30,27,52.3,52.1,31.5,43,-7,-14,40.46080817,65.5535257,54.59401237,78.35920581,30.83826418,20.1376614,68.09930705,-7.554734337,31.72783283,53.08193082,40.46004513,-3.687304887,39.39527922,51.73904421,32.83801039,74.10889403,-61.55292307,-13.06567568,55.40071041,-41.52364194,10.21783016,65.5,-24.4,36.3,79.56127553,-35.16548045,78.13797573,62.08764,40.88547487,49.6742931,51,24,28,64.43,54.22,53.91,54.41405685,21.924874,31.50320907,73,-8,-18,64.48,54.19,51,67.77042047,104.6134404,-52.12559086,54.4240305,90.44399659,-62.8867518,53.84780825,-36.12602594,3.499540084,65.6,-39.1,-2,64.19335481,-.379229789,-31.0086512,75.9,-25.2,-12.5,61.68118597,-7.786445519,-.011086859,76.5166681,-4.752268989,55.97050892,64.25356064,83.62605104,42.9198618,81.08095066,7.895486032,65.5121587,43,-9,38,50.19194015,-19.78513237,-28.95053792,83.8372644,13.86534322,93.23062463,69.09561046,63.34527918,32.60782044,65.29634,48.89943811,19.96184415,86.2982322,-11.58780095,39.47391434,71.22396883,-36.27347534,77.6616261,34,-22,-29,81.41286973,-1.104084522,55.06782854,44.09575309,13.00283316,44.0787494,53.32551553,4.069284428,-22.61680615,45.85322425,69.70340123,37.17684355,71.1,-22.6,-15.4,63.56340485,-48.01563828,-29.27561671,55.5,-6.4,-6.2,43,45,23,49.25226224,44.45654322,16.96422955,58.58,16.06,15.82,82.79796194,6.685060179,44.9663274,58.9,41.1,-.7,53.10130754,38.30890936,3.464393631,70,35,54,27.54159801,33.79735398,27.28263655,56.52907405,53.86601655,-9.886061,72.71034131,42.87668961,47.04630893,62.74209424,73.22428013,14.0213134,65.33049361,-18.83607383,15.03646351,72.66525736,-18.15938005,-19.17588994,55.49293113,64.75741984,49.79371586,84.26219871,12.71006434,92.16362435,49.9287477,4.453050821,35.97278233,84.20910496,-101.1930289,39.81045351,49.0866066,72.55296939,37.73853709,44.77078056,-63.58465303,18.97931991,51,-1,-35,57,54,60,87.90464598,-63.79727202,93.47910604,55.21146139,72.1756376,9.359795575,76.52677155,-25.53126959,21.56127115,54.6709994,80.0185184,51.4344142,41.16785074,24.86531729,11.25357237,51.5771861,4.217998634,10.37360986,55.66044196,10.88703177,2.758325617,59,10,24,51.56490043,51.62310765,-22.21196952,59.40427579,-95.95528783,68.75887719,86.75589647,-89.01192473,19.46418864,61.47229379,78.391981,74.29067299,54.10901605,-29.96286161,24.46710918,64.09564186,47.68835346,28.94099996,63.26744849,-34.93072834,-4.706294648,53.18317615,-7.653920297,-.620788039,68.89364762,-54.60993274,-.455460778,44.7,-34.8,-3.7,46.05344829,9.469381352,32.65132979,61.07086232,79.14220909,67.92271013,71.38200718,54.94292598,7.310442967,72.64837623,15.0087693,82.13809105,68.92866264,54.22767312,55.57550337,46.50740638,20.30616623,28.32262371,57.5597427,-39.9052715,4.719720358,75.47786466,20.68996334,62.23867068,48.08419017,62.46550259,14.03069318,55.8,-33.7,28.2,60,-13,20,27.2664364,33.16383458,29.10129394,44.45530899,49.79460632,27.32247422,61,-31,-4,39.92797031,-15.16793785,-38.23674743,83.58959597,-86.03856024,86.39367265,34.42723249,49.32024536,41.44508012,85.4196245,-11.96723973,75.11637585,90.48302855,-6.801679989,74.85872526,65.93165913,-2.425037032,43.67212236,46.12975665,46.33444026,21.0456135,61.4437045,75.74252116,68.98942073,70.92049232,9.938218575,62.30541283,60.26352293,45.99007665,-5.324706141,63.44641966,-62.05619295,-4.449844017,60,24,28,71.56626429,1.184966935,62.81944157,62.48103294,13.33130562,64.95931055,77,22,75,50,56,22,53.75962497,73.76091424,63.13946929,51.57728969,16.89860797,32.23020981,42.19248389,-62.82609947,28.54338878,66.65575523,45.15782047,-8.011298479,56.41021081,-8.257450556,-8.60862777,39.0567951,-37.48530438,-8.56524363,51.89390824,-11.17436303,6.910817954,58.68036561,46.96217532,61.25905176,66.01377385,69.33126761,74.83470725,42.41515123,-28.38160988,19.77313088,90.71540032,-16.43072125,40.33505104,52.20015406,-25.3889951,27.30845665,72.36174476,-42.00812679,55.88372953,60.77319665,77.72193199,42.39854508,50.10717599,-8.884252709,-16.13647205,53.2,5.3,-11.5,71.5636286,32.04869076,10.40746518,46,44,-24,57,56,49,90.04046663,2.194236637,39.49455681,71.96277283,-25.50531162,40.34596106,89.15730398,-5.276151699,40.92227201,55,-2,-29,53.71192512,59.85501836,-2.988331113,70.12424022,37.16861762,3.265115761,39.55379209,-34.94121559,25.93900447,54.10354989,26.64399656,27.70342209,61.68154766,60.69671961,26.72013666,63.41692446,35.68079556,50.76101438,75,31,35,54.13729657,1.793211668,47.29634728,84.42397847,-17.49159206,47.96899803,61,-10,22,50.48161552,-4.896272696,-1.648988554,59,16,19,53.67987668,58.45151738,24.18634449,69.66463761,-15.87582996,3.08454883,68.2901769,-7.496763627,-23.29406095,43.45673627,16.59723951,25.88186465,43.15821257,-6.069993457,14.85534781,65,-13,-19,74.07263347,-28.84811179,24.46280942,43.94783853,70.02503959,35.93082024,61.18540603,-70.62084485,7.148444155,41,-11,5,64.7874629,-67.12906701,11.4348366,65,-1,-4,82.38950057,-72.65876411,62.61586907,59.17823869,79.48714082,65.04880432,58.42595765,79.86772782,23.24476287,43.94457369,-4.354096317,-28.53419588,58.3,43,24.6,55,-38,3,64.0796225,50.58793571,12.75954922,73.05041017,46.82660745,84.1045752,45.72879276,-1.093317151,-40.43431891,51.58786247,76.57632796,49.8513645,83.12317235,-.069441896,62.72793647,43.0814406,60.91313512,29.12076293,52.67356632,75.1438902,62.04182296,54,57,16,50.65961987,-19.05958227,-3.975800612,65.47531393,4.101282083,-11.68598221,61.68114658,-28.77056628,7.116452127,51.54345514,47.04518128,-18.27073224,77,22,55,69.88513626,55.58360439,22.85616902,41.21701955,-6.618522363,41.22189127,33.29949582,-23.88453299,-5.215350583,79.99324623,-4.657055621,56.42542819,56.07252811,34.0476413,25.04868112,61.61666359,90.41491792,59.17105943,62.5,7,-33.2,65.93901448,74.55646641,76.15546682,32.01929469,32.35005169,34.44998463,80.13853377,.337267168,71.78633366,71.59714823,45.1398701,11.27756318,77.9,11.7,76,51.57734923,33.82739319,27.47476667,79.72088667,-68.21814708,11.74824482,82.05714201,21.86666579,64.32274757,46.34858541,-9.524807724,-46.63166426,53.58749804,-59.28194762,3.593811961,51.52098898,-.37609669,-43.55239646,62.00112027,45.05588983,44.23042866,70.41464088,42.70003691,48.55468837,45,-28,-32,60.6896336,68.24995779,49.89841747,56.13529215,-77.50237791,21.27364342,86.10362475,13.77020139,41.12173044,42.96617915,59.41092363,26.86339483,54.00611541,-31.56793664,28.57244584,74.32685723,-20.25569055,21.28588389,57.00957796,-69.14035728,43.45540405,41.08321722,-22.54577435,1.784907358,38,25,14,64.20381489,.434740477,-24.02216433,55.3001264,1.534901327,20.99626507,86.7626294,-12.30816075,76.72846529,68,18,30,51.53267515,34.15072343,2.61527757,53.67473068,-5.216176061,-8.142076095,76.90949332,-58.79902324,35.33875631,76.52851792,28.71676471,80.27094103,63.04547508,-24.03421537,66.41822813,76.25953382,41.24348424,77.4841549,57.67401098,-43.35092473,-25.9373714,43.00312291,64.32753333,50.97277014,58.20867016,49.59526854,60.41743829,61.68135565,44.30937017,-7.950727326,67,8,41,51.53325312,33.1800893,11.88736257,53.58511708,-9.124894744,-13.06062081,63,23,28,74.17165044,-104.2041927,54.40661349,56,-8,-6,63.7405388,-7.100537526,-3.947525963,48.88987268,67.78213379,54.18614181,67.65623959,105.0134064,-52.31130696,73.4481238,47.00474372,78.68207856,67.64735709,51.09773671,53.53964885,72.0593975,-6.513575547,34.48666561,31.46184471,37.17732679,11.11386737,64,-10,3,83.34843331,-1.187094672,39.27616032,57,-39,11,38,51,21,80.4,3.9,89.9,66,-41.6,5.5,61.69969503,89.67138921,64.55878391,76.6421326,10.66678051,37.14018642,71.56915659,43.97752942,59.51038405,68,-8,-10,56.21515635,-88.63877645,53.86942516,64.03266573,-27.14237172,-13.40081099,37.3,46.9,17.9,46.98003721,-15.55197154,2.565480049,73.19570829,-24.24104105,-14.41405768,58,55,28,48.61206878,-.423249671,1.252331039,80.55745437,-29.09366961,19.65417333,41.5708078,43.57844622,42.10232946,39.72191485,26.56668729,32.90971917,56.45713097,-21.36864948,10.02715824,83.8614894,17.70317431,37.54357758,50.92114166,72.25302087,64.49936541,57.88306412,-.267937155,18.58660986,84.86087291,-26.80516006,13.64938122,69.4287241,19.6218525,27.87840907,77.15701011,-68.0389185,10.7394497,67.62519792,47.10597264,44.10321642,35,41.1,17.6,71.50408079,-24.12304146,21.74001512,46.78807674,20.66895499,21.77770698,59.43010038,-6.68288916,26.47677438,73.80070427,-22.22261398,32.19613973,70,-27,-18,67.27,-11.89,66.45,50.67255726,-8.967277092,-10.23333388,64.38554823,-45.24500037,19.88354646,84.12097874,8.954922827,58.28197661,105,64,86,66,-30,13,46.58338066,43.07305185,15.61187696,37.42082419,42.37703232,12.16108714,67.5,-34,49,70.9,-21.9,29.9,60.18439551,85.02752004,13.94692941,75.2796189,1.273903772,76.37534305,68.33951274,-8.393942977,-3.041376005,26.34242247,43.67285486,30.27080097,60.04044275,3.987578535,47.0785095,84.82899135,10.8107776,85.78861735,55.02392337,53.05473431,-4.316776346,59,6,6,67.43151304,-38.88645408,-4.325110241,68.91798017,47.78508837,66.985011,62.30515944,-82.5246725,45.21587565,21.85454597,35.21043013,17.91355552,55.23358262,1.167401315,-6.115401756,61.68125529,33.4116145,-19.35457974,55.42066962,88.92084446,-44.31319208,23.73249546,42.21088092,18.27635337,59.89550413,77.60684564,58.94403309,78.66863376,-1.931341798,47.93806701,46.08293151,-13.95688956,-44.68359116,50.02571866,2.330804997,52.57095706,56.67036058,10.23556351,16.20440434,53.78261626,69.20713241,62.63487702,69,-29,-13,70.33458067,10.58433822,38.66508251,50.69323898,.232268774,-.560927623,53.83133358,82.7080566,16.36222288,50.1,42.8,-16.8,30.90707034,47.77875225,-19.15916971,64.20562658,4.886783709,-32.92346448,71.57626389,.563422787,-23.94214621,70.66,-6.76,-13.43,55,43,36,41.88444214,67.45135306,43.19090652,55.32238125,10.87551923,2.773951963,44.94578234,65.50115794,46.90774866,49.22659738,74.22162022,55.73823223,30.58201862,54.08380882,44.18483298,49.23438611,-11.31716795,-28.64904162,71.21253388,22.70250643,68.71426912,59.84540916,84.35718167,12.79520548,80.2,-6.2,84.7,51.57705746,-28.31319209,3.177094252,54.4,47.6,18.8,66.08328249,58.20766502,53.44702046,71.59688002,-4.744771513,-8.677246875,49.27277794,21.92718202,51.0006298,75,31,70,59,36,-4,77.80250546,31.74606144,16.41965064,63.06397041,-15.23100803,18.27491236,61.68121736,-5.832155352,6.814358314,50.97687247,36.66247232,12.27168202,51.57711027,-7.370921902,.104968463,51.57709638,-7.070824121,-3.659039474,66.00908784,-49.16401945,-26.49672488,51,-7,-37,45.02607288,-10.04262484,3.156933198,56.94654953,51.40199214,51.97241594,52.29289037,73.51161172,57.69689738,71,-7,-6,50.56265518,29.19989616,-6.413584347,70.27335507,60.02098359,79.94804956,66.4996932,6.799616769,38.05888003,74.54626811,27.16197826,44.15809984,56.44724267,73.21399839,-56.72762777,68.68160534,-15.27630647,21.7400025,61.42750084,89.89679444,74.86747135,69.22,-14.49,7.85,64.13459967,41.56827884,9.589241039,40.90312079,45.61372927,7.674368189,39.16728291,36.28375511,34.10050313,76.15347842,40.70994762,86.90819126,52,-12,30,61.6006017,-9.836816059,-30.03424236,53.9380289,2.979859794,5.65919721,36.64035897,43.85962454,35.86305831,80,-20,53,48.63737544,56.94335173,32.85279037,55.4,22,21.1,61.68144851,44.4838469,17.86146302,83.3580436,10.71932736,83.83042856,54.15452202,-12.7066512,9.371809996,72,-7,2,46.01558254,61.86231028,33.9307985,47,44,30,63.57551004,3.438065654,30.10679915,60,23,43,77.15801692,34.62928098,87.55711519,49.9046782,-32.52044139,23.30033918,76.50751126,35.55919481,42.30820374,55,-1,-4,63.50953909,.329930116,47.51219339,65,20,27,65.63083952,-20.26794486,-56.02076581,56.70015564,-68.0639744,2.111093724,39.25791463,28.98800414,33.67503986,39.47841981,33.16193711,11.66665026,86.10296742,6.023376567,38.14816062,55.44261705,9.340038999,6.453886023,60,27,49,60.60201928,80.81365296,39.08869287,52,61,28,91.06744344,-.416547711,47.96747822,67.09686849,-3.158570392,-4.963962753,65.32279815,-.260708768,-30.34705668,76.34655255,-69.63122535,25.26727617,55.14386126,-31.46457443,-12.5256816,48.3390492,74.31193079,1.15776106,60,54,7,36.52516959,-54.36714989,15.19645466,61.67588909,-45.49256094,-4.633001871,45.19567693,57.02198665,40.01289698,86.10026292,7.252213202,51.90583553,60.2429581,-1.67233653,-36.80990844,69.24627281,27.82420624,66.98453729,22.97779286,45.20499823,23.63103838,36.08727378,38.50778053,24.52541519,49,57,11,70.8,-29.2,8,44.75,30.74,11.4,61.17313311,35.53429456,3.34380693,50.96462056,4.137325036,6.205642819,60.8817913,45.75008766,3.566776163,85.42828504,7.099976379,94.6999702,42,-21,-18,50.23561764,-84.21337048,54.4825218,46,-11,24,62.0379955,74.69184803,70.29758352,57,-21,-34,44,60,4,49.63907788,-40.1710677,-.53880983,48,62,42,51,24,39,49.36991983,38.3880657,61.92266342,17.4989276,38.05427515,20.45112719,58.34191823,-11.02233759,-9.226703259,79,15,34,80,-1,74,31.90260945,-25.38891807,-12.48447736,52,21,30,74.03006303,-20.62329357,-7.565615991,65.3876919,38.18666264,48.13984826,78.64914593,11.48638489,62.97453109,71.89175403,-1.0564598,46.60051984,79.2,11.6,73.4,72.84322572,-20.35061741,2.173703399,58.76953755,86.67898631,60.89383757,44.59639125,-27.77156623,.13930555,51.56008662,1.007772938,-17.86137299,46.63343833,-10.20153344,-46.76175609,53.2459479,31.26546222,32.51000807,61.68101328,-7.35947102,-35.30271526,51.05658522,-18.38605832,-39.30612415,48.59313081,-24.99259673,20.11350669,74,-30,-13,54.14867987,-5.903488017,33.95220771,81.34787029,-18.25515106,.833228603,73,-21,-13,96.53107683,-23.95435673,80.83839142,85.26322358,-17.96970024,39.66138217,47,39,39,84.94186291,2.091230233,87.12057252,55.23298939,51.08409075,21.43230938,62.84804382,-11.43112981,-4.552237656,69,36,64,84.04126002,-127.3069438,91.22459755,80.34,.96,83.96,49,41,-3,54.07795847,9.337793109,6.552525968,78,-17,-12,51.65996485,80.58645714,9.202734108,28.02656059,35.57630822,30.8338057,74,33,25,71.55899501,47.20049815,28.738336,41.1205401,-12.83755371,-3.846532813,30.03898648,27.57470323,33.8887624,49,-31,-14,51.53820391,25.0390597,-2.395189677,54.33413896,-27.02669395,-34.82659679,93.81182171,-5.375294196,33.43621121,59,15,28,48.16581088,67.4151332,45.40338087,64,1,2,80.8147298,26.44681181,53.13488243,50.4303546,76.09994042,40.2224842,73.55548764,31.46865431,56.19206855,40,-13,17,68.89695146,51.86065408,75.4063018,44.02204209,36.47014878,46.14680485,60.12703016,46.43941085,39.82403401,52.65505389,10.4950927,4.975090268,46.31839534,-38.96833382,-15.34246554,42.05659093,62.60971747,41.85074181,37.07109009,42.60316659,10.9196778,47,-21,-17,42.71088573,64.65906135,45.18082715,57.6581235,8.294969817,30.30333515,69.7686633,-19.18602494,1.476112866,56,12,11,66.52191114,-14.729075,-33.7982694,23.67607661,34.52066373,18.89169319,40.66436041,56.83579286,42.49218371,41.8562295,33.57461392,33.86264477,55,10,25,76.56578303,38.4373417,4.226251679,55.32269376,3.844340383,-11.7512662,82.38427634,-96.04427151,55.59932314,55.44,29.48,21.97,76.91674958,18.42280579,84.13704337,51.57716873,-1.035635268,10.72470204,63.12459226,-47.51425623,10.19149673,76,38,5,58.70782199,-69.92900535,3.963846405,62,42,-4,29.06527794,48.9835898,42.2497305,74.03904161,-24.80874988,58.96662048,92.3313486,-46.22876398,34.96007835,74.99878683,-66.99592395,22.63615156,48.53541667,-30.76756572,-16.83615494,49.16914047,41.4169353,5.546840726,75,3,53,62.03199755,-81.89812226,47.75815747,55.6036226,57.70957642,44.34565281,77.53816965,-22.25931976,3.712030171,54.18353117,1.970160255,11.32585995,65.73338526,40.98404393,33.56566673,76.05765326,5.656421961,53.47733762,89.06236637,-14.14925916,37.95247011,73.42687427,44.80246226,82.25638021,56.33168032,-22.60425416,-9.335897508,40,40,19,79.30200889,30.38130185,19.26043313,57.03541158,10.67331497,-5.090657604,50.50431255,25.97028114,21.97208192,67.47537225,105.6474093,-52.60554872,75.54859711,-29.15506883,39.3229745,60,52,30,76.87350706,31.05696921,87.29929807,42.13163982,40.94712576,50.31009243,52.29558913,-75.90869194,22.37594701,61.97810491,76.21236206,34.10167364,53.83299891,30.55556922,32.69076385,62,-7,-27,62.98733421,53.2077736,43.87053781,52.31368982,59.22354822,27.58080399,54.15573121,1.587578255,18.27771209,23.44206252,43.08337646,28.64687972,54.11579226,35.27697719,-26.85231861,45,-20,-2,63.4299626,56.09493984,66.03627272,66.39608984,40.24416041,-3.495501422,47.80942031,10.41700648,56.70007897,58,2,9,71.5969489,-21.20454417,27.37835093,37.74813309,40.8813489,41.03689674,64.13698797,-11.77399956,-20.48855476,54.77367279,62.50575502,65.09442997,84.17627106,-125.5080393,91.36851323,69.66883701,27.03516595,80.40684607,50,38,34,60,0,-4,50,58,12,60.28219501,28.64082343,45.91683599,55.41706272,51.51491074,51.86875138,39.87351517,59.04337674,15.30934004,71.46898764,-22.53189156,-23.02551708,82.71103977,-45.87698667,-21.5895525,92.77327995,-46.69611694,82.98767988,55.27389833,-17.57465548,-2.409372747,58.67,39.98,12.69,71.53955565,-33.2154138,4.043301197,61.11123199,27.55477762,44.00571685,60.00398821,-4.665989236,14.25125751,63.78699223,-14.98807807,16.21588499,49,-6,0,75.5144032,32.36265275,6.578543613,55.02505812,75.42038457,3.376451381,46.03228813,49.02122184,31.08532426,81.92706759,-15.97753842,49.51961443,74.11334579,15.8972175,29.40787706,81.98064332,16.81279665,82.06182057,70,44,-2,81.37275564,-10.45811344,62.50538992,41.69194525,54.67333768,25.6661643,54.68742362,-5.195758879,-8.170102591,46.8,41.5,22.6,46.73122598,65.67663438,42.88594644,74.96120648,-3.796421385,-21.05748722,60.26236135,-14.92504294,-31.05076363,49.36740388,70.1298668,-4.263933673,50,56,36,69.26651685,28.96940263,73.84691746,41.15459944,43.44971524,9.420704828,65.63460301,39.47077932,22.34062845,46.1147922,-.502038647,21.96698522,61.66964242,3.959871231,-15.20304672,38.10030715,38.97659017,37.64731313,68.21554223,55.01433372,65.31232205,46.68736864,37.72811116,49.88253103,61.68146705,35.71691145,42.41498853,50.31222758,44.51682573,25.82290337,68.07318429,-7.444175673,28.68757327,60.11723217,44.75312025,32.93193394,61.65130356,-.30660378,-32.34170401,44.40499084,22.67831941,34.76022761,54.58465807,-20.70266458,7.801785661,91.06690779,.270079719,33.42048411,57.64030124,37.15118312,3.05141664,66.68471568,19.85666218,43.11640806,82,42,10,41.49653862,45.3461211,-13.67318296,67.14654626,-18.49451907,-20.34179977,85.8771305,7.729637805,86.13941568,74.04365536,39.90681497,22.6828303,79.32695776,-26.74767427,52.54853258,71.59689088,-7.13465584,-4.135963907,54.58333883,-88.12834271,64.38069893,67,45,17,51.55758239,4.61436633,-24.53258619,61.9708047,73.06745612,67.4873183,45.16382874,-17.63654426,11.04588131,60.73527467,9.298075517,-35.40518832,22.90235857,35.98772375,25.68667081,61.64768102,43.40409859,39.56599876,39.32247642,-20.55255955,13.87406123,77.22630109,-29.03452966,9.46447219,44.44041996,-20.67551353,15.68618164,71.16174428,-41.52189468,30.08878039,54,54,7,66.70879326,-7.582542169,-.199070603,83.75384349,19.4574966,71.83431033,73,4,38,61.56010914,-9.113797198,2.488943689,66.48124507,-9.68929647,-4.046322183,57,-2,-9,40,55,-4,53.9496578,-9.156498881,-39.92660181,35,-29,-20,43.13686913,57.95847133,-17.50191718,59,-11,21,64.06300228,-34.25392902,8.085363332,34.93085944,32.12518048,24.24897137,67.67894701,60.07001586,9.338167289,93.12016535,-7.835689784,34.26935084,39.65840884,48.26587244,-26.40942423,73.42005263,39.3226474,49.72114444,89.52258614,-65.73197247,26.51566183,45.67970266,41.83662251,3.505659394]).map(o=>o/z0),ha=new Float32Array([57.75263983,-18.20221084,-19.39044518,37.97861598,59.93148631,12.45645225,45.38321611,51.45230415,35.57393367,79.22377368,-65.91287604,16.79042546,89,-10,4,39.4,-30.3,4.3,43.08153053,-5.98093072,9.976561111,72.47021952,-27.92207492,-5.337689952,55.23182828,77.03949343,64.38815773,47.50474489,.07921435,-45.49889787,41.13223606,51.89483999,-3.151831381,97.84475821,-6.104574163,7.228215308,63,10,20,79.73854699,-7.694600541,-2.380331398,63.35129256,18.20351786,61.8460098,93.09741029,-4.6881352,5.855124126,41.21730023,62.97303858,27.92101579,61.68122822,-29.795989,39.13823402,71.56874342,-21.15637632,4.432895772,93.81826884,-7.605259939,66.78877047,60.13523208,4.306042644,21.97144785,83.20586635,-8.23565234,14.73846294,71.59710241,45.30970566,-1.670896871,57.32704855,10.46717709,4.655855822,91.2,-.9,28.1,62.05,58.84,71.32,77.8696842,-24.04317569,74.73377397,60.74468108,78.28893511,66.29602891,44.70141103,-9.231786129,-47.54244749,52.57985055,54.46419384,23.48126666,67,9,25,66,-10,43,70.13434239,-24.68742288,20.63868904,61.32284497,80.25869701,69.37108791,54.18474043,-7.60877817,.127819295,61.650308,-39.31565449,33.66993992,85.95955666,9.346849451,94.28121202,56,-37,19,52.72787663,42.51468342,3.595144259,49.43652814,63.56954699,36.70071608,99.81111899,-.931056748,2.730029101,63.4,-13.8,18.9,91.08188002,12.33901345,19.82456056,81.95325265,.844850307,35.56923276,71.03351008,57.41043323,81.90183495,51.71137212,44.24322662,-13.35699939,51.52431464,60.21591087,-2.215602302,59.304645,83.18410569,25.86088525,57.34288209,6.285416492,17.18954188,63.1191151,-26.49096286,-19.87758127,73,-22,11,62.0554551,69.83951524,65.74262088,68.69355328,-5.292810574,18.23014631,62.68196898,86.59665012,61.74354895,65.32367155,5.77538771,-41.50964511,56.64485346,-13.69674463,34.96465732,41.21683946,-13.6798668,-12.91937135,49.7616444,6.582976544,-42.78322348,49.15862247,66.5511829,2.510655593,65,-21,-14,61.51479085,-44.92446608,5.556893733,44.08681422,65.12163445,52.18336978,33.1,-29.4,11.3,56,40,-13,60.9,-5.9,-7.9,61.06783573,76.89006239,36.09409415,81.08487719,21.48160754,89.7831953,20.93873702,39.78843555,25.25687815,27.83995574,34.9366402,15.53083658,74.48294823,-5.719343833,17.5223567,76.1141537,35.16608261,26.08064378,59.296068,18.60318377,61.37445451,41.39700024,-.289481644,45.62868333,66.63218445,26.60791408,20.15469084,61.66164778,-51.75001546,45.36551962,59.39664298,90.08512626,.792986298,83.16341959,29.49383131,31.93912511,79.73429465,19.27662203,28.4438506,60,39,-8,70.7,15.1,15.9,88.49399898,10.05612406,-1.845974954,88.26278419,2.183136039,62.14005979,40.8774422,30.05557359,8.901344547,47.30131738,-1.72609394,-6.622881118,41.93172104,-6.965339624,4.819320813,73.5091556,-20.56346355,1.476780486,93.01295915,-24.82552145,89.8131972,39.14648212,19.71000112,24.41922428,46.69281263,65.55949863,45.13072628,71.78,-17.97,-6.41,61.02163511,-35.91644834,-7.50787353,60.22027705,-6.532987417,-21.75109167,81.34806086,-4.890971763,55.26541103,87.73498088,7.188486536,51.97988314,62.36006415,26.21621201,25.429546,81.31098876,13.08331327,85.07072641,53,2,0,53.41988942,49.65939237,11.76742514,87.64901893,-30.02850668,73.4808003,68.85943983,49.07526828,-.763207629,80.13334947,31.09043427,1.790792728,88,9,18,54.64237355,11.96723875,11.62903565,74.16075828,-1.636468991,-1.441970353,91.08171916,-6.844989068,-6.342586645,52.87247754,-14.07232657,5.192149054,67.14330499,-49.88093916,10.8875263,44.2,48.9,21.5,64.13489939,40.13634907,22.87672004,44.2764485,-8.841550635,-40.37273232,52.60233277,16.91543201,13.58207283,83.88728241,1.507311719,-11.62516123,83.56708144,12.95612101,90.77447068,87.19014289,17.37040204,15.38058088,65.29922417,58.35439821,25.1765886,70.78541157,53.7264045,76.04368402,78.93053413,-9.21643133,5.923187836,59,-12,13,39.45337517,55.63631097,37.06051487,55.98372503,29.01694903,46.24494918,65.2265669,-2.155485141,-10.41538079,62.58902273,86.32660838,68.89966129,40.68906959,-30.99433452,-23.05942291,90.01124465,1.377008419,-2.222511306,39.9440343,36.6715205,-2.797909069,62.14339313,44.65473495,20.92063272,68.97605241,2.216411644,28.27932876,61.6440738,24.29943558,3.354453714,61,-10,-30,81.35,12.9,43.11,61.64000334,57.82772868,15.67103369,87.82925651,-5.178403384,-6.74565966,68.94391194,65.42966056,67.39191476,38.65495377,39.0562135,-9.038222409,55.11721913,37.38846656,5.780839112,59.35171825,10.71282528,54.2985442,63.8,17.6,66,62.54006922,36.88014802,7.91132262,90.93097605,-5.128431214,22.57218235,87.72682117,-78.90710461,12.53637511,70.56361222,5.423299053,15.17452369,66.79195261,51.70239608,37.63516669,63,-27,31,80.92878784,6.969887217,42.10827,55.2097273,-15.27049354,11.94725451,53.35528349,-15.89272778,-17.91546179,66,19,27,41.1615937,-32.14213214,.814108644,39.1450185,-11.50383388,-40.76316881,68.317784,-116.9509921,76.78952577,91.29256549,-47.70752546,-8.051848919,71,35,61,58.97375821,83.32384325,44.36248332,51.57718005,1.904969588,11.05943503,53.00511295,80.54934522,46.16104423,55,58,40,81.55828506,.112256074,22.4625297,96.27539253,-9.342249778,47.83798779,65.42277255,-18.51150664,42.23084393,39.215047,-51.98169743,19.82931197,63.71642998,-19.09915309,15.22797935,42.19423942,-6.698248709,-48.04487796,68.89009851,11.61866246,9.69423231,91.08186713,4.76476076,24.69969807,27.41528013,-37.53899,18.11371166,40,56,24,51,-5,-29,53.67347217,60.13470877,4.430366169,52.57767645,-3.754787615,-7.205543801,79.69612186,4.956130937,67.84757733,87.17189679,7.757712817,23.63026436,88.73693353,-8.943097748,4.423232265,54.5490556,-.302396599,34.03423952,62.1330558,75.32665416,71.39873799,74.50893868,45.82739661,14.39532632,87.25889274,10.90944049,-3.450717774,66,-18.5,-21.5,34.50533394,42.47447857,26.67427471,61,-30,-13,65,-26,-14,71.64618896,-9.785961063,-19.64370719,73.32766438,7.477984316,2.47790362,46.4931821,23.89096041,23.46447012,71.83020333,24.45635299,46.78128655,92.19197639,-1.237250569,11.41718156,74.06100521,23.61935496,-.237643421,66.0865721,26.79667458,-55.15834128,82.28677789,20.48187683,91.94108377,67,19,-14,71.90223009,-.53909661,17.75556704,50,-41,-6,43,51,31,74.05089284,27.27473879,76.73301489,45.99088038,-7.479249502,3.045779025,54.69296949,-39.60609392,-28.94628442,56.05,-.85,24.24,56.58033679,83.7555399,34.48708338,48,57,20,48.52807114,60.57033362,49.80041515,56,-43,8,46.35174934,35.14424494,15.86991916,63,-11,6,68,42,70,81.14107025,26.70723038,74.94683209,61,38,-9,71.42204154,15.56829923,-15.31862145,84.5848135,-7.332867706,-8.045614224,84.8038063,8.684739638,-10.36348845,87.69526337,-3.586514468,29.79627387,54.01472317,1.968568745,11.33125578,62.82000133,11.08032214,-60.56293499,84,6,37,52,-2,-4,62.25805185,87.01624485,75.5217884,88.70212767,.113592425,82.7840627,70,-20,-20,86.60823637,-97.40231096,93.95329063,62.03634099,74.0003098,55.40554475,46,41,-3,71.1535696,12.90233867,57.67686157,81.52275219,-2.190325362,-4.022541752,85.244264,4.615250457,-11.70617572,59.33858134,-7.375173359,29.4624274,78,-24,28,76.53150103,-7.751689312,-1.783782993,87.71765655,-.372825429,84.76815222,68.29262523,67.87614155,64.08694116,37.8,42.8,26.5,41,-17,-25,60.65096075,-81.88302954,50.52340007,67.0517408,-2.077232621,75.3360236,71.59721311,33.87362256,61.5061658,43.11003902,63.08926019,22.9116134,70,5,14,84.85352262,-14.02429319,18.42503093,62,47,21,46,-35,-21,45.48871458,-25.28456699,19.82933216,83.92,23.7,19.4,33.29655508,49.52854799,29.44782566,45.2,52,19.2,67.63432353,7.947116319,54.7366499,62.79927731,73.85253907,14.7316058,50,38,-10,43.80946586,34.7125489,-7.901135266,35.88757029,55.73140947,36.46720727,55,12.5,40.4,54.04337196,13.09810222,-36.37036356,54.6,-54.8,25.2,81.34782902,-13.71564918,-12.75380314,46.22627078,48.05764245,-3.095273096,65.10524893,77.23752207,77.79244599,64,18,27,83.85600898,20.70654141,18.00502399,50.49793081,-17.17908593,-42.22832954,96.18952704,1.936634088,7.904712819,84.69317811,2.488183855,11.03658341,46.33678783,-1.262864901,-25.90369433,94.72616065,-30.84759147,31.63571634,79.79287446,31.26748462,29.77407354,78,10,39,73.33292788,-4.12166695,48.9222613,91.66980949,2.308698201,.905073466,98.43724104,.092367868,7.326388651,55,58,-3,55.41472775,54.47100284,34.45810111,53.39391177,-10.02056063,11.12879446,81.78154179,7.887082899,-9.650080381,44.9,41.5,8.7,43.70954295,38.57919642,31.1200458,80.7,-18.1,-4.2,51.91766595,43.00488908,35.94478398,51.57715134,-3.897005469,8.37180074,45.89916462,72.16870819,35.38147262,70.76269623,-9.371485814,14.21061905,81.30638284,9.766949643,26.13366353,68.85339522,36.46180143,62.65873833,100,.403986644,-.975625196,84,29,15,51.3,-46.8,12.1,71.59684031,-2.37278145,-19.12985762,86.10133795,-22.17217911,-2.457737511,72,-4,-2,51.57712805,-6.447421304,4.085913574,77.9023207,-16.58867497,-8.088238869,59.4,30.4,32.3,81,-22.8,48.7,30.42729464,29.281377,16.98968278,61.67356084,-32.34484326,-16.57043898,87.64229597,-3.034977227,-4.322182908,48.38608123,71.56023421,43.82336086,70,-6,-6,56.6824952,10.34026694,-.707003502,70.36293082,35.86731365,-12.39723507,51.76309165,-.948246525,1.002805093,69.91577537,21.67596993,-48.91174957,38.22629947,53.79264423,-4.031235544,86.17913604,-92.98686161,84.28365983,83,-8,-7,75.1734187,40.69452225,23.30154605,77,-27,45,45.53995828,-35.31006365,21.57615118,55.80911205,83.40891639,67.1050664,85.6534746,6.34412898,59.22840564,77.15731846,34.62556307,87.62739933,42.66996616,-9.482423525,-36.23333616,82.3973882,-30.18779081,68.74821297,72.58295014,37.19060119,-7.036610535,42,54,26,65.84349637,6.203049965,36.43257714,43.63310409,42.17184942,15.62573906,79,0,-1.4,85.59443573,-105.3246662,52.96787472,78.51499603,-124.1289327,67.65610822,65.31274767,23.78977025,.134153677,91.90359373,-1.444232941,1.250799758,66.49326738,-36.75509037,-10.3319483,65,19,71,52.34534936,28.84954974,9.118570669,62.69630744,-73.72177168,21.96877906,51.57731607,38.11517543,8.556448472,78.55451771,33.14371009,88.0712507,87.48598082,3.383947507,37.45278665,82.00514778,-13.64952175,7.824174201,84.49295777,3.137042397,91.36336762,72.05412256,8.275172058,33.23564333,73.28021815,18.55131847,51.00534899,45.11138708,71.27429254,-82.76144291,77.10390899,-7.448467764,21.45893517,64.23665987,2.484280428,-11.54857678,84.58074295,-9.175719463,6.24256769,85.79243519,-102.7397481,49.08273315,56.4352709,42.29490863,63.91358017,78,8,18,85.98531466,19.43374692,3.038290173,71.57210026,-39.1499902,34.0917714,46,-22,14,57.18102476,51.64330861,62.54124129,72.17,1.94,14.62,71.5747446,4.672955968,16.93418813,56,5,12.7,75.03989368,41.55624333,4.129166541,55.37201783,20.08244722,40.84540376,45.68893548,-8.629483721,-46.51757056,71.82487494,54.75210239,83.28897163,70.44795431,5.00094654,34.02731977,75.5561101,-8.412300494,8.1456862,56,-9,-24,65.51895476,-1.371374472,7.429832738,33.05273947,50.77417918,26.22370602,74.11615904,-96.71679948,79.58084685,63,5,42,74.04457368,-23.89130436,2.086162151,53,-5,9,76.3,-9.5,-26.5,83.62113836,17.05576374,17.76603681,45.9763444,29.32717788,38.01951431,67.98191381,8.796203791,16.04486986,76.00721825,15.3526361,-.882280332,32.47628505,44.27084628,46.01219601,53,-8,-24,85.96785991,2.424266932,23.46188385,79.57303383,4.117896482,75.80551266,47,52,5,44.9930705,54.55644999,20.0036175,80,12,61,48.07082685,-69.6093991,23.08298299,61.33220699,74.11447094,48.00652705,88.09348461,-71.46556586,-11.78583248,52,-13,14,96.43861825,.523068079,2.963287132,76.53166026,-6.888890697,4.488978,83,16,29,76.528184,8.595019207,21.37768195,88.44167429,5.037674442,78.55158139,49,-21,49,94.74881918,16.2104276,-9.125776977,81.34809637,7.515922223,50.83787001,65.29499944,53.5450444,34.52226211,81.63534562,-12.6634052,14.57517412,84.21867713,-13.03453331,7.885867827,74.84445289,-41.71280422,5.177712606,67.17715107,-10.24424624,-5.453991854,71.82,33,6.09,89.58540438,20.36065301,-2.256772094,66.819042,71.53804748,77.48236411,66.4,6.1,27.7,62.3,40.5,34.9,93.95533615,-.879245114,-3.034298083,82.37441334,-14.70315509,-11.55332557,46.46671131,-13.51367497,-12.91374426,52.30935852,-42.19134787,-7.138435176,65.91809374,15.33257334,46.20820098,53.84120277,54.7025446,34.38015452,33.41918815,33.41768887,14.95512569,66.67952473,1.386507464,55.25114766,88,5,50,82.80027646,5.500925095,31.16422108,84.11054706,-126.3631211,90.9878728,55.30861751,-14.15879654,7.047846616,30.95968689,37.64212152,39.96995849,85,33,7,70,25,55,40.46855451,-28.67593689,-26.62332832,82.43324847,4.581173772,-11.73062884,52.12431723,51.56613153,38.27648653,96.44263592,-24.68739131,86.47078602,87.41929797,-21.35617147,11.61034673,67,-9,-18,51.19369252,48.98245252,57.23090534,84.91128377,13.78087234,-2.077195329,87,3,13,62.42521463,7.379815206,-20.52160216,61,-15.3,-10.3,83.9605436,13.13576877,-1.24823168,94.83456723,6.78856283,11.33315975,98.14863007,-1.956563099,13.63958095,72.58311855,28.16313204,4.537722999,80.12548824,12.12966899,82.07012733,55.4299554,-20.07154394,-10.19919282,74.07371937,30.61117586,.304272982,56.3,-13.3,-37.7,69.59719755,-2.960382187,3.626616039,51.88611981,-43.63037339,20.9319234,48.82588652,-1.186820071,-14.3941092,97.9029967,1.679359808,6.509178606,74.0443386,-8.286051853,-22.47964019,85.5620734,19.44756778,14.01815109,75.55014293,19.78337413,26.71163455,99.62853083,-2.232656645,6.462399653,77.58722852,32.4446686,86.37068663,73.63082872,45.88667297,22.45062922,37,53,6,56,-13,30,43.89341394,23.01220898,9.85288378,50.64679831,-3.966524486,-37.79824068,63.26564855,14.10648464,45.56518719,84.4,-.4,-1.1,41.10844118,56.88875107,30.43562641,89.92454429,-.320959877,24.9399374,58,35,43,66,5,10,45.91426438,-53.03363185,2.749701396,26.77402548,39.22870266,10.89252778,88.74259114,1.816725632,97.66916703,63.69174035,-29.63199359,24.7840439,85.02520321,-.379776674,76.68216189,91.99738695,-8.917249629,-4.077388325,84.28107525,17.88040092,40.77838366,58,-32,-11,56.0930543,-11.32888079,-25.42733671,58.14524061,63.76236594,-6.736690246,58.97774141,-17.51504057,-33.13277654,67.66,7.95,36.3,51.54529911,18.38340971,24.62332224,81.4141227,21.32168089,90.96445563,56.70374958,-7.192546407,-3.861241748,92.42318507,-3.946217565,7.565834087,78.74090991,.028256771,9.632142204,86.24710609,-.426795776,16.05983952,85.64926858,-102.198829,31.9356976,65.28550869,60.097181,3.832129139,47.73637944,-13.53582486,2.436520966,61.86675158,7.413618803,35.67732669,73.6049017,49.82050686,74.72233047,69.45147623,-57.5036912,15.54166078,32.86746787,56.46975575,46.79679426,39.65,-27.62,10.5,65.8293773,-80.20738638,38.92177015,55.73870578,6.816742055,10.97409083,45.26603087,-27.71581062,-20.79911344,63.87515706,68.69353068,31.78193999,73.73045127,-11.33869141,.711053216,26.94474801,48.49130061,-12.14357657,87.26565132,-10.36298036,-7.381175563,45.93860178,21.28882506,19.7839773,56.24680408,-23.36293117,-7.911429378,55.63286852,8.351533757,28.01732016,78.90934099,24.40348292,-1.278404054,77.48210551,27.45972796,73.32528709,23.49454433,44.56617653,9.933239781,78.12727413,34.64752268,24.43560943,54.99242874,48.4010215,19.5981041,90.3,0,7.2,58.59327568,46.93871879,54.51435373,30.98246263,-31.84451587,-4.615803633,64.01083165,68.15579511,50.8793593,94.47938231,5.435663277,3.675440437,63.75729991,-22.23990789,3.413410857,74,10,12,38.76757674,-69.59600389,40.61555161,51.4,29,13.5,59.46907982,58.89160108,2.068469489,88.2749752,2.542433029,94.94450295,69.90948481,-4.689626112,.591306546,73.31997274,-28.42505705,22.65989401,59.03775301,18.34836543,30.49111954,49.22096529,35.10372864,17.33493735,47,23,20,53.86266573,46.76906336,34.84737305,57.63121686,-31.24631745,39.28323283,96.24425776,-1.374837076,11.71089824,61.86487516,66.88279088,71.99858599,83.86228921,14.38175441,26.4142956,31.95666805,37.02689013,38.27879703,84.92374055,2.284669575,-16.4110387,46.7879551,29.6174944,29.24041944,76.61862712,14.96708447,38.30349438,82.32190636,26.1522959,13.58918746,71.57841164,-.456738724,18.41555524,92.94450915,-1.543038845,8.381613093,60.50212672,79.62432206,20.02618955,41.16846475,30.79501468,23.14849493,35,47,22,89.06797504,-4.860125089,52.90616242,45.5,-28.3,23.9,59.12467159,64.34774981,.334647113,64.53646046,59.57112419,15.81005405,83.86537899,9.734651807,28.84507287,62.67976179,46.85344393,44.1430547,74.0699023,22.36848371,-3.305347171,97.91023826,-6.05766893,25.47128276,69,42,4,73.79249065,28.65620712,4.579452766,63.29,-1.57,-10.93,60.80716391,14.24838035,35.47388494,71,19,50,80.24737786,6.177663387,89.8361561,99.87338108,-.489706025,1.491818919,50.02693364,15.27916396,28.41625616,66.92562707,30.3715642,-8.593606653,61.67270206,21.31045995,-28.82242201,64.64196654,-32.96699066,15.06376178,71.30776035,6.410848313,22.22541522,69.42996013,-63.34141873,45.47037759,65.16233986,-38.10625837,17.80580312,65.99477328,57.84676953,58.41607278,86.29688999,-3.729264236,41.15384883,87.35417567,-90.03031816,94.2626699,45.46458652,59.4001396,3.295763722,45.11461029,-7.023603459,1.833969286,56.5,-6.4,-8.4,50,56,27,77.15166732,18.62332645,36.20369066,84.83468519,-.814291218,3.908494673,89.70246521,1.984043565,70.27715189,75.00141146,-7.183312239,-4.239257805,73,-9,20,74.11867929,8.629488376,-10.11013073,84.69748417,1.530828858,6.475882684,83.12861951,15.76341486,78.34017563,54.40482992,-8.067382268,-59.01715757,58.85750993,58.33890982,68.17950925,83,10,45,50.53407525,16.5462936,15.37848204,64.23649475,8.160549537,27.4294906,72.26108956,-43.64766801,6.272875551,51.72342761,56.77063947,3.198664524,73.37076166,-5.282788212,12.33973498,91.66148724,5.64862967,-1.241803606,68.9,19.2,52.1,83.85807669,14.72428355,56.62135419,86,0,33,57.23404287,-61.20534396,14.16646063,43.93,-7.87,-11.44,67.64991803,.647718142,16.09228766,56.91,18.52,37.43,91.05366463,-7.010262145,79.09664939,59.57865474,-38.61290351,-32.2147712,43.98652244,-7.196851502,.230193766,64.97974973,75.26002017,-4.444870178,58.93939858,-8.110303629,39.43622221,71.7,27.8,76.1,62.0349175,-11.08159572,6.253376734,76.00760177,24.02044874,2.595973752,53.37654843,-21.06957766,16.6207703,77.75297591,-5.014921711,11.53215814,69.63809841,-33.79020823,-23.486416,94.30620093,.058542869,2.846060794,53.42052479,-4.12681934,-9.184786902,87.3138045,-.351852375,34.38429621,64.867732,10.42440321,4.029537778,75.20161903,7.287620458,81.67250936,73.61056564,-113.401396,81.08933579,62.52633001,86.14416416,74.80408729,67,44,20,81.34803656,-3.435603965,40.35966459,49.64147861,36.97098643,-6.594034486,51.4,48.3,43.2,55.13513644,11.66220385,-1.10105595,56.80160307,-32.07060543,15.52798454,80.8,17.8,8.4,83,20.03,3.33,66.41413535,16.391079,56.18119245,45.0424092,-7.021705104,1.834020785,74.55949635,14.90577311,-5.648147272,70.42602593,53.71988999,77.97251878,66.07702304,-85.63709707,27.02845384,44.00867469,-16.86996926,8.625377483,61,9,18,71.59692279,-16.03820631,12.70526172,81.3064612,14.91992127,2.376085444,77.85404453,16.2778455,87.22047577,71.59710172,36.82409743,8.01808902,74.03865492,38.49696568,48.03366579,21.74053962,37.50918165,22.60955923,75.06145721,17.43420115,-7.91112871,39,-26,10,66.29528927,20.72117373,53.7339033,68.36622479,53.37618158,45.28388159,91.08182237,8.407670108,6.706676081,89.31624092,-13.26644924,73.10923968,80.55469963,-18.23504372,-16.08503288,80.1,17.8,60.1,93.46391037,-42.24658203,83.85284112,81.34803538,17.1780035,12.73360878,55.24363345,45.2944907,4.764521553,20.23930236,42.07545226,30.87295993,50.08249189,8.704607934,33.64969888,83.04743607,13.64986603,90.84437973,66.64418217,44.91379932,17.71310948,45,-16,-43,43.81843435,33.2025163,40.1313272,68,-30,32,47.12036621,58.82663075,30.73585853,51.48743954,4.992282328,21.94357217,63.13114402,-24.99887564,13.34363651,80,11,-12,46,57,31,56.48499616,53.93452241,55.53413355,75.6249477,-1.788635864,15.78950988,74.53557947,2.719088466,82.33239107,92.98159747,5.047164659,1.88366076,36.77473165,-18.69394606,-27.74248319,47.33875057,-43.56478114,27.43186614,74.54,1.1,1.72,67.52110472,62.35802858,74.92689306,68.91401959,60.1268179,62.10925319,78.76492462,34.67605934,68.4600667,43.93333846,-12.26397994,4.282805595,53.63315267,77.58943837,32.6618631,62.16305244,24.19427902,-26.1212037,78.22003044,36.65026836,4.501891995,54.13409539,-8.154860956,50.35456882,71.59713991,33.02909294,25.8432358,89.84384209,-1.61431524,59.95213154,64.68307211,-23.94841046,7.839563673,94.43399914,4.131899544,10.48067279,99.66629619,.14893144,1.120475103,58.56418961,25.26233537,27.97959956,46.57536321,-17.68875564,22.51814603,95.16009527,11.31725727,.483818512,77.49146811,-29.30565919,7.249308928,88.23743454,3.801922152,58.90794981,41.00305643,37.07417753,28.63431602,87.28762391,4.679525976,85.36430819,76.02777794,2.095227282,-15.89838639,58,-38,-5,48.01,57.5,46.43,83.9,14.7,5.5,81.07294741,-16.54905588,23.33993478,66.85441496,8.5123043,19.75725876,47.96360684,24.40996433,60.21767665,73.09484564,73.6391129,-16.71321155,58.96321541,6.911959911,12.11793389,58.26216054,2.378637527,9.152916216,49.22561355,20.02207033,26.65039502,61.44,-7.07,-18.82,85.61265889,-.897293543,-5.859814816,62,-3,15,49.61233438,4.26868861,.244909038,64.75422374,50.60979346,-4.83188294,95.14549446,-2.382768236,-.493929828,50.34,30.15,9.64,57.15447835,-18.46453226,-36.66880997,68.599177,56.9718273,37.85881273,66.9981567,36.83173788,57.66845305,56.05672379,51.42729502,25.19102192,62.42721825,-54.32352123,18.87072868,44.94026835,36.90638895,38.04699533,64.6,14.4,57.4,81.7466403,20.00145024,84.77185627,62.34,-14.95,29.25,55.28700922,-12.57069975,4.507458308,71.83207143,-44.5554174,39.76299935,43,-34,-1,79.89549273,3.561758563,88.37627321,57.70805093,59.51609456,17.51537913,46.16536978,39.36346885,27.78929859,88.81248892,-.307758188,21.05790967,34.3,28.2,29.4,71.56594766,23.8379879,2.777691723,80.9636998,27.0247196,40.62762501,82.10887346,13.4468611,69.95649719,75.3050635,12.04269937,25.86988229,37,46,-21,72.22,6.28,-1.79,49.14717495,10.2432188,29.08495438,50,-6,4,56.5,-20.8,-33.4,91.6,5.1,11,44.2,54.8,35.8,68,6,14,53.51343175,-13.34652339,-48.70335894,80.8,-13.6,17.7,95.42422135,-16.69540938,95.24500042,75.6244341,41.06356036,6.225973355,52.99609272,-1.452005314,27.33638653,63.66935805,70.01851516,52.81176392,63.05131531,22.14200771,42.96596445,47.49366707,29.80127343,5.391854218,86.28533753,8.453202825,65.71897516,63,-1,-6,60.5,9.6,39.4,66.71278865,-.351986535,17.6780216,53.95013308,-23.15386487,-4.293634689,35.77730667,24.96676311,18.88848296,62.56,.88,1.31,64.40972844,68.90575656,50.83091161,29.54387514,28.95339094,26.21601158,56.32930003,52.52722045,17.28203992,42,-11,5,39.67646664,51.10452868,52.65212812,61.91925826,12.3758952,-13.06401579,57.43039893,85.20961792,70.64865444,86.58677526,-89.20786848,88.13479687,81.34789173,3.270361575,-11.60764208,70,3,15,87.11248953,5.588044081,27.98820171,79,1,73,72.72405188,52.40208485,76.88168916,67.48704819,-24.75474369,20.5833587,50.03550521,-3.699197817,3.44213416,81.20089346,3.688836702,38.48558415,58.44719814,81.07032732,62.92131907,63.82898828,-35.31709505,-.593949674,40,-43,0,56.54859697,-14.91333233,-24.19388135,56.42214702,85.2565336,28.52533145,64,47,16,74.54769818,22.31707273,32.66929102,54,10,23,55.34473255,44.26455581,-13.12572013,81.32957293,12.24463427,40.96379206,56.0947568,76.34795725,-4.501632891,76.03991014,36.31970689,.767469896,66.9961815,34.21279318,60.52016441,59,-4,-1,68,-19,-25,61.47380032,-18.23627124,-28.09401248,71.53859727,-15.05622262,-17.66680114,50.49033309,47.29289141,4.703637249,61.6597596,-9.463301494,.53181972,87.38532902,16.97728129,12.90862844,45.02369041,-10.3978919,3.327610473,56,-8,2,58.38227521,75.74340095,9.216043346,42.02309209,-62.63855662,18.77676132,61,49,37,62.02719644,62.8309418,59.32339079,62.26552521,1.916945816,-11.9649457,79.5590268,-26.62796093,41.02762612,61.92259358,-17.55822076,3.012139583,65.28036851,16.38276242,-56.50848416,66.14050204,53.095283,6.312918214,61,13.5,-30.5,71.1,-14.9,-23,35.78336972,45.25846231,37.44378817,74.83023416,27.14447034,78.98850158,85,5,21,78.5,-3.6,26.7,81.33434851,-18.16940048,42.01295182,82.23918206,-7.789206559,1.760164092,70.56191443,-8.963975149,18.64017249,54.15998883,-2.896944515,18.55287266,73.58394702,-27.2367791,36.27058801,49.14074775,-21.03522485,-40.89104385,53.5530178,6.104809883,-42.5551007,66.71720721,52.73258288,5.40625454,91.08182096,4.540416992,10.26773081,72.87444694,27.14007192,21.17105374,62.36836729,-5.913590532,10.45028081,74.55165321,23.89009676,-6.174221334,64.77937434,62.91729174,66.34316254,77.229505,15.28872384,87.20301789,80.96991104,1.77070582,89.16931678,81.2,-17.4,8.4,27,-111,-7,37.61041595,38.18511671,29.49761017,71.22834525,-45.25004222,-22.66992455,72.65499922,-8.335626504,-26.342745,46.93562073,46.85985272,27.63227122,54.23,-5.94,5.5,46.27308686,47.42235117,-9.841129464,74,-25,-7,56.03931069,39.677439,9.114472642,76.19921109,25.23584983,-1.550032683,63.26750284,-11.74953708,-14.56042207,57,17,18,73.51696682,49.41472996,82.25953674,52.32688666,-6.619088899,-2.898908997,86.96967209,4.574538698,94.26149506,89.130173,4.277401816,40.40361633,90.56423147,10.1096752,10.61002611,64.59234177,-4.749987952,14.44863916,51.54314144,41.93818057,-7.970715009,70.35057986,-11.04939442,-18.31621159,54.04966454,41.22941472,-8.246273883,40.02739415,49.46497099,7.050192037,75.52125052,-14.74935255,-.056009204,74.55347211,17.12841962,21.30786755,82.8,9.5,-4.6,53,42,-1,93.71886947,-19.17416901,5.377960802,55.8,7.7,-10.1,77.78387216,30.8905217,76.85173795,74.09167271,-1.814036235,83.27792722,60.21282458,-63.20792683,-8.260467749,63.70140212,1.343322676,44.82560251,61.005973,32.5976352,69.91695319,70.73,8.6,10.7,62.84672616,11.4890182,71.94984418,62.72758054,-49.58978743,-26.59701391,60.65990979,19.63192092,35.31725303,62,22,19,85.04380377,22.69756871,2.69583485,70,-24,-22,38,-41,-7,65.5,16,12.8,46,.2,-22.4,58.11,-9.79,-12.57,63,-35,3,81.3480359,14.69620486,15.79560256,65.33889433,30.38620562,61.39166783,60,7,-18,70.77034249,1.302068954,15.46374004,74.08338442,20.49936847,-16.39394907,81.31810567,22.37047905,13.40477061,88.60741368,4.655057763,9.759542271,91.55057344,-3.961200243,7.598849187,46.31421477,69.87487083,53.34078126,47,-12,18,82.01202523,17.48309005,91.76177162,79.67499197,-1.425897411,16.19434325,43,55,23,70.49469429,-18.36352526,11.39800072,45.31681632,-9.185912584,-43.52324253,46,-5,-30,50.27225772,41.80858666,19.78969415,50.577811,-7.171917962,1.832378167,46.98192572,57.53201428,42.98944834,64.02799026,9.667856801,63.02717071,83.30275329,-137.73554,90.43657187,76.10496083,-5.091590171,-25.04303247,65.91698363,49.79755706,-5.96822564,53.21495669,-39.90646501,-26.54291072,44,-8,0,77.00166041,36.63781173,13.50217978,76,13,42,49.11870458,-11.29773778,-12.79918987,50,-5,-4,55.11479314,-7.373097845,1.89656192,74.00805438,-20.33928369,-11.54556974,74.64880596,1.594342354,5.071188536,79.91768864,2.204066449,83.15673103,86.88823754,-89.33688933,30.97020185,51.34371223,3.944409038,6.787322099,81.34813274,36.3543706,19.71118763,66.76870989,58.08794833,53.19040198,42.45688528,-11.93573066,13.77177667,57.89592077,81.6158943,66.5720832,74.08780786,4.194980455,-15.90497694,61.64122375,49.77444247,5.768513251,59.30195741,79.86013877,56.06805694,63.25197335,-4.442330978,2.711943771,93.01922255,1.606347347,21.38992663,57.77128982,-34.4398303,-31.45616027,50.62448372,51.59473193,23.0482996,77.08464924,.790745895,24.95209074,66.14816004,-21.32454815,-11.20656774,55.98624946,-36.12427478,25.04437937,52.05,28.94,32.45,45.0219634,-13.91343528,5.064869324,49.13437383,49.87249775,49.16078064,65.71462459,14.54664004,16.08764623,63.90307229,.612714382,18.92441008,54.08218036,-7.174044427,-3.791219994,55.07931332,8.35934627,19.53607237,90,17,6,66.86476938,-3.522442063,3.525614125,49,26,28,64.01999988,60.6484465,16.07998243,63.67462673,49.41319879,-10.69762515,85.26932165,-7.927968799,-2.001322071,65.7,-8.7,51.9,42.57416539,33.37204433,10.82479699,68.76519656,9.308812635,11.8659589,62.03412919,76.0665595,28.54783904,50,-12,6,68.07640351,-10.57692869,-8.998925526,87.72517806,-.400304252,69.41218156,64.60084251,49.35331817,12.39886457,74.96641522,42.24306478,22.07906219,78.34827523,-2.741801432,1.659587621,67.21856408,33.92018061,59.53375239,45.9857687,1.803840638,34.18948952,24.08323776,38.16961282,20.3105263,45.68157013,-4.33779261,-26.97186956,84.47125619,-4.868371738,48.69982592,80.6,12.5,34,48,17,17,76,17,7,83.85259258,24.82477234,5.934438393,79.51735171,-4.841428569,-5.505969326,60,54,2,69.23406529,29.79392436,47.95145697,60.3668845,8.077269971,29.82236827,81.33361194,23.30438266,-14.20213338,56.69777228,1.426169078,25.76731853,75.80918118,-1.769362501,48.53493756,77.19190992,38.59147219,11.50330656,74.05461375,29.46806016,21.88260536,83.53968938,-4.426841315,-3.640917293,45.07474318,61.5979264,42.50535189,43.88472857,49.4860357,29.01521231,39,-15,-1,41.17305166,-21.56004289,16.68474086,76.51835035,29.96034808,32.26211704,56.4,16.1,14.2,83.47542726,-6.773192616,-14.15052605,84.313698,-4.628188053,-9.140101641,62.69452412,55.2666064,67.38630287,47.01130229,-12.3051649,-17.32744435,71.59708987,19.81473299,26.84113233,50.43962269,-11.9573378,2.097317224,60.80452891,77.11925319,65.44680118,69.04859535,-35.24403982,11.86002346,86.68961125,.511398251,11.19714764,59.19,40.14,12.21,86,-3,54,83,-6,19,30.73294835,50.25950286,32.4807413,56.18803313,1.745283489,40.84557828,81.33513087,23.83344854,58.22792999,93.38944456,-3.011860366,5.69668117,93.0046135,-1.115049037,7.10198251,51,-12,-32,84,-3,-2,47.12151109,9.454628314,54.09803996,90.64219817,-5.511258909,-1.807973356,70,0,4,55.71900279,59.06456442,24.54723428,72,-16,-5,51.54835686,38.29957659,50.28736903,48.29863797,11.96769799,27.22889662,48.69,28.08,27.62,55.1,-4.6,28.1,48,-2,-7,71.55267158,14.09995759,67.53692867,53.47332746,-58.62965874,14.86008176,74.44955799,24.87447929,67.24832456,58,-31,-22,66,17,44,76.9,-.4,-.6,50.69275503,64.37043589,63.079368,59.70100475,-52.56531317,39.82016883,68.64588013,53.14206475,13.7650764,75.18304156,-20.59042309,16.96255447,89.64243507,-3.681975488,29.46786435,94.46360083,-5.384074679,-2.924694137,72,30,3,90.6648936,-2.362766061,15.06331397,46.54071269,-6.98929493,-3.521909172,33.85117767,41.46406941,1.635465363,51,-1,-6,51.54119638,2.278500269,49.89051666,70,19,-6,67,23,28,57.81194447,-8.201786459,-.269609167,84.42173718,4.134857495,15.53818333,86.22441055,5.476817933,64.78202394,71,-23,2,67.02094624,17.06151031,17.65098902,92.22584757,1.928941995,13.11390117,60,46,1,61.6566488,1.596613768,48.65944777,87.35010189,8.051742095,50.63071635,72.22036669,16.58993533,39.038978,86.42844074,-15.62242695,41.91276909,71.06530155,7.264744746,18.90459515,71.8,27.8,-12,74.97533446,28.64642311,79.87311926,67.6433214,39.88286474,34.25320243,81.32076708,32.41666778,-6.828374292,83.4994017,17.89818868,90.71739242,75,-8,7,61.59460516,-13.14076463,3.739270028,76.52822625,-17.83377247,7.52702388,50.60375757,-44.14946092,-19.78341615,30.93683862,43.36546659,44.29222781,80.89414261,-5.970699012,1.663815329,78.2,20.1,24.9,83.89779429,-1.149307629,-2.516031731,78.15150646,27.81129102,3.209190407,76.51098723,-62.24937895,-11.85536165,38.09435322,40.12650064,13.15876339,76.26570055,40.94295717,4.347933363,62.7023093,-35.77388394,.521889871,81.35637246,24.17338234,-15.16654718,67.68620653,14.55691132,15.98268403,53.05748252,60.15122448,14.20573713,51.07661823,32.09126178,33.99224893,65.24908842,-70.56974641,72.7819552,71.00313142,6.545999603,24.14545121,63.06766318,75.90379954,7.783494108,84.43083267,-8.74051107,-3.366515459,75,7,28,89.79470073,-5.431446625,-8.504699881,86,-14,11,79.5432636,-5.98342603,4.625226009,81,16,17,37.8388719,-37.53217049,-7.785228849,76.49105756,8.905422477,66.57059757,38.86723558,29.99609597,43.8850741,75.54566818,24.99619907,38.58466806,50.88176566,-45.32748535,60.66851349,57.39992376,-4.806351299,3.435586078,70,36,37,58.24504576,-13.94750698,-2.077119964,72.3558449,49.79606178,6.440125628,83.75614396,-131.2103036,90.92052682,60.91928316,-7.569574896,-17.68994922,38,44,2,85,7,-6,78.68785236,20.08032264,20.5593818,58.42769996,58.04206315,4.776980703,71.91850206,-11.49343543,-11.85318912,70.66848556,94.53395729,-47.42171293,81.69317082,-1.292551861,49.32707154,70.61727714,37.13953971,-7.044442592,48.68463989,80.30772665,-48.93265626,95.75529673,-4.709942473,6.134361644,33.67421483,59.0598017,-22.90273824,85.52729296,10.94925146,-3.30517337,64.1299406,33.86681649,-8.872671294,47,27,27,75.08554116,4.325065873,32.5020559,43.56753146,48.64388335,-3.655970478,45.86812829,55.07690353,38.26684438,91.73953319,-9.798094175,8.510763957,91.08182304,6.52712531,8.818286854,82.57074697,-5.114707444,5.382695967,41.45953823,66.95622273,42.87386131,83.54075475,17.57970823,24.41814414,72.31831489,-15.25677766,20.06185161,58.03,-.84,16.2,82.7341398,1.21025097,1.212486116,83,-19,6,24.90397955,40.83031873,7.288090782,81.34807966,-5.860624262,69.88777243,37.91463086,58.17933725,-16.03984543,75.03299321,16.95081678,-16.40142181,77,10,22,41.21711285,39.57019847,2.986244887,81.34800824,28.55103253,-6.509152136,71.70270078,9.316735539,9.282158832,74,39,25,53,8,12,56.75101523,-21.48738297,-49.26384335,67.36638545,73.48160053,44.01641774,61.97961253,75.88925728,30.34444412,76.4,-36.8,5.5,58.07440632,-18.83611333,-5.421130805,91.08172557,1.712453497,-11.8007321,82,12,39,89.08148531,4.423796904,17.6305105,85.07238163,-106.5273138,18.28376078,60.17141751,-9.890408857,41.71604908,81.34788326,-28.70298556,13.76075547,51.53078109,53.87518087,-2.041433178,44.18418811,51.07745064,-20.54626394,50.2837447,-1.919760129,-15.20723228,67.15590846,16.3503366,-.069928118,75.19025289,38.52569345,37.63015142,71.83150456,4.358573366,-12.49758699,62.00293367,41.40532865,-17.53341936,82.33197596,19.66643881,6.008636765,74.09596901,47.000922,11.43828272,80.05557068,-9.050097056,7.093626815,45.59649203,30.76476238,36.22761255,70.17746908,35.41384524,44.61547015,81.81845962,-19.4154598,.251355618,53.13508607,2.990958023,5.693745072,55,-35,-20,65.93418683,14.08345978,42.65004923,43.68166082,44.81849887,-33.25387497,84.92377881,-22.35779174,18.77042227,56.13798793,24.43278007,.425863899,41.97812003,-6.694868703,-24.1267113,75,36,35,61.6812588,2.049388343,11.10549153,76.7487004,9.890931102,-.202017249,64.59972945,50.94280274,-8.906329787,61.68137125,19.9315651,27.47170875,72,-7,19,87,-4,66,72.38258206,23.05915293,62.08383904,94.39305757,9.631278406,2.467133257,82.32945846,-21.79810435,29.7189864,72.54645313,37.11462103,-44.57805156,74.34373812,-37.69411721,24.30746507,84.92480304,17.11593936,69.53056386,38.00397145,59.22149787,28.23094133,42,44,31,76.4,-5.6,-18.1,65.94500643,-16.01617001,27.74415673,65,-31,-1,78.69663691,15.72166368,41.86127432,84.68763877,-21.32772923,4.137817605,67,44,21,66.93939967,36.08724954,8.633346284,49.94181324,66.49536908,22.86275651,37.48,49.14,26.2,70.5,32.8,16,73.5,-19.4,71.8,97.21977059,-9.752625142,5.396879996,74.87369688,34.38263099,53.3509252,56.78828766,-68.54655664,18.22735081,46,-17,-15,64,49,-6,83.82859372,-6.637501825,80.78357917,66.21527008,4.156664051,10.16042439,75.9,-27.8,13.5,54.05324745,-.538176052,8.994243705,64.05278203,55.74616174,35.79593874,78.63477982,-25.48079851,36.28042346,86.09258979,-15.83719456,6.884333002,51.10246728,-21.37437928,-40.06769454,80.48121658,11.89189654,31.78636416,31.79281839,54.02800207,33.22452201,79.04410166,-26.91315859,32.84948387,71.40555336,61.75863169,-3.847346507,61.68151311,50.68631505,32.2229387,64.14139573,-40.79767351,58.48845744,83.51112468,5.481282978,-4.742204129,53.32,22.93,6.16,80,3,44,67,-8,-13,95.32774063,4.275133446,7.120635543,75,-28,4,71.59707527,44.77461186,-7.753099651,48,-24,14,60.25610561,71.94831342,62.32758115,71.57970028,4.71825137,-32.92139075,51.53613064,24.6247233,.756788037,42.54160394,44.63568689,23.30265013,56.5,-28.8,14.8,61.64490383,16.38527543,2.152916086,54.18345023,3.778207436,-11.82775868,77,1,2,76.4,-108.9,-25.2,22.56146378,34.71286697,23.67119302,43.87367836,-23.43493925,13.78955968,94.81598525,4.88404336,8.475833098,70.66108135,-48.61675675,-13.9646508,89.81489067,-4.944130227,16.49264112,82.35028419,9.595343711,10.15809024,81.34788558,-7.278280122,-4.432416876,52.21404383,-9.115804434,52.36985545,59.3,19.87,31.7,58.63465462,30.54218053,12.39337565,66.7007681,16.78215604,12.75944531,53.04342417,-9.74115606,35.65646753,71.5970972,7.977240227,51.23051253,40.94811591,-40.92702087,-14.21047913,73.6858633,10.21370285,22.27019132,59.28263342,14.52445742,-1.551033415,93.44591175,4.28388044,13.90989025,69.1,41.3,52.4,44.12366045,14.55207499,48.56483843,80,-5,58,64.19522034,30.17621764,-17.56444151,49.11122777,58.22702419,3.027923688,79.66263491,-12.91052187,7.034187905,57,-17,-34,44.32906044,46.00888729,-33.977576,54.12438906,53.18274192,42.28929596,46,40,-8,83.88772314,-5.591200478,7.356652701,35.4,38,18.8,91.08187525,8.652070216,22.70714183,94.88928882,4.902141391,32.06415627,72.61208962,-13.4906545,18.16299199,57.08,-7.13,-20.54,91.08174716,-8.043421027,1.812721333,61.89905283,25.13118985,39.58059723,77.5,9.5,49.9,39.90169253,42.93766633,34.74405639,47.66618935,53.99504279,3.369367695,27.95922645,49.07621252,37.27286293,78.21617557,12.38846397,20.94837613,54.38094092,-11.22463922,-18.549547,42,-5,-31,64.14985627,31.22056362,57.42026822,75.97755419,17.00461456,71.28798751,63.74976219,56.6917329,13.57993358,92.5816435,4.46535872,10.33785245,78.63954589,20.67549672,88.69761125,61,39,44,69.34725175,31.90803972,5.192372631,57.5876019,84.64102288,42.24840082,91.50125025,9.475582715,12.58943955,85.55959297,11.45482699,94.14874553,68.82667692,69.86832179,38.33699194,35.2,43.1,5.7,41.17798414,27.2238887,28.88037903,16.87216008,38.17187173,24.72593128,43.95651243,47.77988083,-32.09325939,86.29357812,-5.202269462,55.96706939,94,-11,28,56.1511058,7.68276726,-10.78905492,74.54122088,3.095758589,38.71435326,86.10535191,4.922004093,24.44449516,85.47,.67,1.51,57,11,18,77.38652256,16.34413885,73.88750864,42.6,-18.5,-27.3,90.97970112,1.486485719,7.939145932,80.7,17.1,-7.8,41.89120688,-26.89647391,1.288594916,61.35577997,10.68630691,-5.598045064,79.50130597,21.59092632,22.94289451,44,55,30,67.46510972,2.865463985,3.300707618,71.59696773,11.36731023,-1.180787885,74.56194755,-25.4997007,33.78227023,34.59324028,40.38710823,48.12252935,55.29290424,1.578266056,33.83191573,48,52,-11,80.09469466,28.18222063,34.79364987,77.62761738,-10.70988041,8.454923568,80,18,8,74.56285817,-20.87219718,17.16674308,66.76472379,-62.08173262,12.65190563,61.86984633,88.9855282,65.94623384,66,28,42,75,19,37,84.3473555,27.88634906,4.410818954,48.93106821,2.902382049,55.8957897,53.27228718,-7.460741729,1.942591267,38.32055205,61.5897878,21.57094899,97.18605258,-4.604528021,8.874837034,70.41428476,57.42887469,70.34918176,58.97829027,35.33328399,-48.36607292,61.86764169,-69.94667296,64.32159505,60.4,-14.1,-12.4,71.55205865,-97.40312053,41.97063635,88.65626662,6.242050772,11.48974229,55,-22,-18,81.31346077,32.00036509,16.07187346,54.30056638,9.211380141,23.00658729,74,-6,40,84,-10,-4,73,-3,-3,56.16101872,-20.96541928,16.63242723,61.68117208,-7.231519053,-3.99463923,87.9,5.3,37.5,71.58316435,-51.09692881,45.4172776,64,21,-13,43.73632022,-16.98915718,55.32888683,68.04403878,-60.38322153,14.59353165,63.22646497,.587610366,-1.513490711,53.5098481,9.472388193,30.09679231,64.8,25.1,59.5,51.22318624,7.595082359,18.96144895,54.45442434,-10.38241944,-8.007522972,55.89735693,83.77372346,52.18868312,80.29224659,-6.253988663,8.600748546,45.07759446,48.64267803,10.42647381,30.72067935,50.72092974,28.88752935,88.30107721,-70.04478848,-10.08858361,74,-4,5,94.72379792,8.047384243,20.0667779,72.4337298,-7.851907942,-5.315073587,86.58204182,.027888622,11.02956925,96.84682036,-3.827861689,11.22597005,76.52430446,-28.52068633,13.50776171,57.40812159,35.52239755,50.54927644,72,35.4,54.8,40.37334634,63.62704498,-3.308982604,50.33430705,55.36108032,23.22483818,59.8250453,83.15833338,22.83082627,66,-1,10,58.61464101,86.70131051,67.66846018,56.6717171,25.00184531,38.78404277,54.2204915,-15.18406976,1.588005036,60.42043623,-17.32226102,50.8087061,66.6,-16.8,-30.6,81.34801355,.86432903,25.12522475,84.31,-16.99,18.44,70.3,18.9,52.4,47.47,1.16,1.24,81.33370783,15.12661839,-10.25949225,89.08570703,-2.472981836,7.175879228,76.73234333,3.16710075,67.19330785,36.7,36.7,1.8,64,-5,-17,56,-32,32,52.18936068,-27.73735315,-37.72000541,67.95601159,-3.995957848,-8.290447963,53.56403869,33.71402352,2.173675805,72.87898387,-3.009775885,81.38200646,66,-37,29,70,6,12,49.80209774,-1.091200381,26.64131462,60.4,3.1,10.6,74.0364161,5.425928651,5.297170324,53.78804819,.243046891,-.586956708,41.46007849,63.73718081,39.17104894,44.15701902,-1.175046206,-33.74056901,73,16,85,80.03159444,5.072469681,16.77360662,63.17128171,49.55619892,-5.541354267,92,-9,62,82.21972797,16.09191128,91.006517,52,5,50,60.34477726,31.11631409,-23.76488105,41.8,40.5,32,85.58918472,.823145092,70.60948476,92.08225844,-8.20633707,1.911572388,45.83229627,-15.84402558,-43.29540603,81.32276633,22.34589151,32.54551212,78.52231994,-1.137995511,9.877842372,89.02927844,-62.51462529,-18.43881807,48.1363788,41.41599456,45.40132644,58.82530674,60.25263892,56.88902223,88.75173558,-72.37635664,29.55764768,38,40.1,22.6,61.1321631,78.0273845,66.2790373,65.05744543,53.20029478,54.89706419,61.6811147,19.24452506,-34.40177669,81.32430987,-12.76944393,4.599286476,55.08086766,-32.31107435,-35.39312103,51,5,3,71.59698496,9.498682735,5.277129443,43,-31,3,70.42102419,48.04532463,45.69482259,83.90561318,3.696480512,91.27721995,68,28,19,47,-2,-29,61.68116073,-3.896445188,-9.338153774,53.92750678,49.59128172,20.11690722,66.11044911,-2.269017665,27.66112595,39.43533413,81.62861397,-99.40055063,51.30817304,73.75023325,55.5815316,91.73994921,-3.265979597,9.538155594,93.82528374,-2.062629275,1.554815686,49,-1,0,81.34782794,-5.800530852,-18.71836794,61.84378814,-19.00410344,-5.55761807,32.5036352,-44.85094669,24.61713058,56,-23,-9,70.51,2.25,15.78,46.69662227,31.18756134,19.04398107,64.22588041,12.97151952,-23.44350988,77.22,27.75,4.2,56,0,-26,74.4348998,5.067419675,9.957181932,82.20915263,-19.72892927,1.468673154,53.89138592,-35.2512587,14.51002246,63.58981646,23.50312966,54.80610761,85.01940754,10.96114966,-3.262361635,46.05073493,-8.414399651,-4.080426835,70.88816715,-7.568900985,3.847009888,87.58030239,-87.62122363,88.40767426,89.2,-3.7,49,51.29605929,-4.870723318,-1.651916893,96.01698023,-26.78599028,80.17207658,45.04257777,10.3129868,37.17613384,83.68,4.54,17.31,65.81369838,-16.53071148,45.15119212,37.84294828,32.3702714,11.29605226,89.82111633,-1.776603282,60.9885057,63.22293757,-37.97344743,63.66466146,42.06119909,63.32696659,22.75339291,99.40303011,1.53911252,-.566499461,77.7,22.2,6.2,71.55488377,-12.28512297,-4.062826515,79.01745397,2.444913722,31.86268136,71.05220254,27.20960182,76.38700566,91.9298287,4.207751723,-10.91821152,51.57741738,55.90789295,14.25117331,83.85970391,17.47510237,22.0107544,83.02269344,-45.05979533,-14.18483051,82.84722749,-26.72982945,5.26375875,75.53014384,13.9439874,32.64200595,75.54970342,-29.24331756,7.224022908,77.72942377,-.563350145,67.36003778,61,6,20,75.78838053,-19.2794462,-2.398271838,54.58372582,5.99229521,-41.48440569,49.45182402,29.14677564,49.70961686,66.24395762,-2.690419988,-23.70135405,65.55063992,-78.24966437,36.65878953,61.68129537,28.56913005,-6.287552826,65.31847105,23.87818724,-5.970148377,63.15846063,78.68274715,7.334500919,71.58994197,16.43810277,-18.60686315,85.23660131,15.3778605,-.348289904,61.14288252,29.77769311,53.4061371,81.33305012,-17.79528388,23.14432264,41.2169516,46.90013556,-34.70787651,66,45,42,82,-15,0,85.4638214,11.71466185,94.38364405,47,-42,9,94.77,.78,3.74,41,-9,-3,60.5,-19.8,4.1,81.34812429,8.99126889,64.49265043,86.27923431,18.80218452,6.797678543,70.25735297,-24.1285854,-3.600872799,22.9301559,42.95796206,21.946282,71.57412344,32.36102432,36.34594402,73.99383257,-13.3189403,-30.88472438,32,40,16,89.78,-.73,2.96,89.3,-8.4,-3.9,74.75217692,-4.99241768,6.349408127,75.21773375,-31.78159007,44.0224049,76.52035237,28.17284782,8.195364265,64.79,-12.25,-2.04,58.1,53.1,55.9,68.64073408,-4.421381617,-30.62534165,61.64994567,11.87628084,11.0798414,52.58529468,68.14754224,47.32937331,90.99732614,4.332922128,27.67738588,46.46694791,.045435184,-28.98161241,80.05978689,-2.094058281,7.699416704,37.50502411,27.61618328,40.48059763,61.57263879,40.24235733,58.58415566,81.49924734,-8.615246957,-21.09593541,79.65996618,-3.531074473,19.58341871,87.02669057,25.23855486,13.37740816,65.61128409,59.09807278,28.672999,89,1,43,82.32881247,10.18265987,79.06977159,70.9,6.7,-11.7,83.74348681,14.81930295,-10.36663775,66.86346316,-71.9946089,67.39172825,57.62560917,-79.06641064,16.31733969,74.6,9.5,50.9,33.98406471,49.11321343,25.3098729,75.4963152,9.366732446,56.67397717,77.67149648,-24.1357791,8.458185052,47,-8,-8,81.24993451,25.74605506,-7.645322822,86.99902493,6.204486577,95.31505217,48.76886432,-10.63418788,-9.459653843,93.78062984,-18.67864415,4.109729057,82.76889352,2.254033218,-5.919970496,33.86700331,54.77541379,-14.42501585,85.14569118,-112.8988333,82.96545751,84.85020037,-4.361462983,43.09413577,52,-10,-23,33.63326125,-35.16620242,23.97951272,79.91182917,-28.47385857,-13.84207708,87,4,34,38,41,12,86.84952216,10.16475059,1.040696468,86,-7,0,95.72366205,-23.07102959,12.5426345,86.66555715,-96.58056606,88.86494302,86.10705304,4.43721567,10.21806215,78.63702961,-.290839045,87.63392521,85.88870369,-15.57286436,52.78677525,85.33646221,-7.98293107,-1.98174752,69.47124284,49.3581856,49.11013862,64.23591606,-3.723594151,-9.506771485,56.53068885,51.28661709,31.98816931,76.6113332,-5.115629202,-5.012666026,35.31572391,57.95605192,-13.45163976,77.42391328,-101.8085499,27.08947656,36.71540859,62.13497845,-19.96280549,28.14671616,50.95485466,37.54547309,38.40190564,-30.74376509,-5.882101364,78.25710315,8.3642768,79.02140972,66.2574332,-4.255961504,39.93250722,46.77916808,69.53937019,51.81863164,85.36884974,16.07838334,-23.99093501,81.31455004,33.59252659,6.266028145,51.57708362,-5.14628609,-8.190715296,86,-2,55,54.68851836,-28.13405517,14.26953297,62.83672723,50.58714097,49.76093519,62.14219187,87.41731749,75.43028014,63.34972859,71.09574956,27.93565887,85.50405667,8.963185217,93.11145185,33.39559933,35.15159466,4.388485506,71.57197947,14.08298554,-2.483481753,63.45557255,83.70192978,65.17482946,81.32684211,7.369688543,14.81890736,41,-23,6,85.7545137,-3.322863921,71.26279049,75.76066941,23.93036739,8.636237312,70,12,15,46,-13,-40,51.78452915,-73.89101811,24.5176104,63.61015229,43.90539673,39.91690229,71.58166833,-34.61783444,47.19695952,66.95736108,-32.03417012,-25.50213592,71.41676438,16.19262063,77.77465766,54.06657942,39.92430893,-15.82539008,54.04255333,36.92810845,30.54761258,89.88460233,-9.21912471,-15.55493881,72,3,23,76.3180316,9.16836822,3.679976657,61.62264019,-12.85172553,-3.973384802,67.61052668,55.66479375,6.925807088,59.21989426,-7.385450102,-11.44759005,71,-16,42,84.08175299,-123.3483812,50.80868025,71.59706053,-4.322826901,55.30496885,81.34816268,23.18472437,55.1385863,77.47500636,33.76248351,61.9943099,96.30623878,-4.578687758,.084136461,84.98390117,12.35581884,4.206123062,83.40330737,4.382192908,10.19347063,56.09172812,53.52935198,20.13164125,76.17241008,42.10695676,47.20972543,46.46610141,29.90430565,5.38619712,92.41018244,-5.983717353,19.87920572,60.71326443,-60.99815891,13.74083891,45.45359856,-68.79985536,16.85937371,72.9821351,46.78639324,47.47055524,58.99987574,-6.257522633,.971691765,35.1477539,27.13630335,17.8003293,61.39731327,-5.39116023,-2.591847461,63.76562628,56.42489617,17.90020346,61.68119041,7.03170416,-11.29593615,67.19126541,54.26645729,60.08978261,54.90538172,1.469019571,33.54201757,71.17091091,6.470452328,-24.28254997,46.13939833,-8.461926784,-46.37561925,68.71267792,59.07443874,9.132670298,52.4568526,-7.163314765,-3.7478828,85,-16,-1,61.7482248,15.93603279,42.92314177,83.84630302,-3.694153887,17.9826523,56.09157079,6.024043661,-42.43121391,91.01840631,-.116336939,9.620210091,67.15415453,67.43545789,76.98032463,91.08190696,5.810484712,38.38816172,48.69422332,-10.41826268,-13.37602537,53.17048687,-38.74628317,13.85027388,51.5115253,51.792829,5.521279965,45.01088192,-6.339896308,-43.41472596,64.59324171,45.92720292,69.61988972,54.25429298,56.85799527,20.63654374,55.5,-23.7,26,82,-3,65,81.91978656,-29.62231773,5.381601779,87.29445952,5.641463328,62.48707838,49.42512222,-33.09846608,.438840537,55.68903889,25.34520808,23.76873893,66,-9,18,64.59054218,13.06212541,23.70370163,88.63345081,-3.513089617,11.95138842,83.39698221,-135.8451286,82.70268266,56.49223399,59.7188927,-6.918602683,79.54172096,18.13156787,1.926006776,36.17158729,-41.56285348,16.15097252,64.81253511,-22.04683254,-27.20144843,48.90496644,68.20140283,39.31544406,61.68129743,1.308941686,25.5177755,73.60932374,9.332461476,5.039664198,94.98265079,.305674119,.699980853,50.78863482,8.971496756,-22.40601537,54.24080104,-3.944078185,60.01611057,79,11,4,94.79936274,.639121561,-5.075688174,63,36,1,59.17672506,-22.64587706,24.12612922,58,52,16,83.83954734,-12.28285877,-9.474831036,61.65861751,-11.5950034,8.45739783,79.55340865,-10.16706906,10.27600415,48.65915802,54.7174443,21.5055544,44,-30,27,52.3,52.1,31.5,43,-7,-14,40.46080817,65.5535257,54.59401237,78.35920581,30.83826418,20.1376614,69.94856464,4.173176037,-12.04651518,73,3,19,68.09930705,-7.554734337,31.72783283,53.08193082,40.46004513,-3.687304887,39.39527922,51.73904421,32.83801039,80.9014403,-4.864572254,-6.670425316,74.10889403,-61.55292307,-13.06567568,55.40071041,-41.52364194,10.21783016,65.5,-24.4,36.3,79.56127553,-35.16548045,78.13797573,62.08764,40.88547487,49.6742931,51,24,28,64.43,54.22,53.91,54.41405685,21.924874,31.50320907,73,-8,-18,64.48,54.19,51,67.77042047,104.6134404,-52.12559086,54.4240305,90.44399659,-62.8867518,53.84780825,-36.12602594,3.499540084,65.6,-39.1,-2,64.19335481,-.379229789,-31.0086512,81.34799423,19.74307455,-1.466163561,75.9,-25.2,-12.5,61.68118597,-7.786445519,-.011086859,76.5166681,-4.752268989,55.97050892,64.25356064,83.62605104,42.9198618,81.08095066,7.895486032,65.5121587,99.27664547,.653635086,1.907583559,43,-9,38,50.19194015,-19.78513237,-28.95053792,83.8372644,13.86534322,93.23062463,85.7151539,1.56714874,4.731526364,69.09561046,63.34527918,32.60782044,65.29634,48.89943811,19.96184415,86.2982322,-11.58780095,39.47391434,71.22396883,-36.27347534,77.6616261,94.53888866,6.477780944,9.062213901,34,-22,-29,81.41286973,-1.104084522,55.06782854,44.09575309,13.00283316,44.0787494,53.32551553,4.069284428,-22.61680615,45.85322425,69.70340123,37.17684355,71.1,-22.6,-15.4,82,23,26,63.56340485,-48.01563828,-29.27561671,55.5,-6.4,-6.2,86.90647382,-9.207770141,2.131274982,43,45,23,83.84363561,14.90423704,4.949013544,49.25226224,44.45654322,16.96422955,58.58,16.06,15.82,82.79796194,6.685060179,44.9663274,58.9,41.1,-.7,94.70109224,4.128639582,10.49099396,53.10130754,38.30890936,3.464393631,70,35,54,27.54159801,33.79735398,27.28263655,56.52907405,53.86601655,-9.886061,72.71034131,42.87668961,47.04630893,71.56933942,22.5713421,-.400955185,62.74209424,73.22428013,14.0213134,65.33049361,-18.83607383,15.03646351,72.66525736,-18.15938005,-19.17588994,55.49293113,64.75741984,49.79371586,84.26219871,12.71006434,92.16362435,49.9287477,4.453050821,35.97278233,84.20910496,-101.1930289,39.81045351,49.0866066,72.55296939,37.73853709,44.77078056,-63.58465303,18.97931991,51,-1,-35,57,54,60,99,-3,22,87.90464598,-63.79727202,93.47910604,87.73310111,18.90482993,-5.163441939,55.21146139,72.1756376,9.359795575,76.52677155,-25.53126959,21.56127115,54.6709994,80.0185184,51.4344142,41.16785074,24.86531729,11.25357237,74.05900918,23.40430489,9.353632912,51.5771861,4.217998634,10.37360986,55.66044196,10.88703177,2.758325617,97.97468916,-9.209195447,-2.842767063,86.69929479,-15.98849625,4.519727212,59,10,24,91.37777786,.373958518,-.903107461,83,15,8,51.56490043,51.62310765,-22.21196952,59.40427579,-95.95528783,68.75887719,76.53121382,-7.261174856,-4.3241042,86.75589647,-89.01192473,19.46418864,61.47229379,78.391981,74.29067299,79.54107136,11.64914455,23.50803464,54.10901605,-29.96286161,24.46710918,64.09564186,47.68835346,28.94099996,89.24548644,-5.424379029,-3.44916926,63.26744849,-34.93072834,-4.706294648,53.18317615,-7.653920297,-.620788039,68.89364762,-54.60993274,-.455460778,44.7,-34.8,-3.7,46.05344829,9.469381352,32.65132979,61.07086232,79.14220909,67.92271013,71.38200718,54.94292598,7.310442967,72.64837623,15.0087693,82.13809105,68.92866264,54.22767312,55.57550337,46.50740638,20.30616623,28.32262371,57.5597427,-39.9052715,4.719720358,75.47786466,20.68996334,62.23867068,48.08419017,62.46550259,14.03069318,55.8,-33.7,28.2,60,-13,20,27.2664364,33.16383458,29.10129394,44.45530899,49.79460632,27.32247422,61,-31,-4,39.92797031,-15.16793785,-38.23674743,83.58959597,-86.03856024,86.39367265,34.42723249,49.32024536,41.44508012,85.4196245,-11.96723973,75.11637585,74.07229434,-.631029346,-15.46169952,90.48302855,-6.801679989,74.85872526,65.93165913,-2.425037032,43.67212236,81.3287073,9.718186967,27.74872065,78,2,6,85.74494909,21.25150094,17.09675094,46.12975665,46.33444026,21.0456135,61.4437045,75.74252116,68.98942073,70.92049232,9.938218575,62.30541283,75.47671166,4.320787933,-11.631453,60.26352293,45.99007665,-5.324706141,63.44641966,-62.05619295,-4.449844017,71.59169616,4.4244281,-27.61894145,60,24,28,71.56626429,1.184966935,62.81944157,62.48103294,13.33130562,64.95931055,83.08541629,-13.98942963,-5.603287594,77,22,75,50,56,22,53.75962497,73.76091424,63.13946929,51.57728969,16.89860797,32.23020981,42.19248389,-62.82609947,28.54338878,66.65575523,45.15782047,-8.011298479,93.99286593,-30.98245277,-3.766793338,70.9,12.1,-17.8,56.41021081,-8.257450556,-8.60862777,39.0567951,-37.48530438,-8.56524363,84.82580258,21.95745697,1.800750908,89.52174055,-3.91943871,-4.628257464,51.89390824,-11.17436303,6.910817954,58.68036561,46.96217532,61.25905176,81.33977994,11.4477911,-13.57098553,66.01377385,69.33126761,74.83470725,42.41515123,-28.38160988,19.77313088,90.71540032,-16.43072125,40.33505104,52.20015406,-25.3889951,27.30845665,72.36174476,-42.00812679,55.88372953,65.95782168,16.15655535,14.82841181,60.77319665,77.72193199,42.39854508,50.10717599,-8.884252709,-16.13647205,53.2,5.3,-11.5,71.5636286,32.04869076,10.40746518,46,44,-24,57,56,49,90.04046663,2.194236637,39.49455681,71.96277283,-25.50531162,40.34596106,76.53042039,1.346632046,-20.18436299,89.15730398,-5.276151699,40.92227201,75.5417745,-3.431221937,-3.850971734,55,-2,-29,53.71192512,59.85501836,-2.988331113,70.12424022,37.16861762,3.265115761,39.55379209,-34.94121559,25.93900447,54.10354989,26.64399656,27.70342209,61.68154766,60.69671961,26.72013666,63.41692446,35.68079556,50.76101438,61.68124345,11.37479313,-2.553701422,75,31,35,76.53125886,3.051638243,-11.5779503,54.13729657,1.793211668,47.29634728,89,1,22,84.42397847,-17.49159206,47.96899803,61,-10,22,50.48161552,-4.896272696,-1.648988554,59,16,19,53.67987668,58.45151738,24.18634449,78.11755961,-4.416600872,6.393835804,69.66463761,-15.87582996,3.08454883,73,16,-1,68.2901769,-7.496763627,-23.29406095,43.45673627,16.59723951,25.88186465,71.59244544,17.48939529,-14.19542735,75.31569449,38.9854979,-15.85471846,96.82676657,-16.11884638,4.759182127,43.15821257,-6.069993457,14.85534781,65,-13,-19,74.07263347,-28.84811179,24.46280942,43.94783853,70.02503959,35.93082024,61.18540603,-70.62084485,7.148444155,41,-11,5,64.7874629,-67.12906701,11.4348366,65,-1,-4,70.46866697,1.784016148,13.82605246,82.38950057,-72.65876411,62.61586907,59.17823869,79.48714082,65.04880432,58.42595765,79.86772782,23.24476287,43.94457369,-4.354096317,-28.53419588,58.3,43,24.6,55,-38,3,95.5869046,.346525093,11.24631687,97.57,.77,3.45,64.0796225,50.58793571,12.75954922,73.05041017,46.82660745,84.1045752,81.03861136,-5.434279299,-10.32548642,90.3,3.3,10.6,45.72879276,-1.093317151,-40.43431891,51.58786247,76.57632796,49.8513645,94.01455371,-.140860505,21.79596332,90.29343726,4.225225991,28.27962709,83.12317235,-.069441896,62.72793647,43.0814406,60.91313512,29.12076293,52.67356632,75.1438902,62.04182296,54,57,16,50.65961987,-19.05958227,-3.975800612,65.47531393,4.101282083,-11.68598221,61.68114658,-28.77056628,7.116452127,81.04302484,10.53345244,-6.934559793,51.54345514,47.04518128,-18.27073224,77,22,55,79.1994795,-1.774150519,-.95349658,69.88513626,55.58360439,22.85616902,41.21701955,-6.618522363,41.22189127,33.29949582,-23.88453299,-5.215350583,79.99324623,-4.657055621,56.42542819,56.07252811,34.0476413,25.04868112,61.61666359,90.41491792,59.17105943,62.5,7,-33.2,65.93901448,74.55646641,76.15546682,32.01929469,32.35005169,34.44998463,80.13853377,.337267168,71.78633366,61.68116357,18.54124646,-25.41095164,71.59714823,45.1398701,11.27756318,77.9,11.7,76,51.57734923,33.82739319,27.47476667,81.8768147,.429672137,17.27519049,77,31,1,79.72088667,-68.21814708,11.74824482,82.05714201,21.86666579,64.32274757,46.34858541,-9.524807724,-46.63166426,53.58749804,-59.28194762,3.593811961,51.52098898,-.37609669,-43.55239646,62.00112027,45.05588983,44.23042866,70.41464088,42.70003691,48.55468837,45,-28,-32,60.6896336,68.24995779,49.89841747,74.54647957,24.01825769,2.657614431,56.13529215,-77.50237791,21.27364342,86.10362475,13.77020139,41.12173044,42.96617915,59.41092363,26.86339483,54.00611541,-31.56793664,28.57244584,85,-24,32,74.32685723,-20.25569055,21.28588389,57.00957796,-69.14035728,43.45540405,41.08321722,-22.54577435,1.784907358,38,25,14,64.20381489,.434740477,-24.02216433,91.08176574,9.586963566,-8.973411842,55.3001264,1.534901327,20.99626507,86.7626294,-12.30816075,76.72846529,68,18,30,51.53267515,34.15072343,2.61527757,53.67473068,-5.216176061,-8.142076095,76.90949332,-58.79902324,35.33875631,76.52851792,28.71676471,80.27094103,83.85831649,27.16003426,-3.178163793,63.04547508,-24.03421537,66.41822813,76.25953382,41.24348424,77.4841549,57.67401098,-43.35092473,-25.9373714,43.00312291,64.32753333,50.97277014,58.20867016,49.59526854,60.41743829,80.14288477,5.825115497,14.10223393,74,10,16,61.68135565,44.30937017,-7.950727326,67,8,41,51.53325312,33.1800893,11.88736257,53.58511708,-9.124894744,-13.06062081,63,23,28,74.17165044,-104.2041927,54.40661349,84.26117756,15.29617593,18.16420386,79.53514532,23.26935053,5.895018787,56,-8,-6,63.7405388,-7.100537526,-3.947525963,48.88987268,67.78213379,54.18614181,67.65623959,105.0134064,-52.31130696,73.4481238,47.00474372,78.68207856,67.64735709,51.09773671,53.53964885,72.0593975,-6.513575547,34.48666561,31.46184471,37.17732679,11.11386737,64,-10,3,83.34843331,-1.187094672,39.27616032,57,-39,11,72.18269172,-2.032251768,11.12626849,38,51,21,80.4,3.9,89.9,66,-41.6,5.5,61.69969503,89.67138921,64.55878391,76.6421326,10.66678051,37.14018642,71.56915659,43.97752942,59.51038405,68,-8,-10,56.21515635,-88.63877645,53.86942516,64.03266573,-27.14237172,-13.40081099,37.3,46.9,17.9,87.55448453,15.84936059,17.03510703,46.98003721,-15.55197154,2.565480049,89.20362181,-1.36445645,2.461652551,73.19570829,-24.24104105,-14.41405768,58,55,28,48.61206878,-.423249671,1.252331039,80.55745437,-29.09366961,19.65417333,89.01825429,-13.72971729,-2.219244426,41.5708078,43.57844622,42.10232946,39.72191485,26.56668729,32.90971917,56.45713097,-21.36864948,10.02715824,83.8614894,17.70317431,37.54357758,89.45605117,1.264922178,3.952961806,50.92114166,72.25302087,64.49936541,77.83285166,-.22287129,-10.36544026,57.88306412,-.267937155,18.58660986,84.86087291,-26.80516006,13.64938122,69.4287241,19.6218525,27.87840907,74.3556374,5.678768812,1.188382392,77.15701011,-68.0389185,10.7394497,67.62519792,47.10597264,44.10321642,35,41.1,17.6,71.50408079,-24.12304146,21.74001512,91,1,14,46.78807674,20.66895499,21.77770698,59.43010038,-6.68288916,26.47677438,73.80070427,-22.22261398,32.19613973,70,-27,-18,67.27,-11.89,66.45,82.01819244,27.32626662,3.578549973,50.67255726,-8.967277092,-10.23333388,64.38554823,-45.24500037,19.88354646,83.88773685,-7.008893896,4.640368883,84.12097874,8.954922827,58.28197661,105,64,86,66,-30,13,46.58338066,43.07305185,15.61187696,37.42082419,42.37703232,12.16108714,67.5,-34,49,70.9,-21.9,29.9,60.18439551,85.02752004,13.94692941,75.2796189,1.273903772,76.37534305,68.33951274,-8.393942977,-3.041376005,26.34242247,43.67285486,30.27080097,60.04044275,3.987578535,47.0785095,84.82899135,10.8107776,85.78861735,55.02392337,53.05473431,-4.316776346,59,6,6,67.43151304,-38.88645408,-4.325110241,68.91798017,47.78508837,66.985011,62.30515944,-82.5246725,45.21587565,21.85454597,35.21043013,17.91355552,55.23358262,1.167401315,-6.115401756,61.68125529,33.4116145,-19.35457974,55.42066962,88.92084446,-44.31319208,23.73249546,42.21088092,18.27635337,59.89550413,77.60684564,58.94403309,78.66863376,-1.931341798,47.93806701,46.08293151,-13.95688956,-44.68359116,50.02571866,2.330804997,52.57095706,56.67036058,10.23556351,16.20440434,71,-1,-2,53.78261626,69.20713241,62.63487702,61,24,-20,69,-29,-13,70.33458067,10.58433822,38.66508251,97.1216245,-14.45205231,3.872055076,50.69323898,.232268774,-.560927623,53.83133358,82.7080566,16.36222288,50.1,42.8,-16.8,30.90707034,47.77875225,-19.15916971,64.20562658,4.886783709,-32.92346448,71.57626389,.563422787,-23.94214621,70.66,-6.76,-13.43,55,43,36,76.53155533,-7.690831721,1.771127841,41.88444214,67.45135306,43.19090652,55.32238125,10.87551923,2.773951963,44.94578234,65.50115794,46.90774866,49.22659738,74.22162022,55.73823223,30.58201862,54.08380882,44.18483298,49.23438611,-11.31716795,-28.64904162,71.21253388,22.70250643,68.71426912,59.84540916,84.35718167,12.79520548,67.02091539,3.205898164,13.35359092,80.2,-6.2,84.7,57,13,15,95.08113564,-2.844946626,.75861611,91.81266643,5.077512984,9.783418849,51.57705746,-28.31319209,3.177094252,54.4,47.6,18.8,89.87598491,-6.100613319,-.308222562,66.08328249,58.20766502,53.44702046,81,-12,13,71.59688002,-4.744771513,-8.677246875,83.85622832,-11.88986377,-.972487844,49.27277794,21.92718202,51.0006298,75,31,70,59,36,-4,77.80250546,31.74606144,16.41965064,63.06397041,-15.23100803,18.27491236,61.68121736,-5.832155352,6.814358314,50.97687247,36.66247232,12.27168202,51.57711027,-7.370921902,.104968463,51.57709638,-7.070824121,-3.659039474,66.00908784,-49.16401945,-26.49672488,51,-7,-37,95.37596672,4.120447389,10.51711819,45.02607288,-10.04262484,3.156933198,56.94654953,51.40199214,51.97241594,52.29289037,73.51161172,57.69689738,68.5,6.9,8.1,71.58363968,26.81881837,-20.80157356,96.14889587,1.114890511,-.1343482,71,-7,-6,50.56265518,29.19989616,-6.413584347,70.27335507,60.02098359,79.94804956,66.4996932,6.799616769,38.05888003,74.54626811,27.16197826,44.15809984,56.44724267,73.21399839,-56.72762777,68.68160534,-15.27630647,21.7400025,61.42750084,89.89679444,74.86747135,69.22,-14.49,7.85,78.03167361,1.871075037,7.43095474,64.13459967,41.56827884,9.589241039,40.90312079,45.61372927,7.674368189,39.16728291,36.28375511,34.10050313,76.15347842,40.70994762,86.90819126,52,-12,30,61.6006017,-9.836816059,-30.03424236,75.20219119,4.207155544,10.06078707,53.9380289,2.979859794,5.65919721,36.64035897,43.85962454,35.86305831,63.59104478,10.83372352,2.064037162,80,-20,53,48.63737544,56.94335173,32.85279037,55.4,22,21.1,61.68144851,44.4838469,17.86146302,61,10,12,83.3580436,10.71932736,83.83042856,71.59690012,13.04425647,-18.17254113,54.15452202,-12.7066512,9.371809996,72,-7,2,46.01558254,61.86231028,33.9307985,47,44,30,63.57551004,3.438065654,30.10679915,60,23,43,77.15801692,34.62928098,87.55711519,49.9046782,-32.52044139,23.30033918,76.50751126,35.55919481,42.30820374,55,-1,-4,91.08178094,10.56225984,-6.168664219,63.50953909,.329930116,47.51219339,65,20,27,65.63083952,-20.26794486,-56.02076581,83.3244701,-5.223897718,-5.631954643,56.70015564,-68.0639744,2.111093724,39.25791463,28.98800414,33.67503986,39.47841981,33.16193711,11.66665026,86.10296742,6.023376567,38.14816062,55.44261705,9.340038999,6.453886023,60,27,49,60.60201928,80.81365296,39.08869287,52,61,28,90.78166672,-4.824614627,29.49808708,91.06744344,-.416547711,47.96747822,67.09686849,-3.158570392,-4.963962753,63,6,12,97.57129276,-11.00208893,-4.81849618,65.32279815,-.260708768,-30.34705668,76.34655255,-69.63122535,25.26727617,55.14386126,-31.46457443,-12.5256816,90.44487293,-8.814431632,18.52509967,48.3390492,74.31193079,1.15776106,60,54,7,36.52516959,-54.36714989,15.19645466,57.96559073,10.26915995,20.67080999,61.67588909,-45.49256094,-4.633001871,45.19567693,57.02198665,40.01289698,86.10026292,7.252213202,51.90583553,60.2429581,-1.67233653,-36.80990844,69.24627281,27.82420624,66.98453729,22.97779286,45.20499823,23.63103838,36.08727378,38.50778053,24.52541519,49,57,11,81.34793178,17.02357815,-13.89570045,70.8,-29.2,8,44.75,30.74,11.4,61.17313311,35.53429456,3.34380693,50.96462056,4.137325036,6.205642819,60.8817913,45.75008766,3.566776163,85.42828504,7.099976379,94.6999702,94.47054246,-28.62984913,-.30430986,42,-21,-18,50.23561764,-84.21337048,54.4825218,46,-11,24,62.0379955,74.69184803,70.29758352,99.64169674,-.02457714,1.605698719,71.15362035,20.89229615,-18.05019692,57,-21,-34,44,60,4,86.66560238,36.14867245,-10.87608385,49.63907788,-40.1710677,-.53880983,77.89,-10.8,20.2,48,62,42,51,24,39,68.55672207,2.211802373,25.86229042,90.85010158,-11.65763321,.642613513,90.14725024,1.245376954,19.22917073,49.36991983,38.3880657,61.92266342,93.53874898,3.702998579,-12.20551244,17.4989276,38.05427515,20.45112719,58.34191823,-11.02233759,-9.226703259,79,15,34,80,-1,74,31.90260945,-25.38891807,-12.48447736,52,21,30,74.03006303,-20.62329357,-7.565615991,94,-3,26,65.3876919,38.18666264,48.13984826,78.64914593,11.48638489,62.97453109,71.89175403,-1.0564598,46.60051984,79.2,11.6,73.4,72.84322572,-20.35061741,2.173703399,58.76953755,86.67898631,60.89383757,44.59639125,-27.77156623,.13930555,51.56008662,1.007772938,-17.86137299,46.63343833,-10.20153344,-46.76175609,53.2459479,31.26546222,32.51000807,61.68101328,-7.35947102,-35.30271526,51.05658522,-18.38605832,-39.30612415,48.59313081,-24.99259673,20.11350669,90.68269442,-.602766317,14.55361348,83.88743585,4.628208094,-11.74547833,74,-30,-13,54.14867987,-5.903488017,33.95220771,83.97,1.56,7.1,81.34787029,-18.25515106,.833228603,73,-21,-13,96.53107683,-23.95435673,80.83839142,85.26322358,-17.96970024,39.66138217,47,39,39,84.94186291,2.091230233,87.12057252,55.23298939,51.08409075,21.43230938,62.84804382,-11.43112981,-4.552237656,95.07024883,-6.01280957,8.21402486,69,36,64,84.04126002,-127.3069438,91.22459755,83.1027197,16.90595476,12.47706826,60.98176742,17.25358385,6.000918141,89.2,-8.6,-2,80.34,.96,83.96,88.5243255,-13.91564019,-6.771631032,49,41,-3,54.07795847,9.337793109,6.552525968,78,-17,-12,51.65996485,80.58645714,9.202734108,83.88724477,3.37717425,-11.70737288,28.02656059,35.57630822,30.8338057,82,21,4,74,33,25,71.55899501,47.20049815,28.738336,41.1205401,-12.83755371,-3.846532813,30.03898648,27.57470323,33.8887624,49,-31,-14,51.53820391,25.0390597,-2.395189677,54.33413896,-27.02669395,-34.82659679,91.53005318,2.093801706,-8.84431786,93.81182171,-5.375294196,33.43621121,59,15,28,48.16581088,67.4151332,45.40338087,64,1,2,80.8147298,26.44681181,53.13488243,50.4303546,76.09994042,40.2224842,73.55548764,31.46865431,56.19206855,40,-13,17,68.89695146,51.86065408,75.4063018,44.02204209,36.47014878,46.14680485,60.12703016,46.43941085,39.82403401,85.81844407,-5.607073114,7.463545164,52.65505389,10.4950927,4.975090268,46.31839534,-38.96833382,-15.34246554,42.05659093,62.60971747,41.85074181,37.07109009,42.60316659,10.9196778,47,-21,-17,42.71088573,64.65906135,45.18082715,82.6,-10.4,-17.6,57.6581235,8.294969817,30.30333515,99.61720508,-.197518929,2.091383121,80.63014905,8.846525802,21.12207474,69.7686633,-19.18602494,1.476112866,82.84209113,3.055463985,3.613341419,56,12,11,66.52191114,-14.729075,-33.7982694,23.67607661,34.52066373,18.89169319,96.54036511,.978726743,3.123375448,40.66436041,56.83579286,42.49218371,41.8562295,33.57461392,33.86264477,55,10,25,78.3267731,29.49099841,-21.36230366,76.56578303,38.4373417,4.226251679,91.08181225,10.50686496,1.861068685,55.32269376,3.844340383,-11.7512662,82.38427634,-96.04427151,55.59932314,55.44,29.48,21.97,76.91674958,18.42280579,84.13704337,88.65241642,-1.444339588,25.23741486,51.57716873,-1.035635268,10.72470204,63.12459226,-47.51425623,10.19149673,76,38,5,58.70782199,-69.92900535,3.963846405,62,42,-4,29.06527794,48.9835898,42.2497305,74.03904161,-24.80874988,58.96662048,92.3313486,-46.22876398,34.96007835,74.99878683,-66.99592395,22.63615156,48.53541667,-30.76756572,-16.83615494,94.90878761,-7.175917163,-4.938719796,49.16914047,41.4169353,5.546840726,75,3,53,81.31930448,-4.403166481,-16.86153662,62.03199755,-81.89812226,47.75815747,55.6036226,57.70957642,44.34565281,77.53816965,-22.25931976,3.712030171,89.98563087,-2.679092289,-6.038279863,54.18353117,1.970160255,11.32585995,65.73338526,40.98404393,33.56566673,76.05765326,5.656421961,53.47733762,69.9611231,-2.65577268,17.1784326,89.06236637,-14.14925916,37.95247011,73.42687427,44.80246226,82.25638021,94.61846975,.385244693,-.930363502,56.33168032,-22.60425416,-9.335897508,40,40,19,79.30200889,30.38130185,19.26043313,57.03541158,10.67331497,-5.090657604,50.50431255,25.97028114,21.97208192,67.47537225,105.6474093,-52.60554872,75.54859711,-29.15506883,39.3229745,60,52,30,76.87350706,31.05696921,87.29929807,79.8445857,30.30400108,12.65665144,42.13163982,40.94712576,50.31009243,52.29558913,-75.90869194,22.37594701,61.97810491,76.21236206,34.10167364,53.83299891,30.55556922,32.69076385,62,-7,-27,62.98733421,53.2077736,43.87053781,52.31368982,59.22354822,27.58080399,54.15573121,1.587578255,18.27771209,23.44206252,43.08337646,28.64687972,65.9,11.8,-27,54.11579226,35.27697719,-26.85231861,63.73911267,9.31770509,5.693106431,45,-20,-2,63.4299626,56.09493984,66.03627272,66.39608984,40.24416041,-3.495501422,47.80942031,10.41700648,56.70007897,85.88286229,15.01604849,.656840626,58,2,9,86,12,13,93.68021421,-10.35070883,25.58003759,71.5969489,-21.20454417,27.37835093,78,26,14,37.74813309,40.8813489,41.03689674,64.13698797,-11.77399956,-20.48855476,54.77367279,62.50575502,65.09442997,84.17627106,-125.5080393,91.36851323,69.66883701,27.03516595,80.40684607,75.14676606,-.599740124,15.65032002,50,38,34,60,0,-4,50,58,12,60.28219501,28.64082343,45.91683599,55.41706272,51.51491074,51.86875138,39.87351517,59.04337674,15.30934004,71.46898764,-22.53189156,-23.02551708,82.71103977,-45.87698667,-21.5895525,92.77327995,-46.69611694,82.98767988,55.27389833,-17.57465548,-2.409372747,58.67,39.98,12.69,68.40439526,38.01943415,-30.29521608,95.97721427,-20.37311075,2.071311363,71.53955565,-33.2154138,4.043301197,61.11123199,27.55477762,44.00571685,60.00398821,-4.665989236,14.25125751,63.78699223,-14.98807807,16.21588499,49,-6,0,75.5144032,32.36265275,6.578543613,55.02505812,75.42038457,3.376451381,46.03228813,49.02122184,31.08532426,81.92706759,-15.97753842,49.51961443,92.90957529,-.721364308,8.197127173,74.11334579,15.8972175,29.40787706,81.98064332,16.81279665,82.06182057,90.14864316,4.564981338,4.590292919,97.98796204,-1.776071471,5.138669042,70,44,-2,86.17534564,-15.38220887,23.66523784,81.37275564,-10.45811344,62.50538992,41.69194525,54.67333768,25.6661643,72,8,17,79.29609376,2.865466936,-7.491795555,54.68742362,-5.195758879,-8.170102591,83.62600934,-6.905129258,5.890002976,46.8,41.5,22.6,87,12,28,75,10,0,46.73122598,65.67663438,42.88594644,93.27893305,-37.94642464,15.6024247,74.96120648,-3.796421385,-21.05748722,60.26236135,-14.92504294,-31.05076363,49.36740388,70.1298668,-4.263933673,77.8,20.6,1,50,56,36,69.26651685,28.96940263,73.84691746,75.65440207,1.50919412,18.17241587,41.15459944,43.44971524,9.420704828,65.63460301,39.47077932,22.34062845,46.1147922,-.502038647,21.96698522,61.66964242,3.959871231,-15.20304672,38.10030715,38.97659017,37.64731313,68.21554223,55.01433372,65.31232205,46.68736864,37.72811116,49.88253103,65.35102693,9.409725992,5.738632186,81.0770725,5.752866055,8.74229687,61.68146705,35.71691145,42.41498853,50.31222758,44.51682573,25.82290337,68.07318429,-7.444175673,28.68757327,86.29824403,20.65734839,.742403981,60.11723217,44.75312025,32.93193394,61.65130356,-.30660378,-32.34170401,44.40499084,22.67831941,34.76022761,54.58465807,-20.70266458,7.801785661,91.06690779,.270079719,33.42048411,57.64030124,37.15118312,3.05141664,66.68471568,19.85666218,43.11640806,84,6,25,64.6878666,22.98907108,2.617817339,82,42,10,41.49653862,45.3461211,-13.67318296,67.14654626,-18.49451907,-20.34179977,85.8771305,7.729637805,86.13941568,74.04365536,39.90681497,22.6828303,79.32695776,-26.74767427,52.54853258,71.59689088,-7.13465584,-4.135963907,54.58333883,-88.12834271,64.38069893,67,45,17,97.92868411,-2.19983452,6.367396381,70.91943097,38.51478545,-47.22256847,51.55758239,4.61436633,-24.53258619,63.03640796,22.20727027,3.724129028,61.9708047,73.06745612,67.4873183,82.04698107,26.78914828,-15.45517274,84.94853636,10.77396699,.294047206,85.8,-9.4,-7.5,45.16382874,-17.63654426,11.04588131,60.73527467,9.298075517,-35.40518832,66.60159845,18.72741187,-23.62353468,22.90235857,35.98772375,25.68667081,91.07018638,4.649621876,21.80902028,61.64768102,43.40409859,39.56599876,75.70265462,14.55810206,15.42558254,39.32247642,-20.55255955,13.87406123,84.17704835,39.15645084,-3.642398135,77.22630109,-29.03452966,9.46447219,71.5970387,14.58736955,15.78540406,44.44041996,-20.67551353,15.68618164,71.16174428,-41.52189468,30.08878039,54,54,7,66.70879326,-7.582542169,-.199070603,83.75384349,19.4574966,71.83431033,73,4,38,78.12502207,25.89585155,8.277718011,61.56010914,-9.113797198,2.488943689,66.48124507,-9.68929647,-4.046322183,61.68123399,11.32818906,-4.847167939,57,-2,-9,40,55,-4,53.9496578,-9.156498881,-39.92660181,35,-29,-20,43.13686913,57.95847133,-17.50191718,59,-11,21,64.06300228,-34.25392902,8.085363332,34.93085944,32.12518048,24.24897137,67.67894701,60.07001586,9.338167289,93.12016535,-7.835689784,34.26935084,69.51,9.77,5.04,39.65840884,48.26587244,-26.40942423,73.42005263,39.3226474,49.72114444,89.52258614,-65.73197247,26.51566183,45.67970266,41.83662251,3.505659394]).map(o=>o/z0),fa=new Float32Array([26.93,-.33,4.12,57.75263983,-18.20221084,-19.39044518,37.97861598,59.93148631,12.45645225,45.38321611,51.45230415,35.57393367,79.22377368,-65.91287604,16.79042546,89,-10,4,39.4,-30.3,4.3,8.014305762,20.82969268,9.394331583,39,-3,-34,23,2,-15,49,30,-18,18.76589597,28.68478824,19.20059789,43.08153053,-5.98093072,9.976561111,30.07111552,-1.678770393,-13.08747478,46.88680472,61.18984285,-86.91056565,72.47021952,-27.92207492,-5.337689952,55.23182828,77.03949343,64.38815773,47.50474489,.07921435,-45.49889787,41.13223606,51.89483999,-3.151831381,97.84475821,-6.104574163,7.228215308,63,10,20,79.73854699,-7.694600541,-2.380331398,63.35129256,18.20351786,61.8460098,93.09741029,-4.6881352,5.855124126,41.21730023,62.97303858,27.92101579,61.68122822,-29.795989,39.13823402,71.56874342,-21.15637632,4.432895772,93.81826884,-7.605259939,66.78877047,60.13523208,4.306042644,21.97144785,83.20586635,-8.23565234,14.73846294,71.59710241,45.30970566,-1.670896871,57.32704855,10.46717709,4.655855822,91.2,-.9,28.1,62.05,58.84,71.32,77.8696842,-24.04317569,74.73377397,60.74468108,78.28893511,66.29602891,44.70141103,-9.231786129,-47.54244749,52.57985055,54.46419384,23.48126666,67,9,25,66,-10,43,70.13434239,-24.68742288,20.63868904,61.32284497,80.25869701,69.37108791,54.18474043,-7.60877817,.127819295,61.650308,-39.31565449,33.66993992,85.95955666,9.346849451,94.28121202,56,-37,19,52.72787663,42.51468342,3.595144259,49.43652814,63.56954699,36.70071608,99.81111899,-.931056748,2.730029101,63.4,-13.8,18.9,91.08188002,12.33901345,19.82456056,26,-1,-7,81.95325265,.844850307,35.56923276,71.03351008,57.41043323,81.90183495,51.71137212,44.24322662,-13.35699939,51.52431464,60.21591087,-2.215602302,59.304645,83.18410569,25.86088525,57.34288209,6.285416492,17.18954188,63.1191151,-26.49096286,-19.87758127,73,-22,11,62.0554551,69.83951524,65.74262088,68.69355328,-5.292810574,18.23014631,62.68196898,86.59665012,61.74354895,65.32367155,5.77538771,-41.50964511,56.64485346,-13.69674463,34.96465732,41.21683946,-13.6798668,-12.91937135,49.7616444,6.582976544,-42.78322348,49.15862247,66.5511829,2.510655593,65,-21,-14,6.828810315,22.96112774,6.024956844,32.2083798,34.36121352,-9.444342921,61.51479085,-44.92446608,5.556893733,44.08681422,65.12163445,52.18336978,33.1,-29.4,11.3,2.863322339,11.19539022,2.950107141,56,40,-13,60.9,-5.9,-7.9,61.06783573,76.89006239,36.09409415,81.08487719,21.48160754,89.7831953,19.35612015,22.58004026,13.34090367,20.93873702,39.78843555,25.25687815,27.83995574,34.9366402,15.53083658,74.48294823,-5.719343833,17.5223567,76.1141537,35.16608261,26.08064378,59.296068,18.60318377,61.37445451,41.39700024,-.289481644,45.62868333,66.63218445,26.60791408,20.15469084,61.66164778,-51.75001546,45.36551962,59.39664298,90.08512626,.792986298,83.16341959,29.49383131,31.93912511,79.73429465,19.27662203,28.4438506,60,39,-8,70.7,15.1,15.9,28,-9,-4,33.58170278,25.42142271,6.588898684,88.49399898,10.05612406,-1.845974954,88.26278419,2.183136039,62.14005979,40.8774422,30.05557359,8.901344547,47.30131738,-1.72609394,-6.622881118,41.93172104,-6.965339624,4.819320813,73.5091556,-20.56346355,1.476780486,93.01295915,-24.82552145,89.8131972,39.14648212,19.71000112,24.41922428,40.21954738,15.56062883,6.416776479,46.69281263,65.55949863,45.13072628,71.78,-17.97,-6.41,61.02163511,-35.91644834,-7.50787353,60.22027705,-6.532987417,-21.75109167,81.34806086,-4.890971763,55.26541103,87.73498088,7.188486536,51.97988314,62.36006415,26.21621201,25.429546,81.31098876,13.08331327,85.07072641,53,2,0,53.41988942,49.65939237,11.76742514,87.64901893,-30.02850668,73.4808003,48.63573587,37.80720752,-84.03161288,68.85943983,49.07526828,-.763207629,80.13334947,31.09043427,1.790792728,88,9,18,54.64237355,11.96723875,11.62903565,39.78,15.13,13.78,74.16075828,-1.636468991,-1.441970353,91.08171916,-6.844989068,-6.342586645,52.87247754,-14.07232657,5.192149054,67.14330499,-49.88093916,10.8875263,44.2,48.9,21.5,13.91882047,5.08716203,-25.29111562,64.13489939,40.13634907,22.87672004,27,-7,-6,44.2764485,-8.841550635,-40.37273232,52.60233277,16.91543201,13.58207283,83.88728241,1.507311719,-11.62516123,83.56708144,12.95612101,90.77447068,87.19014289,17.37040204,15.38058088,65.29922417,58.35439821,25.1765886,70.78541157,53.7264045,76.04368402,43.95155588,14.31645643,-15.07847936,78.93053413,-9.21643133,5.923187836,43.5,8.53,-7.03,31.12,6.82,-2.58,59,-12,13,39.45337517,55.63631097,37.06051487,55.98372503,29.01694903,46.24494918,65.2265669,-2.155485141,-10.41538079,38,9,10,13.96344751,8.829045725,16.01072637,62.58902273,86.32660838,68.89966129,40.68906959,-30.99433452,-23.05942291,90.01124465,1.377008419,-2.222511306,29.80147681,19.7167644,-15.68273058,39.9440343,36.6715205,-2.797909069,62.14339313,44.65473495,20.92063272,68.97605241,2.216411644,28.27932876,61.6440738,24.29943558,3.354453714,51.57721147,20.53319186,-.002523453,61,-10,-30,41.17246856,25.88850773,-6.336319908,19.01311895,-1.540859303,-10.03065967,27.12807237,-8.197355863,17.88852406,23,1,-18,32.70841388,.434598666,-27.37650618,81.35,12.9,43.11,61.64000334,57.82772868,15.67103369,87.82925651,-5.178403384,-6.74565966,68.94391194,65.42966056,67.39191476,38.65495377,39.0562135,-9.038222409,55.11721913,37.38846656,5.780839112,59.35171825,10.71282528,54.2985442,63.8,17.6,66,62.54006922,36.88014802,7.91132262,90.93097605,-5.128431214,22.57218235,87.72682117,-78.90710461,12.53637511,70.56361222,5.423299053,15.17452369,66.79195261,51.70239608,37.63516669,63,-27,31,80.92878784,6.969887217,42.10827,55.2097273,-15.27049354,11.94725451,41.21688977,-5.467674394,-7.813145679,53.35528349,-15.89272778,-17.91546179,1.439799412,1.426452962,-5.563372172,66,19,27,41.1615937,-32.14213214,.814108644,39.1450185,-11.50383388,-40.76316881,68.317784,-116.9509921,76.78952577,91.29256549,-47.70752546,-8.051848919,71,35,61,58.97375821,83.32384325,44.36248332,17.24790577,1.846709726,-6.489019559,51.57718005,1.904969588,11.05943503,53.00511295,80.54934522,46.16104423,55,58,40,81.55828506,.112256074,22.4625297,96.27539253,-9.342249778,47.83798779,65.42277255,-18.51150664,42.23084393,39.215047,-51.98169743,19.82931197,63.71642998,-19.09915309,15.22797935,42.19423942,-6.698248709,-48.04487796,68.89009851,11.61866246,9.69423231,91.08186713,4.76476076,24.69969807,27.41528013,-37.53899,18.11371166,47,8,25,25.00698478,-18.08164319,1.504827046,40,56,24,51,-5,-29,53.67347217,60.13470877,4.430366169,43,-2,-37,52.57767645,-3.754787615,-7.205543801,79.69612186,4.956130937,67.84757733,87.17189679,7.757712817,23.63026436,42.41255899,-3.131227669,11.70499183,28.22844983,-1.763946252,-11.7555593,22.36023618,12.77667049,1.594994119,88.73693353,-8.943097748,4.423232265,54.5490556,-.302396599,34.03423952,33.72067705,5.542556974,-12.28822664,62.1330558,75.32665416,71.39873799,74.50893868,45.82739661,14.39532632,87.25889274,10.90944049,-3.450717774,66,-18.5,-21.5,34.50533394,42.47447857,26.67427471,61,-30,-13,65,-26,-14,71.64618896,-9.785961063,-19.64370719,73.32766438,7.477984316,2.47790362,46.4931821,23.89096041,23.46447012,71.83020333,24.45635299,46.78128655,92.19197639,-1.237250569,11.41718156,22.82341366,8.288995095,-30.4925605,74.06100521,23.61935496,-.237643421,66.0865721,26.79667458,-55.15834128,82.28677789,20.48187683,91.94108377,67,19,-14,71.90223009,-.53909661,17.75556704,50,-41,-6,43,51,31,74.05089284,27.27473879,76.73301489,45.99088038,-7.479249502,3.045779025,54.69296949,-39.60609392,-28.94628442,56.05,-.85,24.24,44.54591435,14.81525324,-34.9630252,56.58033679,83.7555399,34.48708338,48,57,20,48.52807114,60.57033362,49.80041515,56,-43,8,30.69821491,25.5379923,11.87853527,46.35174934,35.14424494,15.86991916,63,-11,6,68,42,70,81.14107025,26.70723038,74.94683209,29.4362452,-5.27667956,7.001619628,30.69478023,27.21729645,4.48278126,61,38,-9,71.42204154,15.56829923,-15.31862145,84.5848135,-7.332867706,-8.045614224,84.8038063,8.684739638,-10.36348845,87.69526337,-3.586514468,29.79627387,54.01472317,1.968568745,11.33125578,62.82000133,11.08032214,-60.56293499,84,6,37,44.37219874,9.87691427,27.63055806,52,-2,-4,62.25805185,87.01624485,75.5217884,88.70212767,.113592425,82.7840627,31,7,19,70,-20,-20,86.60823637,-97.40231096,93.95329063,62.03634099,74.0003098,55.40554475,19.14689856,6.828875893,-34.43563318,46,41,-3,71.1535696,12.90233867,57.67686157,81.52275219,-2.190325362,-4.022541752,85.244264,4.615250457,-11.70617572,59.33858134,-7.375173359,29.4624274,78,-24,28,76.53150103,-7.751689312,-1.783782993,87.71765655,-.372825429,84.76815222,68.29262523,67.87614155,64.08694116,37.8,42.8,26.5,41,-17,-25,60.65096075,-81.88302954,50.52340007,67.0517408,-2.077232621,75.3360236,71.59721311,33.87362256,61.5061658,43.11003902,63.08926019,22.9116134,70,5,14,84.85352262,-14.02429319,18.42503093,20.33327967,3.981375388,-6.341989625,62,47,21,46,-35,-21,34.2,13.7,15.2,45.48871458,-25.28456699,19.82933216,83.92,23.7,19.4,33.29655508,49.52854799,29.44782566,45.2,52,19.2,67.63432353,7.947116319,54.7366499,62.79927731,73.85253907,14.7316058,50,38,-10,43.80946586,34.7125489,-7.901135266,35.88757029,55.73140947,36.46720727,55,12.5,40.4,54.04337196,13.09810222,-36.37036356,54.6,-54.8,25.2,81.34782902,-13.71564918,-12.75380314,37.93445417,24.42409931,4.340914957,46.22627078,48.05764245,-3.095273096,65.10524893,77.23752207,77.79244599,64,18,27,83.85600898,20.70654141,18.00502399,50.49793081,-17.17908593,-42.22832954,96.18952704,1.936634088,7.904712819,84.69317811,2.488183855,11.03658341,46.33678783,-1.262864901,-25.90369433,94.72616065,-30.84759147,31.63571634,46.02970602,3.659960454,-12.13078507,79.79287446,31.26748462,29.77407354,78,10,39,73.33292788,-4.12166695,48.9222613,91.66980949,2.308698201,.905073466,34.94388857,-1.9947361,22.48781619,98.43724104,.092367868,7.326388651,55,58,-3,55.41472775,54.47100284,34.45810111,53.39391177,-10.02056063,11.12879446,81.78154179,7.887082899,-9.650080381,34.4079743,2.955303372,-48.54294935,44.9,41.5,8.7,43.70954295,38.57919642,31.1200458,80.7,-18.1,-4.2,51.91766595,43.00488908,35.94478398,51.57715134,-3.897005469,8.37180074,45.89916462,72.16870819,35.38147262,70.76269623,-9.371485814,14.21061905,81.30638284,9.766949643,26.13366353,9.625747149,26.70683968,-44.64804701,17.77407345,26.83426948,16.13039291,68.85339522,36.46180143,62.65873833,100,.403986644,-.975625196,84,29,15,51.3,-46.8,12.1,71.59684031,-2.37278145,-19.12985762,86.10133795,-22.17217911,-2.457737511,72,-4,-2,51.57712805,-6.447421304,4.085913574,33.62058343,-21.10681967,15.21051759,77.9023207,-16.58867497,-8.088238869,34,-5,-26,33.51847561,-10.02812474,-10.35796361,25.24069997,28.63209169,-9.121829368,59.4,30.4,32.3,81,-22.8,48.7,30.42729464,29.281377,16.98968278,29.2,6.7,6.1,61.67356084,-32.34484326,-16.57043898,87.64229597,-3.034977227,-4.322182908,48.38608123,71.56023421,43.82336086,35.93784393,-7.071691768,-42.25371117,55,24,-19,70,-6,-6,56.6824952,10.34026694,-.707003502,70.36293082,35.86731365,-12.39723507,51.76309165,-.948246525,1.002805093,69.91577537,21.67596993,-48.91174957,28,22,5,18.76509527,-2.159721582,4.002595321,38.22629947,53.79264423,-4.031235544,86.17913604,-92.98686161,84.28365983,83,-8,-7,75.1734187,40.69452225,23.30154605,77,-27,45,1.037176162,4.525140949,-1.623128985,45.53995828,-35.31006365,21.57615118,55.80911205,83.40891639,67.1050664,85.6534746,6.34412898,59.22840564,77.15731846,34.62556307,87.62739933,42.66996616,-9.482423525,-36.23333616,82.3973882,-30.18779081,68.74821297,26.4,9.4,6,41.20580008,19.44608577,-31.55406255,72.58295014,37.19060119,-7.036610535,42,54,26,65.84349637,6.203049965,36.43257714,27.62146485,-17.67127921,-.3218874,43.63310409,42.17184942,15.62573906,44.49593021,3.617384676,-12.21054826,79,0,-1.4,41,1,-5,85.59443573,-105.3246662,52.96787472,78.51499603,-124.1289327,67.65610822,65.31274767,23.78977025,.134153677,91.90359373,-1.444232941,1.250799758,38.45939095,-9.951959974,9.140765029,66.49326738,-36.75509037,-10.3319483,65,19,71,48,14,15,52.34534936,28.84954974,9.118570669,27.16174942,43.7053644,-28.14597187,62.69630744,-73.72177168,21.96877906,51.57731607,38.11517543,8.556448472,33.64488887,15.54586505,2.552496961,78.55451771,33.14371009,88.0712507,11.29076143,12.02818553,-24.14059745,87.48598082,3.383947507,37.45278665,82.00514778,-13.64952175,7.824174201,84.49295777,3.137042397,91.36336762,72.05412256,8.275172058,33.23564333,43.5,-.9,30.5,21.90915245,5.281826387,-34.82225977,73.28021815,18.55131847,51.00534899,45.11138708,71.27429254,-82.76144291,77.10390899,-7.448467764,21.45893517,18.23673959,33.55084338,22.66825986,64.23665987,2.484280428,-11.54857678,84.58074295,-9.175719463,6.24256769,85.79243519,-102.7397481,49.08273315,56.4352709,42.29490863,63.91358017,78,8,18,85.98531466,19.43374692,3.038290173,71.57210026,-39.1499902,34.0917714,46,-22,14,57.18102476,51.64330861,62.54124129,72.17,1.94,14.62,71.5747446,4.672955968,16.93418813,56,5,12.7,75.03989368,41.55624333,4.129166541,55.37201783,20.08244722,40.84540376,45.68893548,-8.629483721,-46.51757056,71.82487494,54.75210239,83.28897163,70.44795431,5.00094654,34.02731977,75.5561101,-8.412300494,8.1456862,30.30410592,19.75697766,18.22045825,56,-9,-24,65.51895476,-1.371374472,7.429832738,33.05273947,50.77417918,26.22370602,74.11615904,-96.71679948,79.58084685,63,5,42,74.04457368,-23.89130436,2.086162151,53,-5,9,76.3,-9.5,-26.5,83.62113836,17.05576374,17.76603681,41.65320102,-5.82947743,1.683860976,18.01399583,45.07741611,-67.86464272,45.9763444,29.32717788,38.01951431,67.98191381,8.796203791,16.04486986,76.00721825,15.3526361,-.882280332,21.52745958,24.66833329,5.963706204,32.47628505,44.27084628,46.01219601,21.57853796,-20.82053974,.227622961,27.39106782,68.71749874,-95.11547488,53,-8,-24,85.96785991,2.424266932,23.46188385,79.57303383,4.117896482,75.80551266,34.9026736,8.063956721,-1.868051563,47,52,5,44.9930705,54.55644999,20.0036175,33.97329522,34.33841993,-24.53858294,80,12,61,48.07082685,-69.6093991,23.08298299,61.33220699,74.11447094,48.00652705,88.09348461,-71.46556586,-11.78583248,52,-13,14,33.59699386,25.83122711,-.603610407,96.43861825,.523068079,2.963287132,43.46638244,1.671854992,-12.05895544,40.34731571,.89426742,-2.350271637,76.53166026,-6.888890697,4.488978,30.9,11.5,-11.5,83,16,29,76.528184,8.595019207,21.37768195,88.44167429,5.037674442,78.55158139,49,-21,49,94.74881918,16.2104276,-9.125776977,81.34809637,7.515922223,50.83787001,65.29499944,53.5450444,34.52226211,81.63534562,-12.6634052,14.57517412,84.21867713,-13.03453331,7.885867827,74.84445289,-41.71280422,5.177712606,67.17715107,-10.24424624,-5.453991854,71.82,33,6.09,89.58540438,20.36065301,-2.256772094,66.819042,71.53804748,77.48236411,30.51445027,-.660718934,-19.3711233,66.4,6.1,27.7,62.3,40.5,34.9,30.29188226,50.29173914,-25.7431793,93.95533615,-.879245114,-3.034298083,32,-22,-8,82.37441334,-14.70315509,-11.55332557,46.46671131,-13.51367497,-12.91374426,52.30935852,-42.19134787,-7.138435176,65.91809374,15.33257334,46.20820098,53.84120277,54.7025446,34.38015452,26,-1,-15,33.41918815,33.41768887,14.95512569,66.67952473,1.386507464,55.25114766,17.73178404,18.05118338,19.84734887,88,5,50,82.80027646,5.500925095,31.16422108,30.12,10.62,-4.42,39.82755823,-6.421688387,25.15176467,84.11054706,-126.3631211,90.9878728,55.30861751,-14.15879654,7.047846616,30.95968689,37.64212152,39.96995849,85,33,7,52.17810726,46.27628537,-78.10145109,70,25,55,40.46855451,-28.67593689,-26.62332832,36.17443303,30.32558383,.437029338,31,-3,15,82.43324847,4.581173772,-11.73062884,52.12431723,51.56613153,38.27648653,96.44263592,-24.68739131,86.47078602,87.41929797,-21.35617147,11.61034673,41.21702399,21.7119697,.214847232,67,-9,-18,51.19369252,48.98245252,57.23090534,84.91128377,13.78087234,-2.077195329,87,3,13,41.2,-2.8,10.3,29.60258101,4.810458011,-13.10649829,62.42521463,7.379815206,-20.52160216,61,-15.3,-10.3,83.9605436,13.13576877,-1.24823168,.684466221,2.065616719,-2.919608907,42.66293367,14.99255647,25.92842191,94.83456723,6.78856283,11.33315975,98.14863007,-1.956563099,13.63958095,72.58311855,28.16313204,4.537722999,34.4,-6.5,3.9,80.12548824,12.12966899,82.07012733,55.4299554,-20.07154394,-10.19919282,74.07371937,30.61117586,.304272982,56.3,-13.3,-37.7,69.59719755,-2.960382187,3.626616039,51.88611981,-43.63037339,20.9319234,48.82588652,-1.186820071,-14.3941092,97.9029967,1.679359808,6.509178606,23.32922124,26.14391717,-47.47442699,51.56656883,16.02401005,-40.50890532,74.0443386,-8.286051853,-22.47964019,85.5620734,19.44756778,14.01815109,75.55014293,19.78337413,26.71163455,99.62853083,-2.232656645,6.462399653,77.58722852,32.4446686,86.37068663,73.63082872,45.88667297,22.45062922,35,10,15,18.1787136,16.27492522,-31.69048666,30.55925595,9.519536493,-29.3492624,34.16078244,18.4413228,-5.732977499,37,53,6,56,-13,30,43.89341394,23.01220898,9.85288378,50.64679831,-3.966524486,-37.79824068,23.30955672,34.95903006,-49.27886729,41.17786731,.467052178,-24.74771239,63.26564855,14.10648464,45.56518719,84.4,-.4,-1.1,41.10844118,56.88875107,30.43562641,89.92454429,-.320959877,24.9399374,58,35,43,66,5,10,45.91426438,-53.03363185,2.749701396,26.77402548,39.22870266,10.89252778,41,17,17,29,7,-15,88.74259114,1.816725632,97.66916703,63.69174035,-29.63199359,24.7840439,85.02520321,-.379776674,76.68216189,91.99738695,-8.917249629,-4.077388325,84.28107525,17.88040092,40.77838366,58,-32,-11,56.0930543,-11.32888079,-25.42733671,58.14524061,63.76236594,-6.736690246,58.97774141,-17.51504057,-33.13277654,67.66,7.95,36.3,40,-6,-42,51.54529911,18.38340971,24.62332224,81.4141227,21.32168089,90.96445563,56.70374958,-7.192546407,-3.861241748,92.42318507,-3.946217565,7.565834087,78.74090991,.028256771,9.632142204,86.24710609,-.426795776,16.05983952,37.25064659,3.520043931,-12.22144918,85.64926858,-102.198829,31.9356976,65.28550869,60.097181,3.832129139,47.73637944,-13.53582486,2.436520966,23.7743364,4.44777778,-41.38739761,61.86675158,7.413618803,35.67732669,73.6049017,49.82050686,74.72233047,69.45147623,-57.5036912,15.54166078,32.86746787,56.46975575,46.79679426,22.81225988,26.4115884,-5.404082302,39.65,-27.62,10.5,65.8293773,-80.20738638,38.92177015,55.73870578,6.816742055,10.97409083,51.57717205,11.4096492,-1.059090876,45.26603087,-27.71581062,-20.79911344,63.87515706,68.69353068,31.78193999,73.73045127,-11.33869141,.711053216,26.94474801,48.49130061,-12.14357657,87.26565132,-10.36298036,-7.381175563,45.93860178,21.28882506,19.7839773,56.24680408,-23.36293117,-7.911429378,55.63286852,8.351533757,28.01732016,78.90934099,24.40348292,-1.278404054,50.49436379,21.08129104,-24.67642262,77.48210551,27.45972796,73.32528709,23.49454433,44.56617653,9.933239781,78.12727413,34.64752268,24.43560943,27.92,6.08,-42.35,54.99242874,48.4010215,19.5981041,29.88017893,3.480783213,6.981249051,90.3,0,7.2,40.63443192,2.107016925,18.04786598,58.59327568,46.93871879,54.51435373,30.98246263,-31.84451587,-4.615803633,64.01083165,68.15579511,50.8793593,94.47938231,5.435663277,3.675440437,63.75729991,-22.23990789,3.413410857,74,10,12,38.76757674,-69.59600389,40.61555161,51.4,29,13.5,59.46907982,58.89160108,2.068469489,88.2749752,2.542433029,94.94450295,69.90948481,-4.689626112,.591306546,73.31997274,-28.42505705,22.65989401,59.03775301,18.34836543,30.49111954,49.22096529,35.10372864,17.33493735,47,23,20,53.86266573,46.76906336,34.84737305,57.63121686,-31.24631745,39.28323283,96.24425776,-1.374837076,11.71089824,61.86487516,66.88279088,71.99858599,83.86228921,14.38175441,26.4142956,31.95666805,37.02689013,38.27879703,33,-3,-12,84.92374055,2.284669575,-16.4110387,46.7879551,29.6174944,29.24041944,76.61862712,14.96708447,38.30349438,82.32190636,26.1522959,13.58918746,71.57841164,-.456738724,18.41555524,92.94450915,-1.543038845,8.381613093,60.50212672,79.62432206,20.02618955,41.16846475,30.79501468,23.14849493,35,47,22,89.06797504,-4.860125089,52.90616242,45.5,-28.3,23.9,59.12467159,64.34774981,.334647113,64.53646046,59.57112419,15.81005405,83.86537899,9.734651807,28.84507287,62.67976179,46.85344393,44.1430547,74.0699023,22.36848371,-3.305347171,97.91023826,-6.05766893,25.47128276,69,42,4,73.79249065,28.65620712,4.579452766,27.21,-.13,-24.75,63.29,-1.57,-10.93,60.80716391,14.24838035,35.47388494,71,19,50,80.24737786,6.177663387,89.8361561,99.87338108,-.489706025,1.491818919,50.02693364,15.27916396,28.41625616,26.14342189,37.1110072,-.845942908,66.92562707,30.3715642,-8.593606653,61.67270206,21.31045995,-28.82242201,64.64196654,-32.96699066,15.06376178,71.30776035,6.410848313,22.22541522,69.42996013,-63.34141873,45.47037759,45.05307515,4.164096469,-18.60995631,65.16233986,-38.10625837,17.80580312,65.99477328,57.84676953,58.41607278,86.29688999,-3.729264236,41.15384883,87.35417567,-90.03031816,94.2626699,45.46458652,59.4001396,3.295763722,45.11461029,-7.023603459,1.833969286,56.5,-6.4,-8.4,4.941292151,1.182162769,-10.81391811,35.54632228,20.31002993,-61.73977721,50,56,27,35.31124301,-1.273192397,42.92401216,77.15166732,18.62332645,36.20369066,84.83468519,-.814291218,3.908494673,89.70246521,1.984043565,70.27715189,75.00141146,-7.183312239,-4.239257805,40.1,16.1,19.6,7.082051117,-.486927896,-11.8767254,18,2,-8,73,-9,20,74.11867929,8.629488376,-10.11013073,84.69748417,1.530828858,6.475882684,83.12861951,15.76341486,78.34017563,40.46788707,-4.740101409,-2.862648078,54.40482992,-8.067382268,-59.01715757,58.85750993,58.33890982,68.17950925,83,10,45,29.03963252,11.0112445,-27.9277496,50.53407525,16.5462936,15.37848204,29.78966537,34.07768028,-62.42445637,64.23649475,8.160549537,27.4294906,72.26108956,-43.64766801,6.272875551,51.72342761,56.77063947,3.198664524,73.37076166,-5.282788212,12.33973498,91.66148724,5.64862967,-1.241803606,68.9,19.2,52.1,83.85807669,14.72428355,56.62135419,86,0,33,57.23404287,-61.20534396,14.16646063,32.5209236,.412886417,-7.765907093,43.93,-7.87,-11.44,67.64991803,.647718142,16.09228766,56.91,18.52,37.43,91.05366463,-7.010262145,79.09664939,59.57865474,-38.61290351,-32.2147712,43.98652244,-7.196851502,.230193766,48,7,11,64.97974973,75.26002017,-4.444870178,58.93939858,-8.110303629,39.43622221,71.7,27.8,76.1,62.0349175,-11.08159572,6.253376734,76.00760177,24.02044874,2.595973752,53.37654843,-21.06957766,16.6207703,77.75297591,-5.014921711,11.53215814,69.63809841,-33.79020823,-23.486416,94.30620093,.058542869,2.846060794,53.42052479,-4.12681934,-9.184786902,87.3138045,-.351852375,34.38429621,34,6,8,64.867732,10.42440321,4.029537778,43.46813255,3.589785932,-12.26512254,75.20161903,7.287620458,81.67250936,73.61056564,-113.401396,81.08933579,37.20715394,29.9866856,-7.473246024,38,-8,14,25.36582518,-3.978693514,-35.36400018,62.52633001,86.14416416,74.80408729,67,44,20,81.34803656,-3.435603965,40.35966459,49.64147861,36.97098643,-6.594034486,51.4,48.3,43.2,55.13513644,11.66220385,-1.10105595,56.80160307,-32.07060543,15.52798454,37.61984696,68.40640542,-102.4915219,40.66600812,.749919345,12.53548955,80.8,17.8,8.4,33.66676676,-10.41928816,3.312994733,83,20.03,3.33,41.15432058,1.442301366,-8.461254084,66.41413535,16.391079,56.18119245,45.0424092,-7.021705104,1.834020785,15.82665859,13.32380165,-30.62100152,74.55949635,14.90577311,-5.648147272,70.42602593,53.71988999,77.97251878,66.07702304,-85.63709707,27.02845384,44.00867469,-16.86996926,8.625377483,61,9,18,33.53038991,-.2306705,-14.51753485,71.59692279,-16.03820631,12.70526172,81.3064612,14.91992127,2.376085444,77.85404453,16.2778455,87.22047577,71.59710172,36.82409743,8.01808902,74.03865492,38.49696568,48.03366579,21.74053962,37.50918165,22.60955923,75.06145721,17.43420115,-7.91112871,39,-26,10,66.29528927,20.72117373,53.7339033,68.36622479,53.37618158,45.28388159,91.08182237,8.407670108,6.706676081,89.31624092,-13.26644924,73.10923968,80.55469963,-18.23504372,-16.08503288,80.1,17.8,60.1,93.46391037,-42.24658203,83.85284112,81.34803538,17.1780035,12.73360878,55.24363345,45.2944907,4.764521553,20.23930236,42.07545226,30.87295993,50.08249189,8.704607934,33.64969888,83.04743607,13.64986603,90.84437973,66.64418217,44.91379932,17.71310948,45,-16,-43,37,6,-38,43.81843435,33.2025163,40.1313272,14.63894458,-11.69201422,15.52087241,27,28,-2,45.05,9.77,11.73,68,-30,32,47.12036621,58.82663075,30.73585853,51.48743954,4.992282328,21.94357217,63.13114402,-24.99887564,13.34363651,80,11,-12,51,18,-25,46,57,31,56.48499616,53.93452241,55.53413355,75.6249477,-1.788635864,15.78950988,44.23505786,12.20062545,12.6477062,74.53557947,2.719088466,82.33239107,92.98159747,5.047164659,1.88366076,30.76049136,20.19225485,11.77462346,36.77473165,-18.69394606,-27.74248319,47.33875057,-43.56478114,27.43186614,74.54,1.1,1.72,67.52110472,62.35802858,74.92689306,68.91401959,60.1268179,62.10925319,78.76492462,34.67605934,68.4600667,43.93333846,-12.26397994,4.282805595,33,4,-39,53.63315267,77.58943837,32.6618631,36.73759041,-11.30955701,-21.17861253,37,27,-1,62.16305244,24.19427902,-26.1212037,78.22003044,36.65026836,4.501891995,54.13409539,-8.154860956,50.35456882,71.59713991,33.02909294,25.8432358,89.84384209,-1.61431524,59.95213154,64.68307211,-23.94841046,7.839563673,43.45718419,11.93700362,-4.401626168,94.43399914,4.131899544,10.48067279,43,1,2,99.66629619,.14893144,1.120475103,58.56418961,25.26233537,27.97959956,3.274885782,6.124240861,-13.45118572,46.57536321,-17.68875564,22.51814603,95.16009527,11.31725727,.483818512,77.49146811,-29.30565919,7.249308928,3.348220371,10.14792745,-4.168387741,26,-3,-4,88.23743454,3.801922152,58.90794981,41.00305643,37.07417753,28.63431602,87.28762391,4.679525976,85.36430819,76.02777794,2.095227282,-15.89838639,58,-38,-5,48.01,57.5,46.43,83.9,14.7,5.5,81.07294741,-16.54905588,23.33993478,46.53034346,10.95630711,3.350712465,66.85441496,8.5123043,19.75725876,47.96360684,24.40996433,60.21767665,73.09484564,73.6391129,-16.71321155,58.96321541,6.911959911,12.11793389,58.26216054,2.378637527,9.152916216,37.17740122,-6.945463737,-12.12445856,49.22561355,20.02207033,26.65039502,61.44,-7.07,-18.82,35.86917525,29.94691675,-63.30034535,31.93932057,1.417796351,-3.708224738,85.61265889,-.897293543,-5.859814816,62,-3,15,49.61233438,4.26868861,.244909038,7.989688157,20.74204588,9.872093179,64.75422374,50.60979346,-4.83188294,95.14549446,-2.382768236,-.493929828,23,1,-17,50.34,30.15,9.64,29,5,-25,40.98451636,17.07565906,2.802963813,57.15447835,-18.46453226,-36.66880997,29.47531991,-15.02681969,-14.81499803,68.599177,56.9718273,37.85881273,66.9981567,36.83173788,57.66845305,56.05672379,51.42729502,25.19102192,62.42721825,-54.32352123,18.87072868,44.94026835,36.90638895,38.04699533,33.94301467,6.557689455,-19.29565811,24,1,-13,64.6,14.4,57.4,81.7466403,20.00145024,84.77185627,62.34,-14.95,29.25,55.28700922,-12.57069975,4.507458308,71.83207143,-44.5554174,39.76299935,43,-34,-1,79.89549273,3.561758563,88.37627321,26.93190333,9.625246392,25.3901842,35.77202496,-14.90972505,5.01742415,43.43830137,3.962496725,-18.31570388,57.70805093,59.51609456,17.51537913,46.16536978,39.36346885,27.78929859,88.81248892,-.307758188,21.05790967,34.3,28.2,29.4,71.56594766,23.8379879,2.777691723,80.9636998,27.0247196,40.62762501,82.10887346,13.4468611,69.95649719,75.3050635,12.04269937,25.86988229,37,46,-21,72.22,6.28,-1.79,49.14717495,10.2432188,29.08495438,50,-6,4,56.5,-20.8,-33.4,41.02626497,20.31740786,2.204328437,38,-9,11,91.6,5.1,11,44.2,54.8,35.8,68,6,14,53.51343175,-13.34652339,-48.70335894,80.8,-13.6,17.7,95.42422135,-16.69540938,95.24500042,34,-3,-22,75.6244341,41.06356036,6.225973355,52.99609272,-1.452005314,27.33638653,63.66935805,70.01851516,52.81176392,33,-6,4,63.05131531,22.14200771,42.96596445,47.49366707,29.80127343,5.391854218,86.28533753,8.453202825,65.71897516,63,-1,-6,37.71488792,-.349707168,37.82744849,60.5,9.6,39.4,66.71278865,-.351986535,17.6780216,53.95013308,-23.15386487,-4.293634689,35.77730667,24.96676311,18.88848296,62.56,.88,1.31,64.40972844,68.90575656,50.83091161,29.54387514,28.95339094,26.21601158,56.32930003,52.52722045,17.28203992,42,-11,5,19.246762,-11.7661765,-8.908386634,39.67646664,51.10452868,52.65212812,61.91925826,12.3758952,-13.06401579,57.43039893,85.20961792,70.64865444,86.58677526,-89.20786848,88.13479687,81.34789173,3.270361575,-11.60764208,70,3,15,10.28646868,22.81005308,3.229794596,87.11248953,5.588044081,27.98820171,79,1,73,72.72405188,52.40208485,76.88168916,67.48704819,-24.75474369,20.5833587,50.03550521,-3.699197817,3.44213416,38.08643207,9.049864544,7.279756936,81.20089346,3.688836702,38.48558415,58.44719814,81.07032732,62.92131907,36.6,11.7,19.3,63.82898828,-35.31709505,-.593949674,40,-43,0,56.54859697,-14.91333233,-24.19388135,56.42214702,85.2565336,28.52533145,64,47,16,74.54769818,22.31707273,32.66929102,54,10,23,55.34473255,44.26455581,-13.12572013,81.32957293,12.24463427,40.96379206,56.0947568,76.34795725,-4.501632891,76.03991014,36.31970689,.767469896,66.9961815,34.21279318,60.52016441,59,-4,-1,68,-19,-25,61.47380032,-18.23627124,-28.09401248,71.53859727,-15.05622262,-17.66680114,50.49033309,47.29289141,4.703637249,61.6597596,-9.463301494,.53181972,87.38532902,16.97728129,12.90862844,31.8,22.5,-19.3,45.02369041,-10.3978919,3.327610473,56,-8,2,58.38227521,75.74340095,9.216043346,36.31352778,9.790599215,-49.74652829,13.43024763,-12.76449288,-10.18924341,12.52771378,-1.995181671,-10.78180063,42.02309209,-62.63855662,18.77676132,61,49,37,62.02719644,62.8309418,59.32339079,62.26552521,1.916945816,-11.9649457,79.5590268,-26.62796093,41.02762612,61.92259358,-17.55822076,3.012139583,65.28036851,16.38276242,-56.50848416,66.14050204,53.095283,6.312918214,61,13.5,-30.5,71.1,-14.9,-23,35.78336972,45.25846231,37.44378817,74.83023416,27.14447034,78.98850158,85,5,21,78.5,-3.6,26.7,81.33434851,-18.16940048,42.01295182,41.21698588,12.42185484,-.085884091,82.23918206,-7.789206559,1.760164092,70.56191443,-8.963975149,18.64017249,20.89445468,22.35553553,-.634402321,54.15998883,-2.896944515,18.55287266,73.58394702,-27.2367791,36.27058801,49.14074775,-21.03522485,-40.89104385,53.5530178,6.104809883,-42.5551007,39.12587633,-8.094298388,3.916563222,15.55541194,36.51745032,21.83227205,66.71720721,52.73258288,5.40625454,91.08182096,4.540416992,10.26773081,36,-10,-2,17.54703536,-5.570690831,2.113587068,72.87444694,27.14007192,21.17105374,40.49317678,15.53981103,-12.77315221,62.36836729,-5.913590532,10.45028081,74.55165321,23.89009676,-6.174221334,64.77937434,62.91729174,66.34316254,48,24,-22,38.7,-11.8,6.7,6.613563949,21.55790353,9.981339087,77.229505,15.28872384,87.20301789,80.96991104,1.77070582,89.16931678,81.2,-17.4,8.4,27,-111,-7,37.61041595,38.18511671,29.49761017,31.20301074,21.56099019,-4.772796342,71.22834525,-45.25004222,-22.66992455,72.65499922,-8.335626504,-26.342745,46.93562073,46.85985272,27.63227122,54.23,-5.94,5.5,46.27308686,47.42235117,-9.841129464,74,-25,-7,56.03931069,39.677439,9.114472642,76.19921109,25.23584983,-1.550032683,63.26750284,-11.74953708,-14.56042207,57,17,18,73.51696682,49.41472996,82.25953674,40.74,.81,5.46,52.32688666,-6.619088899,-2.898908997,86.96967209,4.574538698,94.26149506,89.130173,4.277401816,40.40361633,90.56423147,10.1096752,10.61002611,64.59234177,-4.749987952,14.44863916,51.54314144,41.93818057,-7.970715009,33.56931129,25.98675595,10.61356468,70.35057986,-11.04939442,-18.31621159,54.04966454,41.22941472,-8.246273883,40.02739415,49.46497099,7.050192037,33,28,-23,75.52125052,-14.74935255,-.056009204,74.55347211,17.12841962,21.30786755,82.8,9.5,-4.6,53,42,-1,38.55,12.51,11.13,93.71886947,-19.17416901,5.377960802,46.00618803,1.645192133,16.62857272,31,1,-28,55.8,7.7,-10.1,77.78387216,30.8905217,76.85173795,22.48499467,-20.82299283,3.986407871,74.09167271,-1.814036235,83.27792722,60.21282458,-63.20792683,-8.260467749,47.64372092,7.726977417,26.2516697,17.08397323,35.54415731,18.44697349,63.70140212,1.343322676,44.82560251,40.23087902,10.61819566,5.80003648,61.005973,32.5976352,69.91695319,70.73,8.6,10.7,62.84672616,11.4890182,71.94984418,62.72758054,-49.58978743,-26.59701391,60.65990979,19.63192092,35.31725303,62,22,19,85.04380377,22.69756871,2.69583485,32,26,-31,70,-24,-22,38,-41,-7,65.5,16,12.8,46,.2,-22.4,58.11,-9.79,-12.57,63,-35,3,81.3480359,14.69620486,15.79560256,65.33889433,30.38620562,61.39166783,60,7,-18,70.77034249,1.302068954,15.46374004,74.08338442,20.49936847,-16.39394907,81.31810567,22.37047905,13.40477061,88.60741368,4.655057763,9.759542271,91.55057344,-3.961200243,7.598849187,46.31421477,69.87487083,53.34078126,47,-12,18,82.01202523,17.48309005,91.76177162,79.67499197,-1.425897411,16.19434325,43,55,23,17.83303093,28.64727683,20.15665589,70.49469429,-18.36352526,11.39800072,19.69738395,-24.41448445,.478008432,45.31681632,-9.185912584,-43.52324253,46,-5,-30,50.27225772,41.80858666,19.78969415,23.45795,6.344963263,-5.244621688,50.577811,-7.171917962,1.832378167,46.98192572,57.53201428,42.98944834,45.5,1.2,-22.2,64.02799026,9.667856801,63.02717071,83.30275329,-137.73554,90.43657187,24.31,.71,-1.32,76.10496083,-5.091590171,-25.04303247,65.91698363,49.79755706,-5.96822564,53.21495669,-39.90646501,-26.54291072,38,23,-9,44,-8,0,77.00166041,36.63781173,13.50217978,76,13,42,49.11870458,-11.29773778,-12.79918987,50,-5,-4,55.11479314,-7.373097845,1.89656192,74.00805438,-20.33928369,-11.54556974,74.64880596,1.594342354,5.071188536,.761118513,.00795854,-.019298137,79.91768864,2.204066449,83.15673103,35.8,.8,-38.8,86.88823754,-89.33688933,30.97020185,51.34371223,3.944409038,6.787322099,81.34813274,36.3543706,19.71118763,29.85966606,33.77773031,-56.04049414,66.76870989,58.08794833,53.19040198,42.45688528,-11.93573066,13.77177667,57.89592077,81.6158943,66.5720832,74.08780786,4.194980455,-15.90497694,61.64122375,49.77444247,5.768513251,59.30195741,79.86013877,56.06805694,63.25197335,-4.442330978,2.711943771,93.01922255,1.606347347,21.38992663,30,5,-37,57.77128982,-34.4398303,-31.45616027,58.06046254,44.57042492,-62.70547597,50.62448372,51.59473193,23.0482996,77.08464924,.790745895,24.95209074,20.93321777,-23.88731145,13.6409902,30.64809309,-8.627094699,-34.76488235,66.14816004,-21.32454815,-11.20656774,55.98624946,-36.12427478,25.04437937,52.05,28.94,32.45,45.0219634,-13.91343528,5.064869324,49.13437383,49.87249775,49.16078064,28,3,-17,65.71462459,14.54664004,16.08764623,63.90307229,.612714382,18.92441008,54.08218036,-7.174044427,-3.791219994,55.07931332,8.35934627,19.53607237,90,17,6,28.57708589,11.36810573,-29.36659205,66.86476938,-3.522442063,3.525614125,49,26,28,64.01999988,60.6484465,16.07998243,63.67462673,49.41319879,-10.69762515,85.26932165,-7.927968799,-2.001322071,65.7,-8.7,51.9,42.57416539,33.37204433,10.82479699,68.76519656,9.308812635,11.8659589,62.03412919,76.0665595,28.54783904,50,-12,6,34.04523266,13.49964601,39.58384698,68.07640351,-10.57692869,-8.998925526,12.52479665,41.15267568,-44.58477385,87.72517806,-.400304252,69.41218156,37.39706514,-4.444019209,-19.79550578,64.60084251,49.35331817,12.39886457,74.96641522,42.24306478,22.07906219,78.34827523,-2.741801432,1.659587621,67.21856408,33.92018061,59.53375239,45.9857687,1.803840638,34.18948952,24.08323776,38.16961282,20.3105263,27.39738914,3.104959839,-33.6892947,45.68157013,-4.33779261,-26.97186956,84.47125619,-4.868371738,48.69982592,34.63791812,7.345578556,-17.29045409,80.6,12.5,34,48,17,17,76,17,7,83.85259258,24.82477234,5.934438393,79.51735171,-4.841428569,-5.505969326,60,54,2,69.23406529,29.79392436,47.95145697,60.3668845,8.077269971,29.82236827,81.33361194,23.30438266,-14.20213338,45.35727633,3.712573649,-12.13049299,56.69777228,1.426169078,25.76731853,75.80918118,-1.769362501,48.53493756,77.19190992,38.59147219,11.50330656,74.05461375,29.46806016,21.88260536,83.53968938,-4.426841315,-3.640917293,45.07474318,61.5979264,42.50535189,43.98745082,-1.202267828,10.53580937,43.88472857,49.4860357,29.01521231,39,-15,-1,41.17305166,-21.56004289,16.68474086,76.51835035,29.96034808,32.26211704,56.4,16.1,14.2,83.47542726,-6.773192616,-14.15052605,84.313698,-4.628188053,-9.140101641,62.69452412,55.2666064,67.38630287,47.01130229,-12.3051649,-17.32744435,71.59708987,19.81473299,26.84113233,50.43962269,-11.9573378,2.097317224,60.80452891,77.11925319,65.44680118,69.04859535,-35.24403982,11.86002346,38,30,-26,86.68961125,.511398251,11.19714764,59.19,40.14,12.21,86,-3,54,83,-6,19,30.73294835,50.25950286,32.4807413,56.18803313,1.745283489,40.84557828,81.33513087,23.83344854,58.22792999,30.69429804,27.5028716,.775962242,51.53552285,13.45604499,9.150400694,93.38944456,-3.011860366,5.69668117,93.0046135,-1.115049037,7.10198251,51,-12,-32,84,-3,-2,47.12151109,9.454628314,54.09803996,11.53682806,-6.165203858,.498021961,90.64219817,-5.511258909,-1.807973356,70,0,4,55.71900279,59.06456442,24.54723428,25,-7,-3,72,-16,-5,34.00400511,13.8641916,11.09251315,51.54835686,38.29957659,50.28736903,14.21281956,35.07621046,-5.403924498,48.29863797,11.96769799,27.22889662,48.69,28.08,27.62,55.1,-4.6,28.1,48,-2,-7,71.55267158,14.09995759,67.53692867,53.47332746,-58.62965874,14.86008176,74.44955799,24.87447929,67.24832456,58,-31,-22,66,17,44,76.9,-.4,-.6,16.27513635,31.71856,2.886150737,50.69275503,64.37043589,63.079368,59.70100475,-52.56531317,39.82016883,68.64588013,53.14206475,13.7650764,75.18304156,-20.59042309,16.96255447,89.64243507,-3.681975488,29.46786435,94.46360083,-5.384074679,-2.924694137,72,30,3,29.4,23.9,4.6,90.6648936,-2.362766061,15.06331397,41.69038073,1.522682418,12.01395027,46.54071269,-6.98929493,-3.521909172,33.85117767,41.46406941,1.635465363,51,-1,-6,51.54119638,2.278500269,49.89051666,70,19,-6,67,23,28,57.81194447,-8.201786459,-.269609167,27.67291408,5.555488743,-18.33824222,84.42173718,4.134857495,15.53818333,86.22441055,5.476817933,64.78202394,32.87557212,14.50002448,6.44645865,71,-23,2,32,8,11,67.02094624,17.06151031,17.65098902,92.22584757,1.928941995,13.11390117,35.17544596,23.59138708,-2.766438755,43.92874347,10.67015889,31.29123539,60,46,1,61.6566488,1.596613768,48.65944777,87.35010189,8.051742095,50.63071635,44.67275437,24.47471607,-77.96149744,72.22036669,16.58993533,39.038978,86.42844074,-15.62242695,41.91276909,71.06530155,7.264744746,18.90459515,71.8,27.8,-12,74.97533446,28.64642311,79.87311926,67.6433214,39.88286474,34.25320243,81.32076708,32.41666778,-6.828374292,26.49804377,23.74787055,23.47620905,28.3022697,-6.457902474,-33.93106431,83.4994017,17.89818868,90.71739242,41.19140989,36.19926128,-27.45168407,75,-8,7,61.59460516,-13.14076463,3.739270028,76.52822625,-17.83377247,7.52702388,50.60375757,-44.14946092,-19.78341615,30.93683862,43.36546659,44.29222781,45.01867689,15.09071722,11.37230859,80.89414261,-5.970699012,1.663815329,78.2,20.1,24.9,83.89779429,-1.149307629,-2.516031731,16,3,-6,78.15150646,27.81129102,3.209190407,76.51098723,-62.24937895,-11.85536165,38.09435322,40.12650064,13.15876339,28,21,-34,21.83906818,.480392486,3.093318442,76.26570055,40.94295717,4.347933363,62.7023093,-35.77388394,.521889871,81.35637246,24.17338234,-15.16654718,67.68620653,14.55691132,15.98268403,53.05748252,60.15122448,14.20573713,51.07661823,32.09126178,33.99224893,65.24908842,-70.56974641,72.7819552,71.00313142,6.545999603,24.14545121,35.00337457,-11.47306487,3.14263874,63.06766318,75.90379954,7.783494108,40.08097718,1.616308288,7.132357444,84.43083267,-8.74051107,-3.366515459,75,7,28,89.79470073,-5.431446625,-8.504699881,86,-14,11,79.5432636,-5.98342603,4.625226009,81,16,17,32.98535374,34.40526546,-9.300608408,37.8388719,-37.53217049,-7.785228849,76.49105756,8.905422477,66.57059757,38.86723558,29.99609597,43.8850741,75.54566818,24.99619907,38.58466806,26.77577573,-15.03822071,-12.67641829,50.88176566,-45.32748535,60.66851349,57.39992376,-4.806351299,3.435586078,70,36,37,58.24504576,-13.94750698,-2.077119964,43.86602559,27.21741149,-6.69707255,72.3558449,49.79606178,6.440125628,83.75614396,-131.2103036,90.92052682,60.91928316,-7.569574896,-17.68994922,31.37,8.54,4.53,38,44,2,85,7,-6,78.68785236,20.08032264,20.5593818,58.42769996,58.04206315,4.776980703,51.57716352,11.40475968,-3.201479264,71.91850206,-11.49343543,-11.85318912,70.66848556,94.53395729,-47.42171293,26.70884834,27.57207781,9.1451555,81.69317082,-1.292551861,49.32707154,70.61727714,37.13953971,-7.044442592,48.68463989,80.30772665,-48.93265626,95.75529673,-4.709942473,6.134361644,11.59019104,-5.117742893,-1.935743908,33.67421483,59.0598017,-22.90273824,85.52729296,10.94925146,-3.30517337,27.6,17,2.6,64.1299406,33.86681649,-8.872671294,47,27,27,75.08554116,4.325065873,32.5020559,30,-2,-8,43.56753146,48.64388335,-3.655970478,45.86812829,55.07690353,38.26684438,91.73953319,-9.798094175,8.510763957,40,-4,-6,91.08182304,6.52712531,8.818286854,82.57074697,-5.114707444,5.382695967,41.45953823,66.95622273,42.87386131,83.54075475,17.57970823,24.41814414,32.76360262,22.09056034,10.00698028,72.31831489,-15.25677766,20.06185161,29.28392441,1.654746242,-.611596868,16.48527369,10.5470828,1.385876915,58.03,-.84,16.2,82.7341398,1.21025097,1.212486116,83,-19,6,24.90397955,40.83031873,7.288090782,81.34807966,-5.860624262,69.88777243,44.09819679,1.357351744,-49.70842231,37.91463086,58.17933725,-16.03984543,75.03299321,16.95081678,-16.40142181,35,22,-29,77,10,22,30,5,8,41.21711285,39.57019847,2.986244887,81.34800824,28.55103253,-6.509152136,71.70270078,9.316735539,9.282158832,23.48965037,7.586334789,-17.2531574,40.53440072,5.082035804,23.48262618,74,39,25,26.25239947,15.82972169,1.469891641,53,8,12,56.75101523,-21.48738297,-49.26384335,41.21304008,-4.033171388,-24.07336839,67.36638545,73.48160053,44.01641774,61.97961253,75.88925728,30.34444412,76.4,-36.8,5.5,58.07440632,-18.83611333,-5.421130805,91.08172557,1.712453497,-11.8007321,82,12,39,43.11464251,10.9041201,10.31719209,89.08148531,4.423796904,17.6305105,85.07238163,-106.5273138,18.28376078,60.17141751,-9.890408857,41.71604908,24,6,-16,81.34788326,-28.70298556,13.76075547,51.53078109,53.87518087,-2.041433178,44.18418811,51.07745064,-20.54626394,50.2837447,-1.919760129,-15.20723228,67.15590846,16.3503366,-.069928118,75.19025289,38.52569345,37.63015142,71.83150456,4.358573366,-12.49758699,30,-2,-18,62.00293367,41.40532865,-17.53341936,10.60156012,5.92658891,-1.526776236,19.13462367,2.324256223,-35.17930012,82.33197596,19.66643881,6.008636765,74.09596901,47.000922,11.43828272,80.05557068,-9.050097056,7.093626815,45.59649203,30.76476238,36.22761255,70.17746908,35.41384524,44.61547015,32,-4,-6,42.2,-.6,-46.7,81.81845962,-19.4154598,.251355618,53.13508607,2.990958023,5.693745072,55,-35,-20,65.93418683,14.08345978,42.65004923,43.68166082,44.81849887,-33.25387497,84.92377881,-22.35779174,18.77042227,56.13798793,24.43278007,.425863899,41.97812003,-6.694868703,-24.1267113,75,36,35,61.6812588,2.049388343,11.10549153,76.7487004,9.890931102,-.202017249,64.59972945,50.94280274,-8.906329787,61.68137125,19.9315651,27.47170875,72,-7,19,12.01361213,46.00768555,-63.05523789,87,-4,66,72.38258206,23.05915293,62.08383904,94.39305757,9.631278406,2.467133257,82.32945846,-21.79810435,29.7189864,27.82028453,.107036185,9.660332469,72.54645313,37.11462103,-44.57805156,74.34373812,-37.69411721,24.30746507,84.92480304,17.11593936,69.53056386,38.00397145,59.22149787,28.23094133,42,44,31,76.4,-5.6,-18.1,65.94500643,-16.01617001,27.74415673,65,-31,-1,78.69663691,15.72166368,41.86127432,3.490260057,2.240525843,-12.19544252,84.68763877,-21.32772923,4.137817605,67,44,21,66.93939967,36.08724954,8.633346284,49.94181324,66.49536908,22.86275651,37.48,49.14,26.2,70.5,32.8,16,73.5,-19.4,71.8,97.21977059,-9.752625142,5.396879996,74.87369688,34.38263099,53.3509252,56.78828766,-68.54655664,18.22735081,46,-17,-15,64,49,-6,46.5367209,1.76835939,25.82225145,83.82859372,-6.637501825,80.78357917,66.21527008,4.156664051,10.16042439,75.9,-27.8,13.5,41.15930542,15.60183133,7.732025933,54.05324745,-.538176052,8.994243705,64.05278203,55.74616174,35.79593874,78.63477982,-25.48079851,36.28042346,86.09258979,-15.83719456,6.884333002,51.10246728,-21.37437928,-40.06769454,80.48121658,11.89189654,31.78636416,31.79281839,54.02800207,33.22452201,42.5,17.4,-35,27.75431013,3.130496521,-33.96637166,79.04410166,-26.91315859,32.84948387,27.23223533,10.5553317,29.41029907,71.40555336,61.75863169,-3.847346507,61.68151311,50.68631505,32.2229387,64.14139573,-40.79767351,58.48845744,83.51112468,5.481282978,-4.742204129,53.32,22.93,6.16,80,3,44,33,19,-8,67,-8,-13,95.32774063,4.275133446,7.120635543,27.64871709,5.503947057,14.21917397,75,-28,4,71.59707527,44.77461186,-7.753099651,26.32569611,6.940244897,-11.86956548,48,-24,14,60.25610561,71.94831342,62.32758115,71.57970028,4.71825137,-32.92139075,51.53613064,24.6247233,.756788037,42.54160394,44.63568689,23.30265013,56.5,-28.8,14.8,61.64490383,16.38527543,2.152916086,54.18345023,3.778207436,-11.82775868,77,1,2,76.4,-108.9,-25.2,22.56146378,34.71286697,23.67119302,13.38846317,-2.505828852,-14.32046361,43.87367836,-23.43493925,13.78955968,94.81598525,4.88404336,8.475833098,70.66108135,-48.61675675,-13.9646508,89.81489067,-4.944130227,16.49264112,82.35028419,9.595343711,10.15809024,81.34788558,-7.278280122,-4.432416876,52.21404383,-9.115804434,52.36985545,27.72296133,20.05370869,31.55672172,59.3,19.87,31.7,58.63465462,30.54218053,12.39337565,66.7007681,16.78215604,12.75944531,53.04342417,-9.74115606,35.65646753,.55720512,-.979300078,.223239236,71.5970972,7.977240227,51.23051253,40.94811591,-40.92702087,-14.21047913,73.6858633,10.21370285,22.27019132,59.28263342,14.52445742,-1.551033415,18.57992746,5.595929647,-8.340685875,93.44591175,4.28388044,13.90989025,69.1,41.3,52.4,25.28471355,16.59654494,-3.146527543,44.12366045,14.55207499,48.56483843,80,-5,58,64.19522034,30.17621764,-17.56444151,49.11122777,58.22702419,3.027923688,79.66263491,-12.91052187,7.034187905,41.20559553,7.081839672,-16.64196774,33.72245366,-6.660582759,-3.142163348,57,-17,-34,44.32906044,46.00888729,-33.977576,54.12438906,53.18274192,42.28929596,46,40,-8,83.88772314,-5.591200478,7.356652701,7.041107634,.073624457,-.17852707,35.4,38,18.8,91.08187525,8.652070216,22.70714183,94.88928882,4.902141391,32.06415627,72.61208962,-13.4906545,18.16299199,57.08,-7.13,-20.54,91.08174716,-8.043421027,1.812721333,61.89905283,25.13118985,39.58059723,34,6.2,12.2,77.5,9.5,49.9,39.90169253,42.93766633,34.74405639,47.66618935,53.99504279,3.369367695,17.48418852,49.24456635,-71.03617565,25.98596268,.146222139,-.353125544,14.14715702,14.41466635,-.983310133,27.95922645,49.07621252,37.27286293,43.9085299,42.79387065,-91.94313739,78.21617557,12.38846397,20.94837613,54.38094092,-11.22463922,-18.549547,42,-5,-31,7.333542083,18.81179221,4.988423929,64.14985627,31.22056362,57.42026822,75.97755419,17.00461456,71.28798751,63.74976219,56.6917329,13.57993358,16.48642229,27.9071686,-6.773212197,17.67519217,1.912768266,-9.801376236,92.5816435,4.46535872,10.33785245,78.63954589,20.67549672,88.69761125,61,39,44,69.34725175,31.90803972,5.192372631,57.5876019,84.64102288,42.24840082,91.50125025,9.475582715,12.58943955,85.55959297,11.45482699,94.14874553,68.82667692,69.86832179,38.33699194,35.2,43.1,5.7,41.17798414,27.2238887,28.88037903,7.840229544,-1.389905412,-16.71518387,16.87216008,38.17187173,24.72593128,43.95651243,47.77988083,-32.09325939,41.21692356,-7.151237379,1.849489316,86.29357812,-5.202269462,55.96706939,35,31,-34,94,-11,28,56.1511058,7.68276726,-10.78905492,74.54122088,3.095758589,38.71435326,86.10535191,4.922004093,24.44449516,28,2,-26,85.47,.67,1.51,43.11027769,24.98903851,-4.600763213,57,11,18,77.38652256,16.34413885,73.88750864,42.6,-18.5,-27.3,90.97970112,1.486485719,7.939145932,51.5771579,11.2534048,-4.434888141,80.7,17.1,-7.8,39,-3,-26,41.89120688,-26.89647391,1.288594916,23.7,2.9,-10.2,61.35577997,10.68630691,-5.598045064,79.50130597,21.59092632,22.94289451,44,55,30,67.46510972,2.865463985,3.300707618,41.20625202,26.4459148,-20.67009487,31.50816287,3.002878959,-7.609822004,71.59696773,11.36731023,-1.180787885,74.56194755,-25.4997007,33.78227023,34.59324028,40.38710823,48.12252935,55.29290424,1.578266056,33.83191573,33.47969734,15.85728579,27.07340673,17.83113478,1.8624184,-4.758231155,23,13,7,48,52,-11,80.09469466,28.18222063,34.79364987,77.62761738,-10.70988041,8.454923568,80,18,8,74.56285817,-20.87219718,17.16674308,66.76472379,-62.08173262,12.65190563,61.86984633,88.9855282,65.94623384,66,28,42,29.36044818,12.92866342,-21.89103423,25,8,7,75,19,37,84.3473555,27.88634906,4.410818954,48.93106821,2.902382049,55.8957897,53.27228718,-7.460741729,1.942591267,38.32055205,61.5897878,21.57094899,97.18605258,-4.604528021,8.874837034,38.46395026,79.95340763,-101.0440397,70.41428476,57.42887469,70.34918176,58.97829027,35.33328399,-48.36607292,61.86764169,-69.94667296,64.32159505,60.4,-14.1,-12.4,71.55205865,-97.40312053,41.97063635,31.05036824,4.58778515,36.58965464,88.65626662,6.242050772,11.48974229,55,-22,-18,81.31346077,32.00036509,16.07187346,54.30056638,9.211380141,23.00658729,74,-6,40,84,-10,-4,73,-3,-3,56.16101872,-20.96541928,16.63242723,61.68117208,-7.231519053,-3.99463923,87.9,5.3,37.5,32.59,-.33,3.98,71.58316435,-51.09692881,45.4172776,64,21,-13,43.73632022,-16.98915718,55.32888683,68.04403878,-60.38322153,14.59353165,63.22646497,.587610366,-1.513490711,53.5098481,9.472388193,30.09679231,64.8,25.1,59.5,51.22318624,7.595082359,18.96144895,54.45442434,-10.38241944,-8.007522972,55.89735693,83.77372346,52.18868312,80.29224659,-6.253988663,8.600748546,45.07759446,48.64267803,10.42647381,30.72067935,50.72092974,28.88752935,29.83893494,6.332492044,-16.25230698,88.30107721,-70.04478848,-10.08858361,74,-4,5,94.72379792,8.047384243,20.0667779,39.28369791,5.439509846,1.471566482,20.95739935,-3.749258066,-12.22315641,72.4337298,-7.851907942,-5.315073587,86.58204182,.027888622,11.02956925,96.84682036,-3.827861689,11.22597005,44.60826666,-1.592114642,.930697425,76.52430446,-28.52068633,13.50776171,57.40812159,35.52239755,50.54927644,72,35.4,54.8,38.6,35.4,-16.5,9.802258379,19.54560849,4.266178433,40.37334634,63.62704498,-3.308982604,50.33430705,55.36108032,23.22483818,59.8250453,83.15833338,22.83082627,66,-1,10,12.53262838,3.601603038,4.734218677,58.61464101,86.70131051,67.66846018,56.6717171,25.00184531,38.78404277,54.2204915,-15.18406976,1.588005036,60.42043623,-17.32226102,50.8087061,66.6,-16.8,-30.6,81.34801355,.86432903,25.12522475,84.31,-16.99,18.44,70.3,18.9,52.4,30.84237486,14.20333733,11.48577628,47.47,1.16,1.24,81.33370783,15.12661839,-10.25949225,89.08570703,-2.472981836,7.175879228,41.1582044,7.070662746,-42.09625029,39.40706049,6.3017478,-15.20721338,76.73234333,3.16710075,67.19330785,36.7,36.7,1.8,44.37448298,10.28619604,5.251567421,64,-5,-17,56,-32,32,52.18936068,-27.73735315,-37.72000541,67.95601159,-3.995957848,-8.290447963,53.56403869,33.71402352,2.173675805,72.87898387,-3.009775885,81.38200646,24.29434974,-25.2039993,-14.11645164,23.88780339,8.02174112,-17.98409602,1.581676874,2.554899608,-9.369365329,66,-37,29,70,6,12,49.80209774,-1.091200381,26.64131462,60.4,3.1,10.6,74.0364161,5.425928651,5.297170324,53.78804819,.243046891,-.586956708,41.46007849,63.73718081,39.17104894,44.15701902,-1.175046206,-33.74056901,73,16,85,80.03159444,5.072469681,16.77360662,63.17128171,49.55619892,-5.541354267,92,-9,62,34,-7,12,82.21972797,16.09191128,91.006517,52,5,50,60.34477726,31.11631409,-23.76488105,41.8,40.5,32,85.58918472,.823145092,70.60948476,92.08225844,-8.20633707,1.911572388,45.83229627,-15.84402558,-43.29540603,24.63834376,53.92659226,-61.67622196,31,40,-18,37.36,1.46,2.93,81.32276633,22.34589151,32.54551212,78.52231994,-1.137995511,9.877842372,31.8,18.6,12,89.02927844,-62.51462529,-18.43881807,48.1363788,41.41599456,45.40132644,58.82530674,60.25263892,56.88902223,88.75173558,-72.37635664,29.55764768,38,40.1,22.6,61.1321631,78.0273845,66.2790373,65.05744543,53.20029478,54.89706419,61.6811147,19.24452506,-34.40177669,81.32430987,-12.76944393,4.599286476,29.71033657,10.37020568,-51.21380565,27.65836573,18.59928026,39.95493234,55.08086766,-32.31107435,-35.39312103,51,5,3,71.59698496,9.498682735,5.277129443,43,-31,3,70.42102419,48.04532463,45.69482259,83.90561318,3.696480512,91.27721995,68,28,19,47,-2,-29,61.68116073,-3.896445188,-9.338153774,53.92750678,49.59128172,20.11690722,42.9,10.1,8.9,66.11044911,-2.269017665,27.66112595,39.43533413,81.62861397,-99.40055063,51.30817304,73.75023325,55.5815316,91.73994921,-3.265979597,9.538155594,93.82528374,-2.062629275,1.554815686,49,-1,0,81.34782794,-5.800530852,-18.71836794,61.84378814,-19.00410344,-5.55761807,32.5036352,-44.85094669,24.61713058,34.8,32.9,-9.2,56,-23,-9,70.51,2.25,15.78,46.69662227,31.18756134,19.04398107,64.22588041,12.97151952,-23.44350988,77.22,27.75,4.2,15,1,0,56,0,-26,74.4348998,5.067419675,9.957181932,82.20915263,-19.72892927,1.468673154,53.89138592,-35.2512587,14.51002246,63.58981646,23.50312966,54.80610761,85.01940754,10.96114966,-3.262361635,46.05073493,-8.414399651,-4.080426835,70.88816715,-7.568900985,3.847009888,87.58030239,-87.62122363,88.40767426,89.2,-3.7,49,34,-15,-2,51.29605929,-4.870723318,-1.651916893,96.01698023,-26.78599028,80.17207658,45.04257777,10.3129868,37.17613384,83.68,4.54,17.31,65.81369838,-16.53071148,45.15119212,42,19,-14,21.88681427,-1.585365595,2.364311069,37.84294828,32.3702714,11.29605226,89.82111633,-1.776603282,60.9885057,63.22293757,-37.97344743,63.66466146,41.217056,15.47760353,18.28919029,31.33,27.21,16.82,37.57472257,9.836137538,-51.36592127,42.06119909,63.32696659,22.75339291,99.40303011,1.53911252,-.566499461,77.7,22.2,6.2,71.55488377,-12.28512297,-4.062826515,79.01745397,2.444913722,31.86268136,71.05220254,27.20960182,76.38700566,91.9298287,4.207751723,-10.91821152,51.57741738,55.90789295,14.25117331,30.82200932,-16.00095012,10.52434074,32,0,-11,83.85970391,17.47510237,22.0107544,83.02269344,-45.05979533,-14.18483051,82.84722749,-26.72982945,5.26375875,75.53014384,13.9439874,32.64200595,31,35,-22,75.54970342,-29.24331756,7.224022908,39,-9,-9,77.72942377,-.563350145,67.36003778,27.28466229,4.336354204,9.845023534,61,6,20,75.78838053,-19.2794462,-2.398271838,54.58372582,5.99229521,-41.48440569,5.162305895,1.434991626,2.543806631,49.45182402,29.14677564,49.70961686,66.24395762,-2.690419988,-23.70135405,10.0525493,14.16927262,9.815005074,33.58985179,29.13698385,-22.4716659,65.55063992,-78.24966437,36.65878953,61.68129537,28.56913005,-6.287552826,65.31847105,23.87818724,-5.970148377,27.31185164,12.49694073,31.59711221,63.15846063,78.68274715,7.334500919,71.58994197,16.43810277,-18.60686315,33,8,-5,85.23660131,15.3778605,-.348289904,8.721300579,24.42233239,3.481558937,61.14288252,29.77769311,53.4061371,81.33305012,-17.79528388,23.14432264,41.2169516,46.90013556,-34.70787651,43.92935041,16.70004341,-40.02084936,66,45,42,82,-15,0,8.758425815,-12.78136917,3.327237951,85.4638214,11.71466185,94.38364405,47,-42,9,41.18739328,12.60271938,-8.361927118,94.77,.78,3.74,41,-9,-3,60.5,-19.8,4.1,81.34812429,8.99126889,64.49265043,31.23161464,68.76952353,-81.11450414,86.27923431,18.80218452,6.797678543,28.0327933,7.134908895,13.2714899,70.25735297,-24.1285854,-3.600872799,22.9301559,42.95796206,21.946282,71.57412344,32.36102432,36.34594402,73.99383257,-13.3189403,-30.88472438,32,40,16,89.78,-.73,2.96,89.3,-8.4,-3.9,41,5,16,25.07048826,66.06844777,-90.02010932,74.75217692,-4.99241768,6.349408127,75.21773375,-31.78159007,44.0224049,76.52035237,28.17284782,8.195364265,64.79,-12.25,-2.04,58.1,53.1,55.9,40,14,-11,22.86521366,1.0583408,-.808567436,68.64073408,-4.421381617,-30.62534165,61.64994567,11.87628084,11.0798414,52.58529468,68.14754224,47.32937331,90.99732614,4.332922128,27.67738588,46.46694791,.045435184,-28.98161241,80.05978689,-2.094058281,7.699416704,37.50502411,27.61618328,40.48059763,61.57263879,40.24235733,58.58415566,81.49924734,-8.615246957,-21.09593541,79.65996618,-3.531074473,19.58341871,41,28,-23,87.02669057,25.23855486,13.37740816,65.61128409,59.09807278,28.672999,89,1,43,82.32881247,10.18265987,79.06977159,70.9,6.7,-11.7,29.4,15.4,-22.9,83.74348681,14.81930295,-10.36663775,66.86346316,-71.9946089,67.39172825,57.62560917,-79.06641064,16.31733969,74.6,9.5,50.9,33.98406471,49.11321343,25.3098729,75.4963152,9.366732446,56.67397717,77.67149648,-24.1357791,8.458185052,47,-8,-8,81.24993451,25.74605506,-7.645322822,46.50808907,22.60381025,-23.20259991,43.77412622,11.90905219,-4.403062852,86.99902493,6.204486577,95.31505217,48.76886432,-10.63418788,-9.459653843,93.78062984,-18.67864415,4.109729057,82.76889352,2.254033218,-5.919970496,33.86700331,54.77541379,-14.42501585,85.14569118,-112.8988333,82.96545751,84.85020037,-4.361462983,43.09413577,52,-10,-23,33.63326125,-35.16620242,23.97951272,79.91182917,-28.47385857,-13.84207708,87,4,34,38,41,12,86.84952216,10.16475059,1.040696468,86,-7,0,95.72366205,-23.07102959,12.5426345,86.66555715,-96.58056606,88.86494302,25.84223489,-20.31944275,-17.79921387,86.10705304,4.43721567,10.21806215,41.64767314,-2.072909792,-10.34458247,78.63702961,-.290839045,87.63392521,85.88870369,-15.57286436,52.78677525,85.33646221,-7.98293107,-1.98174752,69.47124284,49.3581856,49.11013862,37,27,1,64.23591606,-3.723594151,-9.506771485,56.53068885,51.28661709,31.98816931,76.6113332,-5.115629202,-5.012666026,41.20052289,28.10638425,-11.94171926,35.31572391,57.95605192,-13.45163976,77.42391328,-101.8085499,27.08947656,36.71540859,62.13497845,-19.96280549,28.14671616,50.95485466,37.54547309,38.40190564,-30.74376509,-5.882101364,78.25710315,8.3642768,79.02140972,66.2574332,-4.255961504,39.93250722,46.77916808,69.53937019,51.81863164,85.36884974,16.07838334,-23.99093501,43.57119698,22.19229088,-42.06096412,27.02669516,26.93565033,12.7059816,17.67991677,48.62187163,-68.14153265,81.31455004,33.59252659,6.266028145,51.57708362,-5.14628609,-8.190715296,86,-2,55,41.21690305,-7.105996092,-3.449240817,54.68851836,-28.13405517,14.26953297,62.83672723,50.58714097,49.76093519,62.14219187,87.41731749,75.43028014,63.34972859,71.09574956,27.93565887,85.50405667,8.963185217,93.11145185,33.39559933,35.15159466,4.388485506,71.57197947,14.08298554,-2.483481753,43.9562907,14.31683648,-24.01305159,63.45557255,83.70192978,65.17482946,81.32684211,7.369688543,14.81890736,43.13324548,1.011692278,4.68002978,41,-23,6,85.7545137,-3.322863921,71.26279049,75.76066941,23.93036739,8.636237312,70,12,15,33.44487515,14.03293549,5.170334372,46,-13,-40,46,39,-30,51.78452915,-73.89101811,24.5176104,63.61015229,43.90539673,39.91690229,71.58166833,-34.61783444,47.19695952,66.95736108,-32.03417012,-25.50213592,71.41676438,16.19262063,77.77465766,54.06657942,39.92430893,-15.82539008,54.04255333,36.92810845,30.54761258,89.88460233,-9.21912471,-15.55493881,72,3,23,76.3180316,9.16836822,3.679976657,61.62264019,-12.85172553,-3.973384802,67.61052668,55.66479375,6.925807088,59.21989426,-7.385450102,-11.44759005,54.14876351,26.810364,-20.93475351,71,-16,42,84.08175299,-123.3483812,50.80868025,71.59706053,-4.322826901,55.30496885,81.34816268,23.18472437,55.1385863,77.47500636,33.76248351,61.9943099,96.30623878,-4.578687758,.084136461,84.98390117,12.35581884,4.206123062,83.40330737,4.382192908,10.19347063,32.07089708,4.813813415,39.96886853,50.33291557,23.33425136,-13.77843883,56.09172812,53.52935198,20.13164125,76.17241008,42.10695676,47.20972543,46.46610141,29.90430565,5.38619712,92.41018244,-5.983717353,19.87920572,23.42121972,47.76068791,-66.17596585,60.71326443,-60.99815891,13.74083891,45.45359856,-68.79985536,16.85937371,72.9821351,46.78639324,47.47055524,30.76033694,5.876749053,-13.14403945,58.99987574,-6.257522633,.971691765,35.1477539,27.13630335,17.8003293,61.39731327,-5.39116023,-2.591847461,63.76562628,56.42489617,17.90020346,61.68119041,7.03170416,-11.29593615,6.603319609,-7.264604496,.002156295,67.19126541,54.26645729,60.08978261,54.90538172,1.469019571,33.54201757,24.21166041,63.37233329,-88.5046192,34,-3,4,71.17091091,6.470452328,-24.28254997,46.13939833,-8.461926784,-46.37561925,68.71267792,59.07443874,9.132670298,52.4568526,-7.163314765,-3.7478828,85,-16,-1,27.36930813,18.99114905,-28.57951981,61.7482248,15.93603279,42.92314177,83.84630302,-3.694153887,17.9826523,30.76033983,-6.773688548,-3.09537774,56.09157079,6.024043661,-42.43121391,91.01840631,-.116336939,9.620210091,67.15415453,67.43545789,76.98032463,91.08190696,5.810484712,38.38816172,1.079772904,1.112204863,-5.479834855,48.69422332,-10.41826268,-13.37602537,53.17048687,-38.74628317,13.85027388,51.5115253,51.792829,5.521279965,45.01088192,-6.339896308,-43.41472596,64.59324171,45.92720292,69.61988972,54.25429298,56.85799527,20.63654374,41.26848205,-3.96458412,-10.2920996,16.48647172,9.777192174,-5.231732578,55.5,-23.7,26,82,-3,65,22,0,-13,30.21,3.43,2.92,81.91978656,-29.62231773,5.381601779,32.80675032,-2.344385236,7.009660602,87.29445952,5.641463328,62.48707838,49.42512222,-33.09846608,.438840537,55.68903889,25.34520808,23.76873893,66,-9,18,64.59054218,13.06212541,23.70370163,20.46521473,5.223343897,-25.55959128,88.63345081,-3.513089617,11.95138842,83.39698221,-135.8451286,82.70268266,56.49223399,59.7188927,-6.918602683,79.54172096,18.13156787,1.926006776,36.17158729,-41.56285348,16.15097252,64.81253511,-22.04683254,-27.20144843,48.90496644,68.20140283,39.31544406,61.68129743,1.308941686,25.5177755,73.60932374,9.332461476,5.039664198,94.98265079,.305674119,.699980853,50.78863482,8.971496756,-22.40601537,54.24080104,-3.944078185,60.01611057,79,11,4,94.79936274,.639121561,-5.075688174,63,36,1,32,5,-31,59.17672506,-22.64587706,24.12612922,58,52,16,83.83954734,-12.28285877,-9.474831036,61.65861751,-11.5950034,8.45739783,79.55340865,-10.16706906,10.27600415,48.65915802,54.7174443,21.5055544,30,-17,-14,14.61908784,33.7490428,3.769831858,37,3,10,44,-30,27,52.3,52.1,31.5,31.17925494,-3.606007062,-1.68583203,33.99701033,15.24769593,14.00166221,43,-7,-14,40.46080817,65.5535257,54.59401237,78.35920581,30.83826418,20.1376614,34,-2,-5,42.26353506,3.558462537,-12.33027841,25,16,-2,69.94856464,4.173176037,-12.04651518,73,3,19,68.09930705,-7.554734337,31.72783283,50,8,17,53.08193082,40.46004513,-3.687304887,39.39527922,51.73904421,32.83801039,80.9014403,-4.864572254,-6.670425316,74.10889403,-61.55292307,-13.06567568,55.40071041,-41.52364194,10.21783016,65.5,-24.4,36.3,79.56127553,-35.16548045,78.13797573,62.08764,40.88547487,49.6742931,51,24,28,64.43,54.22,53.91,33,36,-6,54.41405685,21.924874,31.50320907,73,-8,-18,64.48,54.19,51,67.77042047,104.6134404,-52.12559086,35,-17,16,54.4240305,90.44399659,-62.8867518,53.84780825,-36.12602594,3.499540084,30.76037968,27.11175255,-20.92872193,65.6,-39.1,-2,64.19335481,-.379229789,-31.0086512,81.34799423,19.74307455,-1.466163561,75.9,-25.2,-12.5,61.68118597,-7.786445519,-.011086859,76.5166681,-4.752268989,55.97050892,64.25356064,83.62605104,42.9198618,81.08095066,7.895486032,65.5121587,99.27664547,.653635086,1.907583559,43,-9,38,50.19194015,-19.78513237,-28.95053792,83.8372644,13.86534322,93.23062463,85.7151539,1.56714874,4.731526364,69.09561046,63.34527918,32.60782044,35,-8,-43,35.57730531,15.73576079,17.07140719,29.91139661,.563311887,-3.291507866,22.08773701,6.776731966,-4.331635662,65.29634,48.89943811,19.96184415,86.2982322,-11.58780095,39.47391434,71.22396883,-36.27347534,77.6616261,94.53888866,6.477780944,9.062213901,34,-22,-29,81.41286973,-1.104084522,55.06782854,44.09575309,13.00283316,44.0787494,53.32551553,4.069284428,-22.61680615,45.85322425,69.70340123,37.17684355,71.1,-22.6,-15.4,30.76053371,30.63353902,10.46589907,82,23,26,.193141471,-.250561824,-.023875131,63.56340485,-48.01563828,-29.27561671,55.5,-6.4,-6.2,86.90647382,-9.207770141,2.131274982,43,45,23,83.84363561,14.90423704,4.949013544,49.25226224,44.45654322,16.96422955,58.58,16.06,15.82,82.79796194,6.685060179,44.9663274,58.9,41.1,-.7,45.06499193,7.364553298,-12.02150446,29.46056614,16.58815299,28.12180941,94.70109224,4.128639582,10.49099396,53.10130754,38.30890936,3.464393631,70,35,54,27.54159801,33.79735398,27.28263655,56.52907405,53.86601655,-9.886061,72.71034131,42.87668961,47.04630893,71.56933942,22.5713421,-.400955185,62.74209424,73.22428013,14.0213134,65.33049361,-18.83607383,15.03646351,72.66525736,-18.15938005,-19.17588994,55.49293113,64.75741984,49.79371586,12.17242445,11.32537611,-2.147170269,84.26219871,12.71006434,92.16362435,49.9287477,4.453050821,35.97278233,23.24724717,13.65696556,6.121372551,84.20910496,-101.1930289,39.81045351,49.0866066,72.55296939,37.73853709,4.873057007,9.399024551,-4.357212476,44.77078056,-63.58465303,18.97931991,51,-1,-35,57,54,60,99,-3,22,87.90464598,-63.79727202,93.47910604,87.73310111,18.90482993,-5.163441939,55.29348731,21.50489692,-5.584895324,55.21146139,72.1756376,9.359795575,33,11,12,76.52677155,-25.53126959,21.56127115,54.6709994,80.0185184,51.4344142,41.16785074,24.86531729,11.25357237,74.05900918,23.40430489,9.353632912,51.5771861,4.217998634,10.37360986,13.7119467,-3.13517602,4.139246446,55.66044196,10.88703177,2.758325617,43,7,9,28.81,1.46,2.35,97.97468916,-9.209195447,-2.842767063,30.76027032,.93252897,-21.74629848,27.47405553,8.363480344,18.57712795,86.69929479,-15.98849625,4.519727212,59,10,24,91.37777786,.373958518,-.903107461,83,15,8,51.56490043,51.62310765,-22.21196952,59.40427579,-95.95528783,68.75887719,76.53121382,-7.261174856,-4.3241042,86.75589647,-89.01192473,19.46418864,61.47229379,78.391981,74.29067299,79.54107136,11.64914455,23.50803464,54.10901605,-29.96286161,24.46710918,64.09564186,47.68835346,28.94099996,89.24548644,-5.424379029,-3.44916926,63.26744849,-34.93072834,-4.706294648,53.18317615,-7.653920297,-.620788039,20.8037771,5.853924895,-5.588137379,68.89364762,-54.60993274,-.455460778,44.7,-34.8,-3.7,46.05344829,9.469381352,32.65132979,61.07086232,79.14220909,67.92271013,36.96094342,15.65979254,-32.8583191,71.38200718,54.94292598,7.310442967,72.64837623,15.0087693,82.13809105,2.937636061,8.892690682,-20.19194787,68.92866264,54.22767312,55.57550337,46.50740638,20.30616623,28.32262371,57.5597427,-39.9052715,4.719720358,75.47786466,20.68996334,62.23867068,48.08419017,62.46550259,14.03069318,55.8,-33.7,28.2,60,-13,20,27.2664364,33.16383458,29.10129394,44.45530899,49.79460632,27.32247422,61,-31,-4,33,1,-42,39.92797031,-15.16793785,-38.23674743,83.58959597,-86.03856024,86.39367265,34.42723249,49.32024536,41.44508012,85.4196245,-11.96723973,75.11637585,74.07229434,-.631029346,-15.46169952,41.1669158,51.89000081,-96.53748023,50,8,10,90.48302855,-6.801679989,74.85872526,65.93165913,-2.425037032,43.67212236,81.3287073,9.718186967,27.74872065,78,2,6,85.74494909,21.25150094,17.09675094,46.12975665,46.33444026,21.0456135,61.4437045,75.74252116,68.98942073,70.92049232,9.938218575,62.30541283,75.47671166,4.320787933,-11.631453,60.26352293,45.99007665,-5.324706141,19.50365212,7.699521655,-11.5442878,63.44641966,-62.05619295,-4.449844017,71.59169616,4.4244281,-27.61894145,60,24,28,71.56626429,1.184966935,62.81944157,62.48103294,13.33130562,64.95931055,30.73106656,15.68527678,-12.74159072,41,36,-30,83.08541629,-13.98942963,-5.603287594,77,22,75,50,56,22,35.83991142,3.475559789,-12.18596674,53.75962497,73.76091424,63.13946929,51.57728969,16.89860797,32.23020981,42.19248389,-62.82609947,28.54338878,66.65575523,45.15782047,-8.011298479,93.99286593,-30.98245277,-3.766793338,70.9,12.1,-17.8,56.41021081,-8.257450556,-8.60862777,39.0567951,-37.48530438,-8.56524363,84.82580258,21.95745697,1.800750908,25.96918665,18.18934789,.282634878,89.52174055,-3.91943871,-4.628257464,51.89390824,-11.17436303,6.910817954,58.68036561,46.96217532,61.25905176,81.33977994,11.4477911,-13.57098553,66.01377385,69.33126761,74.83470725,42.41515123,-28.38160988,19.77313088,90.71540032,-16.43072125,40.33505104,41.18825466,-3.233637637,18.97954591,52.20015406,-25.3889951,27.30845665,72.36174476,-42.00812679,55.88372953,65.95782168,16.15655535,14.82841181,48,15,-26,60.77319665,77.72193199,42.39854508,50.10717599,-8.884252709,-16.13647205,53.2,5.3,-11.5,71.5636286,32.04869076,10.40746518,46,44,-24,57,56,49,90.04046663,2.194236637,39.49455681,71.96277283,-25.50531162,40.34596106,76.53042039,1.346632046,-20.18436299,89.15730398,-5.276151699,40.92227201,75.5417745,-3.431221937,-3.850971734,55,-2,-29,53.71192512,59.85501836,-2.988331113,70.12424022,37.16861762,3.265115761,38,-2,-32,39.55379209,-34.94121559,25.93900447,54.10354989,26.64399656,27.70342209,61.68154766,60.69671961,26.72013666,63.41692446,35.68079556,50.76101438,56.67991775,27.78547521,-28.9502686,61.68124345,11.37479313,-2.553701422,30.76042098,13.34991641,-.918621209,75,31,35,76.53125886,3.051638243,-11.5779503,54.13729657,1.793211668,47.29634728,89,1,22,84.42397847,-17.49159206,47.96899803,34.55989615,37.74020036,-9.137882935,61,-10,22,50.48161552,-4.896272696,-1.648988554,59,16,19,53.67987668,58.45151738,24.18634449,78.11755961,-4.416600872,6.393835804,69.66463761,-15.87582996,3.08454883,73,16,-1,68.2901769,-7.496763627,-23.29406095,43.45673627,16.59723951,25.88186465,71.59244544,17.48939529,-14.19542735,75.31569449,38.9854979,-15.85471846,96.82676657,-16.11884638,4.759182127,43.15821257,-6.069993457,14.85534781,65,-13,-19,74.07263347,-28.84811179,24.46280942,43.94783853,70.02503959,35.93082024,10.06038195,-1.984152606,-16.45077928,32.27956526,19.19161496,-49.51304755,61.18540603,-70.62084485,7.148444155,41,-11,5,64.7874629,-67.12906701,11.4348366,65,-1,-4,70.46866697,1.784016148,13.82605246,82.38950057,-72.65876411,62.61586907,59.17823869,79.48714082,65.04880432,58.42595765,79.86772782,23.24476287,43.94457369,-4.354096317,-28.53419588,37.31149505,-12.25325832,-19.0727907,58.3,43,24.6,55,-38,3,95.5869046,.346525093,11.24631687,97.57,.77,3.45,64.0796225,50.58793571,12.75954922,42.66473258,3.957085277,-18.37753958,73.05041017,46.82660745,84.1045752,81.03861136,-5.434279299,-10.32548642,24.6620954,-9.884924263,-11.34122249,90.3,3.3,10.6,45.72879276,-1.093317151,-40.43431891,39.34,18.46,12.96,51.58786247,76.57632796,49.8513645,94.01455371,-.140860505,21.79596332,90.29343726,4.225225991,28.27962709,83.12317235,-.069441896,62.72793647,43.0814406,60.91313512,29.12076293,52.67356632,75.1438902,62.04182296,40.95297785,-.608433457,-.056850174,54,57,16,36.69740229,16.34157771,.276816698,50.65961987,-19.05958227,-3.975800612,65.47531393,4.101282083,-11.68598221,40.6,5.6,25.3,61.68114658,-28.77056628,7.116452127,37,1,0,81.04302484,10.53345244,-6.934559793,51.54345514,47.04518128,-18.27073224,77,22,55,79.1994795,-1.774150519,-.95349658,69.88513626,55.58360439,22.85616902,41.21701955,-6.618522363,41.22189127,33.29949582,-23.88453299,-5.215350583,79.99324623,-4.657055621,56.42542819,45.00657275,25.75218107,.841143188,56.07252811,34.0476413,25.04868112,61.61666359,90.41491792,59.17105943,62.5,7,-33.2,65.93901448,74.55646641,76.15546682,34.06277371,11.94844919,16.98710831,32.01929469,32.35005169,34.44998463,80.13853377,.337267168,71.78633366,61.68116357,18.54124646,-25.41095164,71.59714823,45.1398701,11.27756318,77.9,11.7,76,51.57734923,33.82739319,27.47476667,81.8768147,.429672137,17.27519049,27,-1,-17,13.30813208,9.043175424,-32.38903384,77,31,1,79.72088667,-68.21814708,11.74824482,82.05714201,21.86666579,64.32274757,46.34858541,-9.524807724,-46.63166426,53.58749804,-59.28194762,3.593811961,51.52098898,-.37609669,-43.55239646,62.00112027,45.05588983,44.23042866,70.41464088,42.70003691,48.55468837,45,-28,-32,60.6896336,68.24995779,49.89841747,74.54647957,24.01825769,2.657614431,56.13529215,-77.50237791,21.27364342,86.10362475,13.77020139,41.12173044,42.96617915,59.41092363,26.86339483,33.47586559,76.54986481,-106.6470787,39,-12,14,54.00611541,-31.56793664,28.57244584,85,-24,32,74.32685723,-20.25569055,21.28588389,57.00957796,-69.14035728,43.45540405,41.08321722,-22.54577435,1.784907358,38,25,14,20.80240016,44.34249914,-46.71854654,64.20381489,.434740477,-24.02216433,91.08176574,9.586963566,-8.973411842,55.3001264,1.534901327,20.99626507,86.7626294,-12.30816075,76.72846529,68,18,30,51.53267515,34.15072343,2.61527757,53.67473068,-5.216176061,-8.142076095,76.90949332,-58.79902324,35.33875631,76.52851792,28.71676471,80.27094103,83.85831649,27.16003426,-3.178163793,63.04547508,-24.03421537,66.41822813,76.25953382,41.24348424,77.4841549,36.18788554,3.769049291,-51.8256326,21.03746937,33.17255136,14.2611116,57.67401098,-43.35092473,-25.9373714,43.00312291,64.32753333,50.97277014,33,-2,-21,58.20867016,49.59526854,60.41743829,80.14288477,5.825115497,14.10223393,74,10,16,61.68135565,44.30937017,-7.950727326,67,8,41,51.53325312,33.1800893,11.88736257,25.48013508,-.502550649,-.576251511,53.58511708,-9.124894744,-13.06062081,34.92861268,16.80084937,-5.348013625,19.07872973,30.27621748,2.23057087,12.12519213,25.52903584,-47.49486903,63,23,28,30.73869012,4.120174633,-19.90414284,74.17165044,-104.2041927,54.40661349,84.26117756,15.29617593,18.16420386,79.53514532,23.26935053,5.895018787,56,-8,-6,63.7405388,-7.100537526,-3.947525963,48.88987268,67.78213379,54.18614181,67.65623959,105.0134064,-52.31130696,73.4481238,47.00474372,78.68207856,67.64735709,51.09773671,53.53964885,72.0593975,-6.513575547,34.48666561,12.86992737,22.82626691,1.849411476,31.46184471,37.17732679,11.11386737,64,-10,3,83.34843331,-1.187094672,39.27616032,23.56889294,30.60097745,21.06491237,57,-39,11,72.18269172,-2.032251768,11.12626849,38,51,21,80.4,3.9,89.9,66,-41.6,5.5,61.69969503,89.67138921,64.55878391,25,1,-16,76.6421326,10.66678051,37.14018642,71.56915659,43.97752942,59.51038405,68,-8,-10,56.21515635,-88.63877645,53.86942516,64.03266573,-27.14237172,-13.40081099,37.3,46.9,17.9,87.55448453,15.84936059,17.03510703,46.98003721,-15.55197154,2.565480049,89.20362181,-1.36445645,2.461652551,73.19570829,-24.24104105,-14.41405768,58,55,28,29,28,-34,48.61206878,-.423249671,1.252331039,32.9,26.7,-17.4,80.55745437,-29.09366961,19.65417333,89.01825429,-13.72971729,-2.219244426,41.5708078,43.57844622,42.10232946,39.72191485,26.56668729,32.90971917,10.41930621,6.25127488,-10.78903002,56.45713097,-21.36864948,10.02715824,83.8614894,17.70317431,37.54357758,89.45605117,1.264922178,3.952961806,50.92114166,72.25302087,64.49936541,77.83285166,-.22287129,-10.36544026,57.88306412,-.267937155,18.58660986,84.86087291,-26.80516006,13.64938122,41.21704307,21.25555208,6.043712013,69.4287241,19.6218525,27.87840907,74.3556374,5.678768812,1.188382392,20,-3,-1,77.15701011,-68.0389185,10.7394497,67.62519792,47.10597264,44.10321642,33.69,15.55,-53.33,35,41.1,17.6,71.50408079,-24.12304146,21.74001512,91,1,14,37.25324677,-7.050424917,.384391563,46.78807674,20.66895499,21.77770698,49.57422405,14.22597358,1.526464483,59.43010038,-6.68288916,26.47677438,73.80070427,-22.22261398,32.19613973,70,-27,-18,67.27,-11.89,66.45,82.01819244,27.32626662,3.578549973,50.67255726,-8.967277092,-10.23333388,64.38554823,-45.24500037,19.88354646,83.88773685,-7.008893896,4.640368883,84.12097874,8.954922827,58.28197661,105,64,86,17.55782077,28.15454014,20.39785864,66,-30,13,39.05286462,60.6587404,-100.0855559,38.16047845,50.12637287,-87.26662939,46.58338066,43.07305185,15.61187696,37.42082419,42.37703232,12.16108714,67.5,-34,49,70.9,-21.9,29.9,60.18439551,85.02752004,13.94692941,27,26,3,75.2796189,1.273903772,76.37534305,68.33951274,-8.393942977,-3.041376005,26.34242247,43.67285486,30.27080097,7.152926203,26.96018088,-21.99191542,60.04044275,3.987578535,47.0785095,84.82899135,10.8107776,85.78861735,20,-6,5,55.02392337,53.05473431,-4.316776346,59,6,6,53,27,-18,67.43151304,-38.88645408,-4.325110241,68.91798017,47.78508837,66.985011,62.30515944,-82.5246725,45.21587565,21.85454597,35.21043013,17.91355552,55.23358262,1.167401315,-6.115401756,61.68125529,33.4116145,-19.35457974,33.05805527,6.448797018,14.00012656,55.42066962,88.92084446,-44.31319208,23.73249546,42.21088092,18.27635337,59.89550413,77.60684564,58.94403309,78.66863376,-1.931341798,47.93806701,46.08293151,-13.95688956,-44.68359116,24.27867535,15.87040677,-48.24391601,50.02571866,2.330804997,52.57095706,56.67036058,10.23556351,16.20440434,71,-1,-2,53.78261626,69.20713241,62.63487702,61,24,-20,69,-29,-13,70.33458067,10.58433822,38.66508251,97.1216245,-14.45205231,3.872055076,50.69323898,.232268774,-.560927623,38.87396169,14.28738522,2.26081158,9.723303273,30.05316631,-21.03751326,53.83133358,82.7080566,16.36222288,50.1,42.8,-16.8,30.90707034,47.77875225,-19.15916971,64.20562658,4.886783709,-32.92346448,71.57626389,.563422787,-23.94214621,70.66,-6.76,-13.43,55,43,36,76.53155533,-7.690831721,1.771127841,41.88444214,67.45135306,43.19090652,31,1,-10,55.32238125,10.87551923,2.773951963,44.94578234,65.50115794,46.90774866,49.22659738,74.22162022,55.73823223,30.58201862,54.08380882,44.18483298,49.23438611,-11.31716795,-28.64904162,30.28084954,40.21938019,-76.68341409,29.39040822,27.58642921,-63.16316936,38.93753869,-5.459838872,-19.95690734,71.21253388,22.70250643,68.71426912,59.84540916,84.35718167,12.79520548,67.02091539,3.205898164,13.35359092,30,-3,-13,80.2,-6.2,84.7,57,13,15,95.08113564,-2.844946626,.75861611,39.1550346,.787608768,-51.22056239,91.81266643,5.077512984,9.783418849,51.57705746,-28.31319209,3.177094252,54.4,47.6,18.8,89.87598491,-6.100613319,-.308222562,66.08328249,58.20766502,53.44702046,81,-12,13,71.59688002,-4.744771513,-8.677246875,83.85622832,-11.88986377,-.972487844,49.27277794,21.92718202,51.0006298,34.59675049,28.80569199,-7.245431161,43.85941723,5.344700855,-33.7783563,30.76631089,-.323094055,.953499227,75,31,70,31.27050841,3.436369219,-22.26590301,59,36,-4,77.80250546,31.74606144,16.41965064,63.06397041,-15.23100803,18.27491236,61.68121736,-5.832155352,6.814358314,50.97687247,36.66247232,12.27168202,51.57711027,-7.370921902,.104968463,51.57709638,-7.070824121,-3.659039474,19.87436461,31.55897647,-26.6580009,20.43156437,1.227891213,.920815102,40.55920459,1.948791834,15.85118222,66.00908784,-49.16401945,-26.49672488,51,-7,-37,95.37596672,4.120447389,10.51711819,45.02607288,-10.04262484,3.156933198,56.94654953,51.40199214,51.97241594,25.68045474,11.60840598,7.468051774,52.29289037,73.51161172,57.69689738,68.5,6.9,8.1,71.58363968,26.81881837,-20.80157356,29,10,-4,96.14889587,1.114890511,-.1343482,71,-7,-6,50.56265518,29.19989616,-6.413584347,70.27335507,60.02098359,79.94804956,23,-2,0,66.4996932,6.799616769,38.05888003,74.54626811,27.16197826,44.15809984,37.71532731,8.395942968,18.72124983,56.44724267,73.21399839,-56.72762777,68.68160534,-15.27630647,21.7400025,61.42750084,89.89679444,74.86747135,69.22,-14.49,7.85,78.03167361,1.871075037,7.43095474,35.03712869,6.197085628,-12.08512715,64.13459967,41.56827884,9.589241039,40.90312079,45.61372927,7.674368189,39.16728291,36.28375511,34.10050313,76.15347842,40.70994762,86.90819126,52,-12,30,61.6006017,-9.836816059,-30.03424236,75.20219119,4.207155544,10.06078707,53.9380289,2.979859794,5.65919721,36.64035897,43.85962454,35.86305831,63.59104478,10.83372352,2.064037162,80,-20,53,48.63737544,56.94335173,32.85279037,55.4,22,21.1,61.68144851,44.4838469,17.86146302,61,10,12,19.05520562,-19.76986057,-10.01770429,83.3580436,10.71932736,83.83042856,25.9,9.4,-8.6,71.59690012,13.04425647,-18.17254113,54.15452202,-12.7066512,9.371809996,72,-7,2,46.01558254,61.86231028,33.9307985,47,44,30,63.57551004,3.438065654,30.10679915,60,23,43,43.04759374,10.31892209,5.341732047,77.15801692,34.62928098,87.55711519,49.9046782,-32.52044139,23.30033918,76.50751126,35.55919481,42.30820374,55,-1,-4,91.08178094,10.56225984,-6.168664219,63.50953909,.329930116,47.51219339,65,20,27,65.63083952,-20.26794486,-56.02076581,83.3244701,-5.223897718,-5.631954643,56.70015564,-68.0639744,2.111093724,39.25791463,28.98800414,33.67503986,42,10.8,27.8,39.47841981,33.16193711,11.66665026,86.10296742,6.023376567,38.14816062,55.44261705,9.340038999,6.453886023,60,27,49,25,2,-24,60.60201928,80.81365296,39.08869287,52,61,28,90.78166672,-4.824614627,29.49808708,91.06744344,-.416547711,47.96747822,67.09686849,-3.158570392,-4.963962753,24.65863727,-27.28143186,8.815538631,63,6,12,97.57129276,-11.00208893,-4.81849618,35.2,1.4,-33.9,31.33038419,13.1323975,30.53431708,65.32279815,-.260708768,-30.34705668,76.34655255,-69.63122535,25.26727617,55.14386126,-31.46457443,-12.5256816,90.44487293,-8.814431632,18.52509967,48.3390492,74.31193079,1.15776106,60,54,7,36.52516959,-54.36714989,15.19645466,57.96559073,10.26915995,20.67080999,61.67588909,-45.49256094,-4.633001871,45.19567693,57.02198665,40.01289698,86.10026292,7.252213202,51.90583553,60.2429581,-1.67233653,-36.80990844,69.24627281,27.82420624,66.98453729,22.97779286,45.20499823,23.63103838,36.08727378,38.50778053,24.52541519,49,57,11,42.45529776,7.196828871,-30.91997529,81.34793178,17.02357815,-13.89570045,70.8,-29.2,8,44.75,30.74,11.4,61.17313311,35.53429456,3.34380693,42.97861045,33.02125352,-20.45131945,43.46482488,9.744178672,-10.5197874,50.96462056,4.137325036,6.205642819,60.8817913,45.75008766,3.566776163,45.80609557,9.699425696,14.85978849,85.42828504,7.099976379,94.6999702,94.47054246,-28.62984913,-.30430986,35,-6,-21,44.71331457,47.46353515,-90.58344689,42,-21,-18,34.39575195,15.45292427,7.275112197,33.23858397,12.0446992,.523110071,29.99110477,62.53035977,-93.69334481,50.23561764,-84.21337048,54.4825218,46,-11,24,62.0379955,74.69184803,70.29758352,99.64169674,-.02457714,1.605698719,71.15362035,20.89229615,-18.05019692,57,-21,-34,44,60,4,86.66560238,36.14867245,-10.87608385,40.32403903,1.033636139,14.10500237,49.63907788,-40.1710677,-.53880983,77.89,-10.8,20.2,48,62,42,51,24,39,68.55672207,2.211802373,25.86229042,14.92446772,17.50364329,.687878282,90.85010158,-11.65763321,.642613513,90.14725024,1.245376954,19.22917073,49.36991983,38.3880657,61.92266342,29.2,-9,-15.8,93.53874898,3.702998579,-12.20551244,36,4,-31,17.4989276,38.05427515,20.45112719,43.94226927,13.54627428,-33.34795357,58.34191823,-11.02233759,-9.226703259,30.7956152,-2.050094303,-1.917142524,79,15,34,80,-1,74,16.85347512,48.11005009,-69.5414985,19.17135607,9.828668312,-19.7125973,54.30055391,19.11268873,1.911543244,31.90260945,-25.38891807,-12.48447736,52,21,30,74.03006303,-20.62329357,-7.565615991,94,-3,26,65.3876919,38.18666264,48.13984826,45.08376391,1.778461767,8.348189027,78.64914593,11.48638489,62.97453109,71.89175403,-1.0564598,46.60051984,79.2,11.6,73.4,72.84322572,-20.35061741,2.173703399,58.76953755,86.67898631,60.89383757,41.19482386,45.29175085,-33.62425563,5.555561978,3.303163893,-23.00324848,44.59639125,-27.77156623,.13930555,51.56008662,1.007772938,-17.86137299,46.63343833,-10.20153344,-46.76175609,53.2459479,31.26546222,32.51000807,61.68101328,-7.35947102,-35.30271526,43.94431129,9.332852541,12.26765,51.05658522,-18.38605832,-39.30612415,48.59313081,-24.99259673,20.11350669,90.68269442,-.602766317,14.55361348,83.88743585,4.628208094,-11.74547833,74,-30,-13,54.14867987,-5.903488017,33.95220771,40,-3,-8,83.97,1.56,7.1,81.34787029,-18.25515106,.833228603,21.26,.86,.65,35.00624979,9.847348065,24.11692268,73,-21,-13,96.53107683,-23.95435673,80.83839142,85.26322358,-17.96970024,39.66138217,47,39,39,84.94186291,2.091230233,87.12057252,55.23298939,51.08409075,21.43230938,62.84804382,-11.43112981,-4.552237656,95.07024883,-6.01280957,8.21402486,69,36,64,84.04126002,-127.3069438,91.22459755,32.89802251,5.047111537,1.392605924,83.1027197,16.90595476,12.47706826,60.98176742,17.25358385,6.000918141,89.2,-8.6,-2,80.34,.96,83.96,88.5243255,-13.91564019,-6.771631032,31,2,4,49,41,-3,54.07795847,9.337793109,6.552525968,43.94561436,4.411145999,-23.26323602,78,-17,-12,51.65996485,80.58645714,9.202734108,83.88724477,3.37717425,-11.70737288,19,3,-13,43,-1,-6,28.02656059,35.57630822,30.8338057,82,21,4,20.61900422,-9.817178613,-12.76547606,43.92773348,12.81295578,8.49160179,74,33,25,71.55899501,47.20049815,28.738336,41.1205401,-12.83755371,-3.846532813,30.03898648,27.57470323,33.8887624,49,-31,-14,51.53820391,25.0390597,-2.395189677,54.33413896,-27.02669395,-34.82659679,91.53005318,2.093801706,-8.84431786,93.81182171,-5.375294196,33.43621121,59,15,28,48.16581088,67.4151332,45.40338087,64,1,2,80.8147298,26.44681181,53.13488243,50.4303546,76.09994042,40.2224842,34.2,15.6,.1,73.55548764,31.46865431,56.19206855,40,-13,17,35.24022212,3.457017729,-12.17139373,68.89695146,51.86065408,75.4063018,44.02204209,36.47014878,46.14680485,60.12703016,46.43941085,39.82403401,85.81844407,-5.607073114,7.463545164,42.64396729,-.470514423,-2.125966824,52.65505389,10.4950927,4.975090268,49,29,-23,46.31839534,-38.96833382,-15.34246554,42.05659093,62.60971747,41.85074181,37.07109009,42.60316659,10.9196778,27.71394074,.235704682,5.908580695,47,-21,-17,42.71088573,64.65906135,45.18082715,82.6,-10.4,-17.6,57.6581235,8.294969817,30.30333515,99.61720508,-.197518929,2.091383121,80.63014905,8.846525802,21.12207474,69.7686633,-19.18602494,1.476112866,82.84209113,3.055463985,3.613341419,56,12,11,25.20656812,36.91173529,-11.50431917,66.52191114,-14.729075,-33.7982694,23.67607661,34.52066373,18.89169319,34.03052907,10.38193694,-4.633963902,96.54036511,.978726743,3.123375448,40.66436041,56.83579286,42.49218371,41.8562295,33.57461392,33.86264477,29.61919308,2.002413239,-20.81141945,55,10,25,78.3267731,29.49099841,-21.36230366,76.56578303,38.4373417,4.226251679,91.08181225,10.50686496,1.861068685,55.32269376,3.844340383,-11.7512662,82.38427634,-96.04427151,55.59932314,55.44,29.48,21.97,76.91674958,18.42280579,84.13704337,88.65241642,-1.444339588,25.23741486,27.82844583,29.53688235,3.999391314,40.75368934,13.96711561,9.98515631,51.57716873,-1.035635268,10.72470204,63.12459226,-47.51425623,10.19149673,76,38,5,58.70782199,-69.92900535,3.963846405,62,42,-4,29.06527794,48.9835898,42.2497305,74.03904161,-24.80874988,58.96662048,92.3313486,-46.22876398,34.96007835,74.99878683,-66.99592395,22.63615156,48.53541667,-30.76756572,-16.83615494,94.90878761,-7.175917163,-4.938719796,49.16914047,41.4169353,5.546840726,41.20156868,13.3842182,-14.16624538,16.93266834,10.50838138,-1.240345602,75,3,53,81.31930448,-4.403166481,-16.86153662,18.189584,-5.677285485,-2.196697946,33.47336899,34.91385768,-4.557985183,62.03199755,-81.89812226,47.75815747,55.6036226,57.70957642,44.34565281,77.53816965,-22.25931976,3.712030171,89.98563087,-2.679092289,-6.038279863,54.18353117,1.970160255,11.32585995,65.73338526,40.98404393,33.56566673,76.05765326,5.656421961,53.47733762,69.9611231,-2.65577268,17.1784326,89.06236637,-14.14925916,37.95247011,73.42687427,44.80246226,82.25638021,94.61846975,.385244693,-.930363502,56.33168032,-22.60425416,-9.335897508,40,40,19,79.30200889,30.38130185,19.26043313,57.03541158,10.67331497,-5.090657604,44.90177718,9.095395143,6.784151779,54.14176549,15.91131683,-5.140116906,50.50431255,25.97028114,21.97208192,67.47537225,105.6474093,-52.60554872,75.54859711,-29.15506883,39.3229745,29.2,21,-7.8,60,52,30,76.87350706,31.05696921,87.29929807,79.8445857,30.30400108,12.65665144,42.13163982,40.94712576,50.31009243,52.29558913,-75.90869194,22.37594701,61.97810491,76.21236206,34.10167364,20.1883013,46.21495375,-54.17751019,53.83299891,30.55556922,32.69076385,62,-7,-27,62.98733421,53.2077736,43.87053781,19.16721234,28.89621137,11.46115312,52.80325011,15.75400898,-24.02225069,52.31368982,59.22354822,27.58080399,35.59733191,25.31721029,-48.40468299,54.15573121,1.587578255,18.27771209,23.44206252,43.08337646,28.64687972,39.58328406,18.84888451,14.51697304,33.60343141,21.12502956,18.32261098,28.99034357,4.569578149,22.19834303,65.9,11.8,-27,46.1469986,8.253627687,8.008012224,32,-8.6,-22.4,54.11579226,35.27697719,-26.85231861,63.73911267,9.31770509,5.693106431,45,-20,-2,63.4299626,56.09493984,66.03627272,66.39608984,40.24416041,-3.495501422,47.80942031,10.41700648,56.70007897,85.88286229,15.01604849,.656840626,58,2,9,86,12,13,93.68021421,-10.35070883,25.58003759,71.5969489,-21.20454417,27.37835093,78,26,14,37.74813309,40.8813489,41.03689674,64.13698797,-11.77399956,-20.48855476,34.48377292,-12.26522227,-11.65842776,54.77367279,62.50575502,65.09442997,84.17627106,-125.5080393,91.36851323,69.66883701,27.03516595,80.40684607,75.14676606,-.599740124,15.65032002,50,38,34,60,0,-4,50,58,12,60.28219501,28.64082343,45.91683599,55.41706272,51.51491074,51.86875138,39.87351517,59.04337674,15.30934004,71.46898764,-22.53189156,-23.02551708,82.71103977,-45.87698667,-21.5895525,92.77327995,-46.69611694,82.98767988,55.27389833,-17.57465548,-2.409372747,58.67,39.98,12.69,68.40439526,38.01943415,-30.29521608,95.97721427,-20.37311075,2.071311363,71.53955565,-33.2154138,4.043301197,61.11123199,27.55477762,44.00571685,60.00398821,-4.665989236,14.25125751,63.78699223,-14.98807807,16.21588499,49,-6,0,75.5144032,32.36265275,6.578543613,55.02505812,75.42038457,3.376451381,46.03228813,49.02122184,31.08532426,81.92706759,-15.97753842,49.51961443,43.8948249,16.40626461,2.959591039,92.90957529,-.721364308,8.197127173,27.53062514,3.842654635,39.54778028,74.11334579,15.8972175,29.40787706,81.98064332,16.81279665,82.06182057,90.14864316,4.564981338,4.590292919,4.972160208,9.513472845,4.282835589,97.98796204,-1.776071471,5.138669042,70,44,-2,86.17534564,-15.38220887,23.66523784,81.37275564,-10.45811344,62.50538992,41.69194525,54.67333768,25.6661643,72,8,17,79.29609376,2.865466936,-7.491795555,54.68742362,-5.195758879,-8.170102591,36.23375945,16.63493674,-17.07172412,83.62600934,-6.905129258,5.890002976,46.8,41.5,22.6,87,12,28,75,10,0,46.73122598,65.67663438,42.88594644,93.27893305,-37.94642464,15.6024247,36.33097456,40.99175869,-43.6772414,74.96120648,-3.796421385,-21.05748722,60.26236135,-14.92504294,-31.05076363,41.16947215,26.13167884,-2.478624625,36.1409772,-2.08616643,-4.85531724,49.36740388,70.1298668,-4.263933673,77.8,20.6,1,50,56,36,69.26651685,28.96940263,73.84691746,75.65440207,1.50919412,18.17241587,41.15459944,43.44971524,9.420704828,65.63460301,39.47077932,22.34062845,46.1147922,-.502038647,21.96698522,61.66964242,3.959871231,-15.20304672,38.10030715,38.97659017,37.64731313,68.21554223,55.01433372,65.31232205,46.68736864,37.72811116,49.88253103,65.35102693,9.409725992,5.738632186,81.0770725,5.752866055,8.74229687,61.68146705,35.71691145,42.41498853,50.31222758,44.51682573,25.82290337,68.07318429,-7.444175673,28.68757327,86.29824403,20.65734839,.742403981,60.11723217,44.75312025,32.93193394,35.02116633,10.70542877,12.59952173,61.65130356,-.30660378,-32.34170401,44.40499084,22.67831941,34.76022761,54.58465807,-20.70266458,7.801785661,91.06690779,.270079719,33.42048411,57.64030124,37.15118312,3.05141664,66.68471568,19.85666218,43.11640806,84,6,25,64.6878666,22.98907108,2.617817339,33.8,-2.4,11.1,32,3,5,31,0,-32,21.24988339,58.18311061,-78.39318292,82,42,10,41.49653862,45.3461211,-13.67318296,67.14654626,-18.49451907,-20.34179977,85.8771305,7.729637805,86.13941568,74.04365536,39.90681497,22.6828303,79.32695776,-26.74767427,52.54853258,71.59689088,-7.13465584,-4.135963907,54.58333883,-88.12834271,64.38069893,67,45,17,97.92868411,-2.19983452,6.367396381,70.91943097,38.51478545,-47.22256847,51.55758239,4.61436633,-24.53258619,63.03640796,22.20727027,3.724129028,61.9708047,73.06745612,67.4873183,35.01606296,1.69295524,7.503954268,33.62001256,25.39510582,-7.126179161,6.908385208,-7.199260307,-2.75066205,82.04698107,26.78914828,-15.45517274,84.94853636,10.77396699,.294047206,85.8,-9.4,-7.5,4.563255973,-.941988879,-6.385880393,45.16382874,-17.63654426,11.04588131,60.73527467,9.298075517,-35.40518832,66.60159845,18.72741187,-23.62353468,22.90235857,35.98772375,25.68667081,91.07018638,4.649621876,21.80902028,61.64768102,43.40409859,39.56599876,75.70265462,14.55810206,15.42558254,31.09059532,-3.948116998,-23.2622757,39.32247642,-20.55255955,13.87406123,84.17704835,39.15645084,-3.642398135,77.22630109,-29.03452966,9.46447219,71.5970387,14.58736955,15.78540406,44.44041996,-20.67551353,15.68618164,71.16174428,-41.52189468,30.08878039,22.47207743,21.68782967,-51.24978204,54,54,7,66.70879326,-7.582542169,-.199070603,83.75384349,19.4574966,71.83431033,73,4,38,42.92707453,32.45527284,-17.31307328,78.12502207,25.89585155,8.277718011,61.56010914,-9.113797198,2.488943689,51.57699805,14.47877978,-36.71129706,66.48124507,-9.68929647,-4.046322183,61.68123399,11.32818906,-4.847167939,57,-2,-9,40,55,-4,53.9496578,-9.156498881,-39.92660181,35,-29,-20,43.13686913,57.95847133,-17.50191718,59,-11,21,64.06300228,-34.25392902,8.085363332,34.93085944,32.12518048,24.24897137,67.67894701,60.07001586,9.338167289,93.12016535,-7.835689784,34.26935084,69.51,9.77,5.04,39.65840884,48.26587244,-26.40942423,73.42005263,39.3226474,49.72114444,89.52258614,-65.73197247,26.51566183,45.67970266,41.83662251,3.505659394]).map(o=>o/z0);na([sa]);const b1=document.querySelector("#meshSelect"),Q2=document.querySelector("#meshMatSelect");Q2.add(new Option("\u663E\u793A\u7EBF\u6846"));Q2.add(new Option("\u663E\u793A\u9762"));b1.add(new Option("\u4E0D\u663E\u793A\u8FB9\u754C"));b1.add(new Option("\u9752"));b1.add(new Option("\u8D64"));b1.add(new Option("\u9EC4"));b1.add(new Option("\u767D"));b1.add(new Option("\u9ED1"));b1.add(new Option("\u663E\u793A\u5168\u90E8\u8FB9\u754C"));Q2.addEventListener("change",Pa);b1.addEventListener("change",La);const w2=new he,j4=new Uo,I5=document.querySelector(".webgl"),Gt=new j9,da=new g0(1,1,1),pa=new co(da),ma=new W2({color:16777215,linewidth:2}),U5=new M5(pa,ma);U5.position.set(.5,.5,.5);Gt.add(U5);const ga=new ko,N5=new r0;let _a=["l","a","b"];_a.forEach(o=>{P3(o,"",o=="l"?"y":o=="a"?"z":"x",16711680,.1)});let va=["-128","10","20","30","40","50","60","70","80","90","100"],xa=["-102","-76","-50","-24","-2","28","44","70","96","124"],ba=["-102","-76","-50","-24","-2","28","44","70","96","124"];va.forEach((o,e)=>{P3(o,(e/10).toFixed(1),"y")});xa.forEach((o,e)=>{P3(o,((e+1)/10).toFixed(1),"z")});ba.forEach((o,e)=>{P3(o,((e+1)/10).toFixed(1),"x")});function P3(o,e,t,n=16777215,i=.03){ga.load("/public/SJgzks_Regular.json",function(r){var s=new Yo(o,{font:r,size:i,height:0});switch(t){case"x":s.translate(e?Number(e):.5,e?0:.1,-.1);break;case"y":s.translate(e?-.1:-.2,e?Number(e):.5,-.1);break;case"z":s.translate(e?-.1:-.2,0,e?Number(e):.5);break}var a=new Kt({color:n}),c=new ut(s,a);N5.add(c)})}Gt.add(N5);const O5=new lt;O5.setAttribute("position",new xt(la,3));const F5=new lt;F5.setAttribute("position",new xt(ca,3));const z5=new lt;z5.setAttribute("position",new xt(ua,3));const B5=new lt;B5.setAttribute("position",new xt(ha,3));const H5=new lt;H5.setAttribute("position",new xt(fa,3));const Xt=new Kt({color:65535,wireframe:!0,visible:!1}),Yt=new Kt({color:15538749,visible:!1,wireframe:!0}),jt=new Kt({color:16776960,visible:!1,wireframe:!0}),Zt=new Kt({color:16777215,visible:!1,wireframe:!0}),$t=new Kt({color:0,visible:!1,wireframe:!0}),Ma=new ut(O5,Xt),ya=new ut(F5,Yt),Sa=new ut(z5,jt),wa=new ut(B5,Zt),Ea=new ut(H5,$t);Gt.add(Ma,ya,Sa,wa,Ea);const w3={width:window.innerWidth,height:window.innerHeight},u1=new Dt(45,w3.width/w3.height);u1.position.z=2;u1.position.x=2;u1.position.y=2;Gt.add(u1);const B0=new b5({canvas:I5,antialias:!0});B0.setPixelRatio(window.devicePixelRatio);B0.setSize(w3.width,w3.height);let Ta=new Oo(1.5);Gt.add(Ta);Gt.background=new We(5592405);V5();function V5(){G5(),requestAnimationFrame(V5)}window.addEventListener("resize",Aa);I5.addEventListener("pointermove",Ca);function G5(){B0.render(Gt,u1)}const H0=new jo(u1,B0.domElement);H0.addEventListener("change",G5);H0.minDistance=1;H0.maxDistance=10;H0.target.set(.5,.5,.5);H0.update();function Aa(){u1.aspect=window.innerWidth/window.innerHeight,u1.updateProjectionMatrix(),B0.setSize(window.innerWidth,window.innerHeight)}function Ca(o){if(Z4("",0,0,0,"",""),!$4.group)return;w2.x=o.clientX/window.innerWidth*2-1,w2.y=-(o.clientY/window.innerHeight)*2+1,j4.setFromCamera(w2,u1);const e=j4.intersectObject($4.group,!0);if(e.length>0){const t=e.filter(function(n){return n&&n.object})[0];if(t&&t.point&&t.object){let n=ot(t.point.y,0,1,0,100,!0),i=ot(t.point.x,0,1,-128,127,!0),r=ot(t.point.z,0,1,-128,127,!0);Z4(_t({l:n,a:r,b:i}).toHex(),n,r,i,t.object.name,t.object.from?t.object.from:"",t.point)}}}function Z4(o,e,t,n,i,r,s){document.querySelector("#name").innerHTML=o,document.querySelector("#name").style.color=o,document.querySelector("#l").innerHTML=Number(e).toFixed(2),document.querySelector("#a").innerHTML=Number(t).toFixed(2),document.querySelector("#b").innerHTML=Number(n).toFixed(2),document.querySelector("#colorName").innerHTML=i,document.querySelector("#from").innerHTML=r,s?(document.querySelector("#x").innerHTML=s.x.toFixed(2),document.querySelector("#y").innerHTML=s.y.toFixed(2),document.querySelector("#z").innerHTML=s.z.toFixed(2)):(document.querySelector("#x").innerHTML=0,document.querySelector("#y").innerHTML=0,document.querySelector("#z").innerHTML=0)}function La(o){const e=o.srcElement.selectedIndex,t=o.srcElement.options[e].text;t==="\u9752"?(Xt.visible=!0,Yt.visible=!1,jt.visible=!1,Zt.visible=!1,$t.visible=!1):t==="\u8D64"?(Xt.visible=!1,Yt.visible=!0,jt.visible=!1,Zt.visible=!1,$t.visible=!1):t==="\u9EC4"?(Xt.visible=!1,Yt.visible=!1,jt.visible=!0,Zt.visible=!1,$t.visible=!1):t==="\u767D"?(Xt.visible=!1,Yt.visible=!1,jt.visible=!1,Zt.visible=!0,$t.visible=!1):t==="\u9ED1"?(Xt.visible=!1,Yt.visible=!1,jt.visible=!1,Zt.visible=!1,$t.visible=!0):t==="\u4E0D\u663E\u793A\u8FB9\u754C"?(Xt.visible=!1,Yt.visible=!1,jt.visible=!1,Zt.visible=!1,$t.visible=!1):t==="\u663E\u793A\u5168\u90E8\u8FB9\u754C"&&(Xt.visible=!0,Yt.visible=!0,jt.visible=!0,Zt.visible=!0,$t.visible=!0)}function Pa(o){const e=o.srcElement.selectedIndex;o.srcElement.options[e].text==="\u663E\u793A\u7EBF\u6846"?(Xt.wireframe=!0,Yt.wireframe=!0,jt.wireframe=!0,Zt.wireframe=!0,$t.wireframe=!0):(Xt.wireframe=!1,Yt.wireframe=!1,jt.wireframe=!1,Zt.wireframe=!1,$t.wireframe=!1)}let $4=new Vue({el:"#info",data(){return{firstLevelList:[],secondLevelList:[],thirdLevelList:[],firstColorValue:[],secondColorValue:[],thirdColorValue:[],group:null,status:!1,colorValue:""}},methods:{firstLevelChange(o,e=!1){e||(this.group.children.length>0&&this.group.clear(),this.secondLevelChange(this.secondColorValue,!0),this.thirdLevelChange(this.thirdColorValue,!0),this.changeColor(this.colorValue,!0)),o.forEach(t=>{N4.filter(i=>i.parent===t).forEach((i,r)=>{const s=_t({l:i.l,a:i.a,b:i.b}).toHex(),a=ot(i.l,0,100,0,1,!0),c=ot(i.b,-128,127,0,1,!0),l=ot(i.a,-128,127,0,1,!0);let u=new L(c,a,l),f=this.creatSphere(u,s);f.name=i.color,this.group.add(f)})}),Gt.add(this.group)},secondLevelChange(o,e=!1){e||(this.group.children.length>0&&this.group.clear(),this.thirdLevelChange(this.thirdColorValue,!0),this.firstLevelChange(this.firstColorValue,!0),this.changeColor(this.colorValue,!0)),o.forEach(t=>{let n=O4.filter(s=>s.parent===t),i=[];n.forEach((s,a)=>{const c=_t({l:s.l,a:s.a,b:s.b}).toHex(),l=ot(s.l,0,100,0,1,!0),u=ot(s.b,-128,127,0,1,!0),f=ot(s.a,-128,127,0,1,!0);let h=new L(u,l,f);i.push(h);let p=this.creatSphere(h,c);p.name=s.color,this.group.add(p)});let r=this.creatGeometry(i);this.group.add(r)}),Gt.add(this.group)},thirdLevelChange(o,e=!1){e||(this.group.children.length>0&&this.group.clear(),this.secondLevelChange(this.secondColorValue,!0),this.firstLevelChange(this.firstColorValue,!0),this.changeColor(this.colorValue,!0)),o.forEach(t=>{let n=F4.filter(s=>s.parent===t),i=[];n.forEach((s,a)=>{const c=_t({l:s.l,a:s.a,b:s.b}).toHex(),l=ot(s.l,0,100,0,1,!0),u=ot(s.b,-128,127,0,1,!0),f=ot(s.a,-128,127,0,1,!0);let h=new L(u,l,f);i.push(h);let p=this.creatSphere(h,c);p.name=s.color,p.from=s.from,this.group.add(p)});let r=this.creatGeometry(i);this.group.add(r)}),Gt.add(this.group)},creatSphere(o,e){const t=new Z2(.01),n=new Kt({color:e}),i=new ut(t,n);return i.position.copy(o),i},creatGeometry(o){var e=new Go(o);let t=[];e.attributes.position.array.forEach(a=>{t.push(a)});const n=3,i=[];for(let a=0;a<t.length;a+=n)i.push(t.slice(a,a+n));let r=[];if(i.forEach(a=>{let c=ot(a[1],0,1,0,100,!0),l=ot(a[2],0,1,-128,127,!0),u=ot(a[0],0,1,-128,127,!0),f=_t({l:c,a:l,b:u}).toHex();r=r.concat(this.colorToRgb(f))}),e.setAttribute("color",new Je(r,3)),this.status){e.setAttribute("color",new Je(r,3));const a=new Kt({wireframe:!0});return new ut(e,a)}else{var s=new x1({vertexShader:`
          varying vec2 vUv;
          varying vec3 vColor;
          attribute vec3 color;
          void main() {
              vColor = color;
              vUv = uv;
              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }
      `,fragmentShader:`
          varying vec2 vUv;
          varying vec3 vColor;
          void main() {
            gl_FragColor=vec4(vColor, 1.0); //\u6700\u540E\u8BBE\u7F6E\u9876\u70B9\u989C\u8272\uFF0C\u70B9\u4E0E\u70B9\u4E4B\u95F4\u4F1A\u81EA\u52A8\u63D2\u503C
          }
      `});return new ut(e,s)}},formatData(o){let e=[];return o.forEach(t=>{let n=t.parent.replace(/\r\n/,"");n&&e.push(n)}),e=Array.from(new Set(e)),e},colorToRgb(o){o=o.toLowerCase();var e=/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;if(o&&e.test(o)){if(o.length===4){for(var t="#",n=1;n<4;n+=1)t+=o.slice(n,n+1).concat(o.slice(n,n+1));o=t}for(var i=[],n=1;n<7;n+=2)i.push(parseInt("0x"+o.slice(n,n+2))/255);return i}return o},statusChange(){this.group.children.length>0&&this.group.clear(),this.firstLevelChange(this.firstColorValue,!0),this.secondLevelChange(this.secondColorValue,!0),this.thirdLevelChange(this.thirdColorValue,!0)},changeColor(o,e=!1){if(e||(this.group.children.length>0&&this.group.clear(),this.thirdLevelChange(this.thirdColorValue,!0),this.firstLevelChange(this.firstColorValue,!0),this.secondLevelChange(this.secondColorValue,!0)),/^(100|\d{1,2}),(-?(12[0-8]|1[01][0-9]|[1-9][0-9]?)),(-?(12[0-8]|1[01][0-9]|[1-9][0-9]?))$/.test(o)){let n=o.split(",");const i=_t({l:n[0],a:n[1],b:n[2]}).toHex(),r=ot(n[0],0,100,0,1,!0),s=ot(n[1],-128,127,0,1,!0),a=ot(n[2],-128,127,0,1,!0);let c=new L(a,r,s),l=this.creatSphere(c,i);l.name="\u81EA\u5B9A\u4E49",this.group.add(l),Gt.add(this.group),e||this.$message({showClose:!0,message:"\u6DFB\u52A0\u6210\u529F",type:"success"})}else{if(e)return;this.$message({showClose:!0,message:"\u8BF7\u8F93\u5165\u6B63\u786E\u7684lab\u989C\u8272\u683C\u5F0F,\u683C\u5F0F\u4E3A 0,0,0",type:"error"})}}},created(){this.group=new r0,this.firstLevelList=this.formatData(N4),this.secondLevelList=this.formatData(O4),this.thirdLevelList=this.formatData(F4)}});
